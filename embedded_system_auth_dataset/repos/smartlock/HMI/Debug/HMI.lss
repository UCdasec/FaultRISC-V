
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00800060  00002d32  00002dc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800260  00800260  00002fc6  2**0
                  ALLOC
  3 .stab         0000624c  00000000  00000000  00002fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000039c9  00000000  00000000  00009214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000cbdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000197  00000000  00000000  0000cd1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a88  00000000  00000000  0000ceb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eb7  00000000  00000000  0000e93c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000df7  00000000  00000000  0000f7f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000105ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002bf  00000000  00000000  0001074c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007f2  00000000  00000000  00010a0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__vector_1>
       8:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__vector_2>
       c:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__vector_3>
      10:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 15 08 	jmp	0x102a	; 0x102a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__vector_8>
      24:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__vector_18>
      4c:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 36       	cpi	r26, 0x60	; 96
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e6       	ldi	r26, 0x60	; 96
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 37       	cpi	r26, 0x7B	; 123
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <main>
      8a:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 cb 02 	call	0x596	; 0x596 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e2       	ldi	r26, 0x22	; 34
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__epilogue_restores__+0x18>

0000043e <__divsf3>:
     43e:	a8 e1       	ldi	r26, 0x18	; 24
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__prologue_saves__+0x10>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	b9 e0       	ldi	r27, 0x09	; 9
     45c:	eb 2e       	mov	r14, r27
     45e:	f1 2c       	mov	r15, r1
     460:	ec 0e       	add	r14, r28
     462:	fd 1e       	adc	r15, r29
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	b7 01       	movw	r22, r14
     46a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     46e:	8e 01       	movw	r16, r28
     470:	0f 5e       	subi	r16, 0xEF	; 239
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	b8 01       	movw	r22, r16
     47a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     47e:	29 85       	ldd	r18, Y+9	; 0x09
     480:	22 30       	cpi	r18, 0x02	; 2
     482:	08 f4       	brcc	.+2      	; 0x486 <__stack+0x27>
     484:	7e c0       	rjmp	.+252    	; 0x582 <__stack+0x123>
     486:	39 89       	ldd	r19, Y+17	; 0x11
     488:	32 30       	cpi	r19, 0x02	; 2
     48a:	10 f4       	brcc	.+4      	; 0x490 <__stack+0x31>
     48c:	b8 01       	movw	r22, r16
     48e:	7c c0       	rjmp	.+248    	; 0x588 <__stack+0x129>
     490:	8a 85       	ldd	r24, Y+10	; 0x0a
     492:	9a 89       	ldd	r25, Y+18	; 0x12
     494:	89 27       	eor	r24, r25
     496:	8a 87       	std	Y+10, r24	; 0x0a
     498:	24 30       	cpi	r18, 0x04	; 4
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__stack+0x41>
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 f4       	brne	.+12     	; 0x4ac <__stack+0x4d>
     4a0:	23 17       	cp	r18, r19
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <__stack+0x47>
     4a4:	6e c0       	rjmp	.+220    	; 0x582 <__stack+0x123>
     4a6:	62 e2       	ldi	r22, 0x22	; 34
     4a8:	71 e0       	ldi	r23, 0x01	; 1
     4aa:	6e c0       	rjmp	.+220    	; 0x588 <__stack+0x129>
     4ac:	34 30       	cpi	r19, 0x04	; 4
     4ae:	39 f4       	brne	.+14     	; 0x4be <__stack+0x5f>
     4b0:	1d 86       	std	Y+13, r1	; 0x0d
     4b2:	1e 86       	std	Y+14, r1	; 0x0e
     4b4:	1f 86       	std	Y+15, r1	; 0x0f
     4b6:	18 8a       	std	Y+16, r1	; 0x10
     4b8:	1c 86       	std	Y+12, r1	; 0x0c
     4ba:	1b 86       	std	Y+11, r1	; 0x0b
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__stack+0x67>
     4be:	32 30       	cpi	r19, 0x02	; 2
     4c0:	21 f4       	brne	.+8      	; 0x4ca <__stack+0x6b>
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	89 87       	std	Y+9, r24	; 0x09
     4c6:	b7 01       	movw	r22, r14
     4c8:	5f c0       	rjmp	.+190    	; 0x588 <__stack+0x129>
     4ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     4cc:	3c 85       	ldd	r19, Y+12	; 0x0c
     4ce:	8b 89       	ldd	r24, Y+19	; 0x13
     4d0:	9c 89       	ldd	r25, Y+20	; 0x14
     4d2:	28 1b       	sub	r18, r24
     4d4:	39 0b       	sbc	r19, r25
     4d6:	3c 87       	std	Y+12, r19	; 0x0c
     4d8:	2b 87       	std	Y+11, r18	; 0x0b
     4da:	ed 84       	ldd	r14, Y+13	; 0x0d
     4dc:	fe 84       	ldd	r15, Y+14	; 0x0e
     4de:	0f 85       	ldd	r16, Y+15	; 0x0f
     4e0:	18 89       	ldd	r17, Y+16	; 0x10
     4e2:	ad 88       	ldd	r10, Y+21	; 0x15
     4e4:	be 88       	ldd	r11, Y+22	; 0x16
     4e6:	cf 88       	ldd	r12, Y+23	; 0x17
     4e8:	d8 8c       	ldd	r13, Y+24	; 0x18
     4ea:	ea 14       	cp	r14, r10
     4ec:	fb 04       	cpc	r15, r11
     4ee:	0c 05       	cpc	r16, r12
     4f0:	1d 05       	cpc	r17, r13
     4f2:	40 f4       	brcc	.+16     	; 0x504 <__stack+0xa5>
     4f4:	ee 0c       	add	r14, r14
     4f6:	ff 1c       	adc	r15, r15
     4f8:	00 1f       	adc	r16, r16
     4fa:	11 1f       	adc	r17, r17
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	30 40       	sbci	r19, 0x00	; 0
     500:	3c 87       	std	Y+12, r19	; 0x0c
     502:	2b 87       	std	Y+11, r18	; 0x0b
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e4       	ldi	r27, 0x40	; 64
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	ea 14       	cp	r14, r10
     51a:	fb 04       	cpc	r15, r11
     51c:	0c 05       	cpc	r16, r12
     51e:	1d 05       	cpc	r17, r13
     520:	40 f0       	brcs	.+16     	; 0x532 <__stack+0xd3>
     522:	28 2b       	or	r18, r24
     524:	39 2b       	or	r19, r25
     526:	4a 2b       	or	r20, r26
     528:	5b 2b       	or	r21, r27
     52a:	ea 18       	sub	r14, r10
     52c:	fb 08       	sbc	r15, r11
     52e:	0c 09       	sbc	r16, r12
     530:	1d 09       	sbc	r17, r13
     532:	b6 95       	lsr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	ee 0c       	add	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	00 1f       	adc	r16, r16
     540:	11 1f       	adc	r17, r17
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	6f 31       	cpi	r22, 0x1F	; 31
     548:	71 05       	cpc	r23, r1
     54a:	31 f7       	brne	.-52     	; 0x518 <__stack+0xb9>
     54c:	da 01       	movw	r26, r20
     54e:	c9 01       	movw	r24, r18
     550:	8f 77       	andi	r24, 0x7F	; 127
     552:	90 70       	andi	r25, 0x00	; 0
     554:	a0 70       	andi	r26, 0x00	; 0
     556:	b0 70       	andi	r27, 0x00	; 0
     558:	80 34       	cpi	r24, 0x40	; 64
     55a:	91 05       	cpc	r25, r1
     55c:	a1 05       	cpc	r26, r1
     55e:	b1 05       	cpc	r27, r1
     560:	61 f4       	brne	.+24     	; 0x57a <__stack+0x11b>
     562:	27 fd       	sbrc	r18, 7
     564:	0a c0       	rjmp	.+20     	; 0x57a <__stack+0x11b>
     566:	e1 14       	cp	r14, r1
     568:	f1 04       	cpc	r15, r1
     56a:	01 05       	cpc	r16, r1
     56c:	11 05       	cpc	r17, r1
     56e:	29 f0       	breq	.+10     	; 0x57a <__stack+0x11b>
     570:	20 5c       	subi	r18, 0xC0	; 192
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	4f 4f       	sbci	r20, 0xFF	; 255
     576:	5f 4f       	sbci	r21, 0xFF	; 255
     578:	20 78       	andi	r18, 0x80	; 128
     57a:	2d 87       	std	Y+13, r18	; 0x0d
     57c:	3e 87       	std	Y+14, r19	; 0x0e
     57e:	4f 87       	std	Y+15, r20	; 0x0f
     580:	58 8b       	std	Y+16, r21	; 0x10
     582:	be 01       	movw	r22, r28
     584:	67 5f       	subi	r22, 0xF7	; 247
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	cb 01       	movw	r24, r22
     58a:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     58e:	68 96       	adiw	r28, 0x18	; 24
     590:	ea e0       	ldi	r30, 0x0A	; 10
     592:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__epilogue_restores__+0x10>

00000596 <__gesf2>:
     596:	a8 e1       	ldi	r26, 0x18	; 24
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e1 ed       	ldi	r30, 0xD1	; 209
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__prologue_saves__+0x18>
     5a2:	69 83       	std	Y+1, r22	; 0x01
     5a4:	7a 83       	std	Y+2, r23	; 0x02
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	2d 83       	std	Y+5, r18	; 0x05
     5ac:	3e 83       	std	Y+6, r19	; 0x06
     5ae:	4f 83       	std	Y+7, r20	; 0x07
     5b0:	58 87       	std	Y+8, r21	; 0x08
     5b2:	89 e0       	ldi	r24, 0x09	; 9
     5b4:	e8 2e       	mov	r14, r24
     5b6:	f1 2c       	mov	r15, r1
     5b8:	ec 0e       	add	r14, r28
     5ba:	fd 1e       	adc	r15, r29
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     5c6:	8e 01       	movw	r16, r28
     5c8:	0f 5e       	subi	r16, 0xEF	; 239
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	ce 01       	movw	r24, r28
     5ce:	05 96       	adiw	r24, 0x05	; 5
     5d0:	b8 01       	movw	r22, r16
     5d2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	40 f0       	brcs	.+16     	; 0x5ec <__gesf2+0x56>
     5dc:	89 89       	ldd	r24, Y+17	; 0x11
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	28 f0       	brcs	.+10     	; 0x5ec <__gesf2+0x56>
     5e2:	c7 01       	movw	r24, r14
     5e4:	b8 01       	movw	r22, r16
     5e6:	0e 94 64 05 	call	0xac8	; 0xac8 <__fpcmp_parts_f>
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <__gesf2+0x58>
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	68 96       	adiw	r28, 0x18	; 24
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__epilogue_restores__+0x18>

000005f6 <__fixsfsi>:
     5f6:	ac e0       	ldi	r26, 0x0C	; 12
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 70 16 	jmp	0x2ce0	; 0x2ce0 <__prologue_saves__+0x20>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	ce 01       	movw	r24, r28
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	be 01       	movw	r22, r28
     610:	6b 5f       	subi	r22, 0xFB	; 251
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     618:	8d 81       	ldd	r24, Y+5	; 0x05
     61a:	82 30       	cpi	r24, 0x02	; 2
     61c:	61 f1       	breq	.+88     	; 0x676 <__fixsfsi+0x80>
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	50 f1       	brcs	.+84     	; 0x676 <__fixsfsi+0x80>
     622:	84 30       	cpi	r24, 0x04	; 4
     624:	21 f4       	brne	.+8      	; 0x62e <__fixsfsi+0x38>
     626:	8e 81       	ldd	r24, Y+6	; 0x06
     628:	88 23       	and	r24, r24
     62a:	51 f1       	breq	.+84     	; 0x680 <__fixsfsi+0x8a>
     62c:	2e c0       	rjmp	.+92     	; 0x68a <__fixsfsi+0x94>
     62e:	2f 81       	ldd	r18, Y+7	; 0x07
     630:	38 85       	ldd	r19, Y+8	; 0x08
     632:	37 fd       	sbrc	r19, 7
     634:	20 c0       	rjmp	.+64     	; 0x676 <__fixsfsi+0x80>
     636:	6e 81       	ldd	r22, Y+6	; 0x06
     638:	2f 31       	cpi	r18, 0x1F	; 31
     63a:	31 05       	cpc	r19, r1
     63c:	1c f0       	brlt	.+6      	; 0x644 <__fixsfsi+0x4e>
     63e:	66 23       	and	r22, r22
     640:	f9 f0       	breq	.+62     	; 0x680 <__fixsfsi+0x8a>
     642:	23 c0       	rjmp	.+70     	; 0x68a <__fixsfsi+0x94>
     644:	8e e1       	ldi	r24, 0x1E	; 30
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	82 1b       	sub	r24, r18
     64a:	93 0b       	sbc	r25, r19
     64c:	29 85       	ldd	r18, Y+9	; 0x09
     64e:	3a 85       	ldd	r19, Y+10	; 0x0a
     650:	4b 85       	ldd	r20, Y+11	; 0x0b
     652:	5c 85       	ldd	r21, Y+12	; 0x0c
     654:	04 c0       	rjmp	.+8      	; 0x65e <__fixsfsi+0x68>
     656:	56 95       	lsr	r21
     658:	47 95       	ror	r20
     65a:	37 95       	ror	r19
     65c:	27 95       	ror	r18
     65e:	8a 95       	dec	r24
     660:	d2 f7       	brpl	.-12     	; 0x656 <__fixsfsi+0x60>
     662:	66 23       	and	r22, r22
     664:	b1 f0       	breq	.+44     	; 0x692 <__fixsfsi+0x9c>
     666:	50 95       	com	r21
     668:	40 95       	com	r20
     66a:	30 95       	com	r19
     66c:	21 95       	neg	r18
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
     670:	4f 4f       	sbci	r20, 0xFF	; 255
     672:	5f 4f       	sbci	r21, 0xFF	; 255
     674:	0e c0       	rjmp	.+28     	; 0x692 <__fixsfsi+0x9c>
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	09 c0       	rjmp	.+18     	; 0x692 <__fixsfsi+0x9c>
     680:	2f ef       	ldi	r18, 0xFF	; 255
     682:	3f ef       	ldi	r19, 0xFF	; 255
     684:	4f ef       	ldi	r20, 0xFF	; 255
     686:	5f e7       	ldi	r21, 0x7F	; 127
     688:	04 c0       	rjmp	.+8      	; 0x692 <__fixsfsi+0x9c>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e0       	ldi	r20, 0x00	; 0
     690:	50 e8       	ldi	r21, 0x80	; 128
     692:	b9 01       	movw	r22, r18
     694:	ca 01       	movw	r24, r20
     696:	2c 96       	adiw	r28, 0x0c	; 12
     698:	e2 e0       	ldi	r30, 0x02	; 2
     69a:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__epilogue_restores__+0x20>

0000069e <__floatunsisf>:
     69e:	a8 e0       	ldi	r26, 0x08	; 8
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	e5 e5       	ldi	r30, 0x55	; 85
     6a4:	f3 e0       	ldi	r31, 0x03	; 3
     6a6:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__prologue_saves__+0x10>
     6aa:	7b 01       	movw	r14, r22
     6ac:	8c 01       	movw	r16, r24
     6ae:	61 15       	cp	r22, r1
     6b0:	71 05       	cpc	r23, r1
     6b2:	81 05       	cpc	r24, r1
     6b4:	91 05       	cpc	r25, r1
     6b6:	19 f4       	brne	.+6      	; 0x6be <__floatunsisf+0x20>
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	60 c0       	rjmp	.+192    	; 0x77e <__floatunsisf+0xe0>
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	8e e1       	ldi	r24, 0x1E	; 30
     6c4:	c8 2e       	mov	r12, r24
     6c6:	d1 2c       	mov	r13, r1
     6c8:	dc 82       	std	Y+4, r13	; 0x04
     6ca:	cb 82       	std	Y+3, r12	; 0x03
     6cc:	ed 82       	std	Y+5, r14	; 0x05
     6ce:	fe 82       	std	Y+6, r15	; 0x06
     6d0:	0f 83       	std	Y+7, r16	; 0x07
     6d2:	18 87       	std	Y+8, r17	; 0x08
     6d4:	c8 01       	movw	r24, r16
     6d6:	b7 01       	movw	r22, r14
     6d8:	0e 94 c8 03 	call	0x790	; 0x790 <__clzsi2>
     6dc:	fc 01       	movw	r30, r24
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	f7 ff       	sbrs	r31, 7
     6e2:	3b c0       	rjmp	.+118    	; 0x75a <__floatunsisf+0xbc>
     6e4:	22 27       	eor	r18, r18
     6e6:	33 27       	eor	r19, r19
     6e8:	2e 1b       	sub	r18, r30
     6ea:	3f 0b       	sbc	r19, r31
     6ec:	57 01       	movw	r10, r14
     6ee:	68 01       	movw	r12, r16
     6f0:	02 2e       	mov	r0, r18
     6f2:	04 c0       	rjmp	.+8      	; 0x6fc <__floatunsisf+0x5e>
     6f4:	d6 94       	lsr	r13
     6f6:	c7 94       	ror	r12
     6f8:	b7 94       	ror	r11
     6fa:	a7 94       	ror	r10
     6fc:	0a 94       	dec	r0
     6fe:	d2 f7       	brpl	.-12     	; 0x6f4 <__floatunsisf+0x56>
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a0 e0       	ldi	r26, 0x00	; 0
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	04 c0       	rjmp	.+8      	; 0x71a <__floatunsisf+0x7c>
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	aa 1f       	adc	r26, r26
     718:	bb 1f       	adc	r27, r27
     71a:	2a 95       	dec	r18
     71c:	d2 f7       	brpl	.-12     	; 0x712 <__floatunsisf+0x74>
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	a1 09       	sbc	r26, r1
     722:	b1 09       	sbc	r27, r1
     724:	8e 21       	and	r24, r14
     726:	9f 21       	and	r25, r15
     728:	a0 23       	and	r26, r16
     72a:	b1 23       	and	r27, r17
     72c:	00 97       	sbiw	r24, 0x00	; 0
     72e:	a1 05       	cpc	r26, r1
     730:	b1 05       	cpc	r27, r1
     732:	21 f0       	breq	.+8      	; 0x73c <__floatunsisf+0x9e>
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	4a 29       	or	r20, r10
     73e:	5b 29       	or	r21, r11
     740:	6c 29       	or	r22, r12
     742:	7d 29       	or	r23, r13
     744:	4d 83       	std	Y+5, r20	; 0x05
     746:	5e 83       	std	Y+6, r21	; 0x06
     748:	6f 83       	std	Y+7, r22	; 0x07
     74a:	78 87       	std	Y+8, r23	; 0x08
     74c:	8e e1       	ldi	r24, 0x1E	; 30
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	8e 1b       	sub	r24, r30
     752:	9f 0b       	sbc	r25, r31
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	8b 83       	std	Y+3, r24	; 0x03
     758:	12 c0       	rjmp	.+36     	; 0x77e <__floatunsisf+0xe0>
     75a:	30 97       	sbiw	r30, 0x00	; 0
     75c:	81 f0       	breq	.+32     	; 0x77e <__floatunsisf+0xe0>
     75e:	0e 2e       	mov	r0, r30
     760:	04 c0       	rjmp	.+8      	; 0x76a <__floatunsisf+0xcc>
     762:	ee 0c       	add	r14, r14
     764:	ff 1c       	adc	r15, r15
     766:	00 1f       	adc	r16, r16
     768:	11 1f       	adc	r17, r17
     76a:	0a 94       	dec	r0
     76c:	d2 f7       	brpl	.-12     	; 0x762 <__floatunsisf+0xc4>
     76e:	ed 82       	std	Y+5, r14	; 0x05
     770:	fe 82       	std	Y+6, r15	; 0x06
     772:	0f 83       	std	Y+7, r16	; 0x07
     774:	18 87       	std	Y+8, r17	; 0x08
     776:	ce 1a       	sub	r12, r30
     778:	df 0a       	sbc	r13, r31
     77a:	dc 82       	std	Y+4, r13	; 0x04
     77c:	cb 82       	std	Y+3, r12	; 0x03
     77e:	1a 82       	std	Y+2, r1	; 0x02
     780:	ce 01       	movw	r24, r28
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     788:	28 96       	adiw	r28, 0x08	; 8
     78a:	ea e0       	ldi	r30, 0x0A	; 10
     78c:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__epilogue_restores__+0x10>

00000790 <__clzsi2>:
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	7b 01       	movw	r14, r22
     79a:	8c 01       	movw	r16, r24
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	e8 16       	cp	r14, r24
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	f8 06       	cpc	r15, r24
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	08 07       	cpc	r16, r24
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	18 07       	cpc	r17, r24
     7ac:	88 f4       	brcc	.+34     	; 0x7d0 <__clzsi2+0x40>
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	e8 16       	cp	r14, r24
     7b2:	f1 04       	cpc	r15, r1
     7b4:	01 05       	cpc	r16, r1
     7b6:	11 05       	cpc	r17, r1
     7b8:	31 f0       	breq	.+12     	; 0x7c6 <__clzsi2+0x36>
     7ba:	28 f0       	brcs	.+10     	; 0x7c6 <__clzsi2+0x36>
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	a0 e0       	ldi	r26, 0x00	; 0
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	17 c0       	rjmp	.+46     	; 0x7f4 <__clzsi2+0x64>
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a0 e0       	ldi	r26, 0x00	; 0
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
     7ce:	12 c0       	rjmp	.+36     	; 0x7f4 <__clzsi2+0x64>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	e8 16       	cp	r14, r24
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	f8 06       	cpc	r15, r24
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	08 07       	cpc	r16, r24
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	18 07       	cpc	r17, r24
     7e0:	28 f0       	brcs	.+10     	; 0x7ec <__clzsi2+0x5c>
     7e2:	88 e1       	ldi	r24, 0x18	; 24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	a0 e0       	ldi	r26, 0x00	; 0
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__clzsi2+0x64>
     7ec:	80 e1       	ldi	r24, 0x10	; 16
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	a0 e0       	ldi	r26, 0x00	; 0
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	20 e2       	ldi	r18, 0x20	; 32
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	28 1b       	sub	r18, r24
     7fe:	39 0b       	sbc	r19, r25
     800:	4a 0b       	sbc	r20, r26
     802:	5b 0b       	sbc	r21, r27
     804:	04 c0       	rjmp	.+8      	; 0x80e <__clzsi2+0x7e>
     806:	16 95       	lsr	r17
     808:	07 95       	ror	r16
     80a:	f7 94       	ror	r15
     80c:	e7 94       	ror	r14
     80e:	8a 95       	dec	r24
     810:	d2 f7       	brpl	.-12     	; 0x806 <__clzsi2+0x76>
     812:	f7 01       	movw	r30, r14
     814:	e6 5d       	subi	r30, 0xD6	; 214
     816:	fe 4f       	sbci	r31, 0xFE	; 254
     818:	80 81       	ld	r24, Z
     81a:	28 1b       	sub	r18, r24
     81c:	31 09       	sbc	r19, r1
     81e:	41 09       	sbc	r20, r1
     820:	51 09       	sbc	r21, r1
     822:	c9 01       	movw	r24, r18
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	08 95       	ret

0000082e <__pack_f>:
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	fc 01       	movw	r30, r24
     83a:	e4 80       	ldd	r14, Z+4	; 0x04
     83c:	f5 80       	ldd	r15, Z+5	; 0x05
     83e:	06 81       	ldd	r16, Z+6	; 0x06
     840:	17 81       	ldd	r17, Z+7	; 0x07
     842:	d1 80       	ldd	r13, Z+1	; 0x01
     844:	80 81       	ld	r24, Z
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	48 f4       	brcc	.+18     	; 0x85c <__pack_f+0x2e>
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	a0 e1       	ldi	r26, 0x10	; 16
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	e8 2a       	or	r14, r24
     854:	f9 2a       	or	r15, r25
     856:	0a 2b       	or	r16, r26
     858:	1b 2b       	or	r17, r27
     85a:	a5 c0       	rjmp	.+330    	; 0x9a6 <__pack_f+0x178>
     85c:	84 30       	cpi	r24, 0x04	; 4
     85e:	09 f4       	brne	.+2      	; 0x862 <__pack_f+0x34>
     860:	9f c0       	rjmp	.+318    	; 0x9a0 <__pack_f+0x172>
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	21 f4       	brne	.+8      	; 0x86e <__pack_f+0x40>
     866:	ee 24       	eor	r14, r14
     868:	ff 24       	eor	r15, r15
     86a:	87 01       	movw	r16, r14
     86c:	05 c0       	rjmp	.+10     	; 0x878 <__pack_f+0x4a>
     86e:	e1 14       	cp	r14, r1
     870:	f1 04       	cpc	r15, r1
     872:	01 05       	cpc	r16, r1
     874:	11 05       	cpc	r17, r1
     876:	19 f4       	brne	.+6      	; 0x87e <__pack_f+0x50>
     878:	e0 e0       	ldi	r30, 0x00	; 0
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	96 c0       	rjmp	.+300    	; 0x9aa <__pack_f+0x17c>
     87e:	62 81       	ldd	r22, Z+2	; 0x02
     880:	73 81       	ldd	r23, Z+3	; 0x03
     882:	9f ef       	ldi	r25, 0xFF	; 255
     884:	62 38       	cpi	r22, 0x82	; 130
     886:	79 07       	cpc	r23, r25
     888:	0c f0       	brlt	.+2      	; 0x88c <__pack_f+0x5e>
     88a:	5b c0       	rjmp	.+182    	; 0x942 <__pack_f+0x114>
     88c:	22 e8       	ldi	r18, 0x82	; 130
     88e:	3f ef       	ldi	r19, 0xFF	; 255
     890:	26 1b       	sub	r18, r22
     892:	37 0b       	sbc	r19, r23
     894:	2a 31       	cpi	r18, 0x1A	; 26
     896:	31 05       	cpc	r19, r1
     898:	2c f0       	brlt	.+10     	; 0x8a4 <__pack_f+0x76>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	2a c0       	rjmp	.+84     	; 0x8f8 <__pack_f+0xca>
     8a4:	b8 01       	movw	r22, r16
     8a6:	a7 01       	movw	r20, r14
     8a8:	02 2e       	mov	r0, r18
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__pack_f+0x86>
     8ac:	76 95       	lsr	r23
     8ae:	67 95       	ror	r22
     8b0:	57 95       	ror	r21
     8b2:	47 95       	ror	r20
     8b4:	0a 94       	dec	r0
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <__pack_f+0x7e>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	04 c0       	rjmp	.+8      	; 0x8ca <__pack_f+0x9c>
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	aa 1f       	adc	r26, r26
     8c8:	bb 1f       	adc	r27, r27
     8ca:	2a 95       	dec	r18
     8cc:	d2 f7       	brpl	.-12     	; 0x8c2 <__pack_f+0x94>
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	a1 09       	sbc	r26, r1
     8d2:	b1 09       	sbc	r27, r1
     8d4:	8e 21       	and	r24, r14
     8d6:	9f 21       	and	r25, r15
     8d8:	a0 23       	and	r26, r16
     8da:	b1 23       	and	r27, r17
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	a1 05       	cpc	r26, r1
     8e0:	b1 05       	cpc	r27, r1
     8e2:	21 f0       	breq	.+8      	; 0x8ec <__pack_f+0xbe>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	a0 e0       	ldi	r26, 0x00	; 0
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	9a 01       	movw	r18, r20
     8ee:	ab 01       	movw	r20, r22
     8f0:	28 2b       	or	r18, r24
     8f2:	39 2b       	or	r19, r25
     8f4:	4a 2b       	or	r20, r26
     8f6:	5b 2b       	or	r21, r27
     8f8:	da 01       	movw	r26, r20
     8fa:	c9 01       	movw	r24, r18
     8fc:	8f 77       	andi	r24, 0x7F	; 127
     8fe:	90 70       	andi	r25, 0x00	; 0
     900:	a0 70       	andi	r26, 0x00	; 0
     902:	b0 70       	andi	r27, 0x00	; 0
     904:	80 34       	cpi	r24, 0x40	; 64
     906:	91 05       	cpc	r25, r1
     908:	a1 05       	cpc	r26, r1
     90a:	b1 05       	cpc	r27, r1
     90c:	39 f4       	brne	.+14     	; 0x91c <__pack_f+0xee>
     90e:	27 ff       	sbrs	r18, 7
     910:	09 c0       	rjmp	.+18     	; 0x924 <__pack_f+0xf6>
     912:	20 5c       	subi	r18, 0xC0	; 192
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	4f 4f       	sbci	r20, 0xFF	; 255
     918:	5f 4f       	sbci	r21, 0xFF	; 255
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__pack_f+0xf6>
     91c:	21 5c       	subi	r18, 0xC1	; 193
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	e0 e0       	ldi	r30, 0x00	; 0
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	20 30       	cpi	r18, 0x00	; 0
     92a:	a0 e0       	ldi	r26, 0x00	; 0
     92c:	3a 07       	cpc	r19, r26
     92e:	a0 e0       	ldi	r26, 0x00	; 0
     930:	4a 07       	cpc	r20, r26
     932:	a0 e4       	ldi	r26, 0x40	; 64
     934:	5a 07       	cpc	r21, r26
     936:	10 f0       	brcs	.+4      	; 0x93c <__pack_f+0x10e>
     938:	e1 e0       	ldi	r30, 0x01	; 1
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	79 01       	movw	r14, r18
     93e:	8a 01       	movw	r16, r20
     940:	27 c0       	rjmp	.+78     	; 0x990 <__pack_f+0x162>
     942:	60 38       	cpi	r22, 0x80	; 128
     944:	71 05       	cpc	r23, r1
     946:	64 f5       	brge	.+88     	; 0x9a0 <__pack_f+0x172>
     948:	fb 01       	movw	r30, r22
     94a:	e1 58       	subi	r30, 0x81	; 129
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	d8 01       	movw	r26, r16
     950:	c7 01       	movw	r24, r14
     952:	8f 77       	andi	r24, 0x7F	; 127
     954:	90 70       	andi	r25, 0x00	; 0
     956:	a0 70       	andi	r26, 0x00	; 0
     958:	b0 70       	andi	r27, 0x00	; 0
     95a:	80 34       	cpi	r24, 0x40	; 64
     95c:	91 05       	cpc	r25, r1
     95e:	a1 05       	cpc	r26, r1
     960:	b1 05       	cpc	r27, r1
     962:	39 f4       	brne	.+14     	; 0x972 <__pack_f+0x144>
     964:	e7 fe       	sbrs	r14, 7
     966:	0d c0       	rjmp	.+26     	; 0x982 <__pack_f+0x154>
     968:	80 e4       	ldi	r24, 0x40	; 64
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <__pack_f+0x14c>
     972:	8f e3       	ldi	r24, 0x3F	; 63
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	e8 0e       	add	r14, r24
     97c:	f9 1e       	adc	r15, r25
     97e:	0a 1f       	adc	r16, r26
     980:	1b 1f       	adc	r17, r27
     982:	17 ff       	sbrs	r17, 7
     984:	05 c0       	rjmp	.+10     	; 0x990 <__pack_f+0x162>
     986:	16 95       	lsr	r17
     988:	07 95       	ror	r16
     98a:	f7 94       	ror	r15
     98c:	e7 94       	ror	r14
     98e:	31 96       	adiw	r30, 0x01	; 1
     990:	87 e0       	ldi	r24, 0x07	; 7
     992:	16 95       	lsr	r17
     994:	07 95       	ror	r16
     996:	f7 94       	ror	r15
     998:	e7 94       	ror	r14
     99a:	8a 95       	dec	r24
     99c:	d1 f7       	brne	.-12     	; 0x992 <__pack_f+0x164>
     99e:	05 c0       	rjmp	.+10     	; 0x9aa <__pack_f+0x17c>
     9a0:	ee 24       	eor	r14, r14
     9a2:	ff 24       	eor	r15, r15
     9a4:	87 01       	movw	r16, r14
     9a6:	ef ef       	ldi	r30, 0xFF	; 255
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	6e 2f       	mov	r22, r30
     9ac:	67 95       	ror	r22
     9ae:	66 27       	eor	r22, r22
     9b0:	67 95       	ror	r22
     9b2:	90 2f       	mov	r25, r16
     9b4:	9f 77       	andi	r25, 0x7F	; 127
     9b6:	d7 94       	ror	r13
     9b8:	dd 24       	eor	r13, r13
     9ba:	d7 94       	ror	r13
     9bc:	8e 2f       	mov	r24, r30
     9be:	86 95       	lsr	r24
     9c0:	49 2f       	mov	r20, r25
     9c2:	46 2b       	or	r20, r22
     9c4:	58 2f       	mov	r21, r24
     9c6:	5d 29       	or	r21, r13
     9c8:	b7 01       	movw	r22, r14
     9ca:	ca 01       	movw	r24, r20
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	08 95       	ret

000009d8 <__unpack_f>:
     9d8:	fc 01       	movw	r30, r24
     9da:	db 01       	movw	r26, r22
     9dc:	40 81       	ld	r20, Z
     9de:	51 81       	ldd	r21, Z+1	; 0x01
     9e0:	22 81       	ldd	r18, Z+2	; 0x02
     9e2:	62 2f       	mov	r22, r18
     9e4:	6f 77       	andi	r22, 0x7F	; 127
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	22 1f       	adc	r18, r18
     9ea:	22 27       	eor	r18, r18
     9ec:	22 1f       	adc	r18, r18
     9ee:	93 81       	ldd	r25, Z+3	; 0x03
     9f0:	89 2f       	mov	r24, r25
     9f2:	88 0f       	add	r24, r24
     9f4:	82 2b       	or	r24, r18
     9f6:	28 2f       	mov	r18, r24
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	99 1f       	adc	r25, r25
     9fc:	99 27       	eor	r25, r25
     9fe:	99 1f       	adc	r25, r25
     a00:	11 96       	adiw	r26, 0x01	; 1
     a02:	9c 93       	st	X, r25
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	21 15       	cp	r18, r1
     a08:	31 05       	cpc	r19, r1
     a0a:	a9 f5       	brne	.+106    	; 0xa76 <__unpack_f+0x9e>
     a0c:	41 15       	cp	r20, r1
     a0e:	51 05       	cpc	r21, r1
     a10:	61 05       	cpc	r22, r1
     a12:	71 05       	cpc	r23, r1
     a14:	11 f4       	brne	.+4      	; 0xa1a <__unpack_f+0x42>
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	37 c0       	rjmp	.+110    	; 0xa88 <__unpack_f+0xb0>
     a1a:	82 e8       	ldi	r24, 0x82	; 130
     a1c:	9f ef       	ldi	r25, 0xFF	; 255
     a1e:	13 96       	adiw	r26, 0x03	; 3
     a20:	9c 93       	st	X, r25
     a22:	8e 93       	st	-X, r24
     a24:	12 97       	sbiw	r26, 0x02	; 2
     a26:	9a 01       	movw	r18, r20
     a28:	ab 01       	movw	r20, r22
     a2a:	67 e0       	ldi	r22, 0x07	; 7
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	44 1f       	adc	r20, r20
     a32:	55 1f       	adc	r21, r21
     a34:	6a 95       	dec	r22
     a36:	d1 f7       	brne	.-12     	; 0xa2c <__unpack_f+0x54>
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	8c 93       	st	X, r24
     a3c:	0d c0       	rjmp	.+26     	; 0xa58 <__unpack_f+0x80>
     a3e:	22 0f       	add	r18, r18
     a40:	33 1f       	adc	r19, r19
     a42:	44 1f       	adc	r20, r20
     a44:	55 1f       	adc	r21, r21
     a46:	12 96       	adiw	r26, 0x02	; 2
     a48:	8d 91       	ld	r24, X+
     a4a:	9c 91       	ld	r25, X
     a4c:	13 97       	sbiw	r26, 0x03	; 3
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	13 96       	adiw	r26, 0x03	; 3
     a52:	9c 93       	st	X, r25
     a54:	8e 93       	st	-X, r24
     a56:	12 97       	sbiw	r26, 0x02	; 2
     a58:	20 30       	cpi	r18, 0x00	; 0
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	38 07       	cpc	r19, r24
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	48 07       	cpc	r20, r24
     a62:	80 e4       	ldi	r24, 0x40	; 64
     a64:	58 07       	cpc	r21, r24
     a66:	58 f3       	brcs	.-42     	; 0xa3e <__unpack_f+0x66>
     a68:	14 96       	adiw	r26, 0x04	; 4
     a6a:	2d 93       	st	X+, r18
     a6c:	3d 93       	st	X+, r19
     a6e:	4d 93       	st	X+, r20
     a70:	5c 93       	st	X, r21
     a72:	17 97       	sbiw	r26, 0x07	; 7
     a74:	08 95       	ret
     a76:	2f 3f       	cpi	r18, 0xFF	; 255
     a78:	31 05       	cpc	r19, r1
     a7a:	79 f4       	brne	.+30     	; 0xa9a <__unpack_f+0xc2>
     a7c:	41 15       	cp	r20, r1
     a7e:	51 05       	cpc	r21, r1
     a80:	61 05       	cpc	r22, r1
     a82:	71 05       	cpc	r23, r1
     a84:	19 f4       	brne	.+6      	; 0xa8c <__unpack_f+0xb4>
     a86:	84 e0       	ldi	r24, 0x04	; 4
     a88:	8c 93       	st	X, r24
     a8a:	08 95       	ret
     a8c:	64 ff       	sbrs	r22, 4
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <__unpack_f+0xbe>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	8c 93       	st	X, r24
     a94:	12 c0       	rjmp	.+36     	; 0xaba <__unpack_f+0xe2>
     a96:	1c 92       	st	X, r1
     a98:	10 c0       	rjmp	.+32     	; 0xaba <__unpack_f+0xe2>
     a9a:	2f 57       	subi	r18, 0x7F	; 127
     a9c:	30 40       	sbci	r19, 0x00	; 0
     a9e:	13 96       	adiw	r26, 0x03	; 3
     aa0:	3c 93       	st	X, r19
     aa2:	2e 93       	st	-X, r18
     aa4:	12 97       	sbiw	r26, 0x02	; 2
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	8c 93       	st	X, r24
     aaa:	87 e0       	ldi	r24, 0x07	; 7
     aac:	44 0f       	add	r20, r20
     aae:	55 1f       	adc	r21, r21
     ab0:	66 1f       	adc	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	8a 95       	dec	r24
     ab6:	d1 f7       	brne	.-12     	; 0xaac <__unpack_f+0xd4>
     ab8:	70 64       	ori	r23, 0x40	; 64
     aba:	14 96       	adiw	r26, 0x04	; 4
     abc:	4d 93       	st	X+, r20
     abe:	5d 93       	st	X+, r21
     ac0:	6d 93       	st	X+, r22
     ac2:	7c 93       	st	X, r23
     ac4:	17 97       	sbiw	r26, 0x07	; 7
     ac6:	08 95       	ret

00000ac8 <__fpcmp_parts_f>:
     ac8:	1f 93       	push	r17
     aca:	dc 01       	movw	r26, r24
     acc:	fb 01       	movw	r30, r22
     ace:	9c 91       	ld	r25, X
     ad0:	92 30       	cpi	r25, 0x02	; 2
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <__fpcmp_parts_f+0xe>
     ad4:	47 c0       	rjmp	.+142    	; 0xb64 <__fpcmp_parts_f+0x9c>
     ad6:	80 81       	ld	r24, Z
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	08 f4       	brcc	.+2      	; 0xade <__fpcmp_parts_f+0x16>
     adc:	43 c0       	rjmp	.+134    	; 0xb64 <__fpcmp_parts_f+0x9c>
     ade:	94 30       	cpi	r25, 0x04	; 4
     ae0:	51 f4       	brne	.+20     	; 0xaf6 <__fpcmp_parts_f+0x2e>
     ae2:	11 96       	adiw	r26, 0x01	; 1
     ae4:	1c 91       	ld	r17, X
     ae6:	84 30       	cpi	r24, 0x04	; 4
     ae8:	99 f5       	brne	.+102    	; 0xb50 <__fpcmp_parts_f+0x88>
     aea:	81 81       	ldd	r24, Z+1	; 0x01
     aec:	68 2f       	mov	r22, r24
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	61 1b       	sub	r22, r17
     af2:	71 09       	sbc	r23, r1
     af4:	3f c0       	rjmp	.+126    	; 0xb74 <__fpcmp_parts_f+0xac>
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	21 f0       	breq	.+8      	; 0xb02 <__fpcmp_parts_f+0x3a>
     afa:	92 30       	cpi	r25, 0x02	; 2
     afc:	31 f4       	brne	.+12     	; 0xb0a <__fpcmp_parts_f+0x42>
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	b9 f1       	breq	.+110    	; 0xb70 <__fpcmp_parts_f+0xa8>
     b02:	81 81       	ldd	r24, Z+1	; 0x01
     b04:	88 23       	and	r24, r24
     b06:	89 f1       	breq	.+98     	; 0xb6a <__fpcmp_parts_f+0xa2>
     b08:	2d c0       	rjmp	.+90     	; 0xb64 <__fpcmp_parts_f+0x9c>
     b0a:	11 96       	adiw	r26, 0x01	; 1
     b0c:	1c 91       	ld	r17, X
     b0e:	11 97       	sbiw	r26, 0x01	; 1
     b10:	82 30       	cpi	r24, 0x02	; 2
     b12:	f1 f0       	breq	.+60     	; 0xb50 <__fpcmp_parts_f+0x88>
     b14:	81 81       	ldd	r24, Z+1	; 0x01
     b16:	18 17       	cp	r17, r24
     b18:	d9 f4       	brne	.+54     	; 0xb50 <__fpcmp_parts_f+0x88>
     b1a:	12 96       	adiw	r26, 0x02	; 2
     b1c:	2d 91       	ld	r18, X+
     b1e:	3c 91       	ld	r19, X
     b20:	13 97       	sbiw	r26, 0x03	; 3
     b22:	82 81       	ldd	r24, Z+2	; 0x02
     b24:	93 81       	ldd	r25, Z+3	; 0x03
     b26:	82 17       	cp	r24, r18
     b28:	93 07       	cpc	r25, r19
     b2a:	94 f0       	brlt	.+36     	; 0xb50 <__fpcmp_parts_f+0x88>
     b2c:	28 17       	cp	r18, r24
     b2e:	39 07       	cpc	r19, r25
     b30:	bc f0       	brlt	.+46     	; 0xb60 <__fpcmp_parts_f+0x98>
     b32:	14 96       	adiw	r26, 0x04	; 4
     b34:	8d 91       	ld	r24, X+
     b36:	9d 91       	ld	r25, X+
     b38:	0d 90       	ld	r0, X+
     b3a:	bc 91       	ld	r27, X
     b3c:	a0 2d       	mov	r26, r0
     b3e:	24 81       	ldd	r18, Z+4	; 0x04
     b40:	35 81       	ldd	r19, Z+5	; 0x05
     b42:	46 81       	ldd	r20, Z+6	; 0x06
     b44:	57 81       	ldd	r21, Z+7	; 0x07
     b46:	28 17       	cp	r18, r24
     b48:	39 07       	cpc	r19, r25
     b4a:	4a 07       	cpc	r20, r26
     b4c:	5b 07       	cpc	r21, r27
     b4e:	18 f4       	brcc	.+6      	; 0xb56 <__fpcmp_parts_f+0x8e>
     b50:	11 23       	and	r17, r17
     b52:	41 f0       	breq	.+16     	; 0xb64 <__fpcmp_parts_f+0x9c>
     b54:	0a c0       	rjmp	.+20     	; 0xb6a <__fpcmp_parts_f+0xa2>
     b56:	82 17       	cp	r24, r18
     b58:	93 07       	cpc	r25, r19
     b5a:	a4 07       	cpc	r26, r20
     b5c:	b5 07       	cpc	r27, r21
     b5e:	40 f4       	brcc	.+16     	; 0xb70 <__fpcmp_parts_f+0xa8>
     b60:	11 23       	and	r17, r17
     b62:	19 f0       	breq	.+6      	; 0xb6a <__fpcmp_parts_f+0xa2>
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <__fpcmp_parts_f+0xac>
     b6a:	6f ef       	ldi	r22, 0xFF	; 255
     b6c:	7f ef       	ldi	r23, 0xFF	; 255
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <__fpcmp_parts_f+0xac>
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	cb 01       	movw	r24, r22
     b76:	1f 91       	pop	r17
     b78:	08 95       	ret

00000b7a <UART_init>:

volatile uint8 recieved_data ;
volatile void(*g_callback)(void) = NULL;


void UART_init(uartConfig_t * uartConfig){
     b7a:	1f 93       	push	r17
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	ec 01       	movw	r28, r24

	uint16 baudrate_reg = 0;
	if(uartConfig->mode == asynchronous){
     b82:	18 81       	ld	r17, Y
     b84:	11 23       	and	r17, r17
     b86:	09 f4       	brne	.+2      	; 0xb8a <UART_init+0x10>
     b88:	3f c0       	rjmp	.+126    	; 0xc08 <UART_init+0x8e>
		baudrate_reg = ((F_CPU / (16UL * (uartConfig->baudrate))) - 1);
	}
	else if(uartConfig->mode == synchronous){
     b8a:	11 30       	cpi	r17, 0x01	; 1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <UART_init+0x16>
     b8e:	5a c0       	rjmp	.+180    	; 0xc44 <UART_init+0xca>
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	20 e0       	ldi	r18, 0x00	; 0
		baudrate_reg = (uint16)((F_CPU / (2.0 * uartConfig->baudrate)) - 1);
	}

	_UCSRB._TXEN = 1;	/*Receiver enabled*/
     b94:	53 9a       	sbi	0x0a, 3	; 10
	_UCSRB._RXEN = 1;	/*transmitter enabled*/
     b96:	54 9a       	sbi	0x0a, 4	; 10

	_UCSRB._UCSZ2 = 0;	/*Character size will not be 9*/
     b98:	52 98       	cbi	0x0a, 2	; 10

	_UCSRC._URSEL 	= 1;						/*this bit set to one to allow accessing to UCSRC */
     b9a:	80 b5       	in	r24, 0x20	; 32
     b9c:	80 64       	ori	r24, 0x40	; 64
     b9e:	80 bd       	out	0x20, r24	; 32
	_UCSRC._UMSEL 	= uartConfig->mode ;		/*configure the mode of UART*/
     ba0:	11 70       	andi	r17, 0x01	; 1
     ba2:	12 95       	swap	r17
     ba4:	11 0f       	add	r17, r17
     ba6:	10 7e       	andi	r17, 0xE0	; 224
     ba8:	80 b5       	in	r24, 0x20	; 32
     baa:	8f 7d       	andi	r24, 0xDF	; 223
     bac:	81 2b       	or	r24, r17
     bae:	80 bd       	out	0x20, r24	; 32
	_UCSRC._UPM 	= uartConfig->parity ;		/*configure the parity bits type */
     bb0:	99 81       	ldd	r25, Y+1	; 0x01
     bb2:	93 70       	andi	r25, 0x03	; 3
     bb4:	99 0f       	add	r25, r25
     bb6:	99 0f       	add	r25, r25
     bb8:	99 0f       	add	r25, r25
     bba:	80 b5       	in	r24, 0x20	; 32
     bbc:	87 7e       	andi	r24, 0xE7	; 231
     bbe:	89 2b       	or	r24, r25
     bc0:	80 bd       	out	0x20, r24	; 32
	_UCSRC._USBS 	= uartConfig->stop_num;		/*configure the number of stop bits*/
     bc2:	9a 81       	ldd	r25, Y+2	; 0x02
     bc4:	91 70       	andi	r25, 0x01	; 1
     bc6:	99 0f       	add	r25, r25
     bc8:	99 0f       	add	r25, r25
     bca:	80 b5       	in	r24, 0x20	; 32
     bcc:	8b 7f       	andi	r24, 0xFB	; 251
     bce:	89 2b       	or	r24, r25
     bd0:	80 bd       	out	0x20, r24	; 32
	_UCSRC._UCSZ1_0 = uartConfig->char_size;	/*configure the character size*/
     bd2:	9b 81       	ldd	r25, Y+3	; 0x03
     bd4:	91 70       	andi	r25, 0x01	; 1
     bd6:	99 0f       	add	r25, r25
     bd8:	80 b5       	in	r24, 0x20	; 32
     bda:	8d 7f       	andi	r24, 0xFD	; 253
     bdc:	89 2b       	or	r24, r25
     bde:	80 bd       	out	0x20, r24	; 32
	_UCSRC._UCPOL 	= uartConfig->polarity ;	/*configure the polarity*/
     be0:	9c 81       	ldd	r25, Y+4	; 0x04
     be2:	91 70       	andi	r25, 0x01	; 1
     be4:	80 b5       	in	r24, 0x20	; 32
     be6:	8e 7f       	andi	r24, 0xFE	; 254
     be8:	89 2b       	or	r24, r25
     bea:	80 bd       	out	0x20, r24	; 32

	_UCSRB._RXCIE 	= 1;	/*enable receiving interrupt*/
     bec:	57 9a       	sbi	0x0a, 7	; 10

	_UCSRC._URSEL = 0;								/*this bit set to zero to allow accessing to UBRR */
     bee:	80 b5       	in	r24, 0x20	; 32
     bf0:	8f 7b       	andi	r24, 0xBF	; 191
     bf2:	80 bd       	out	0x20, r24	; 32
	_UBRRH._UBRR = (uint8)((baudrate_reg) >> 8);	/*configure the most 4 bits of UBRR*/
     bf4:	3f 70       	andi	r19, 0x0F	; 15
     bf6:	80 b5       	in	r24, 0x20	; 32
     bf8:	80 7f       	andi	r24, 0xF0	; 240
     bfa:	83 2b       	or	r24, r19
     bfc:	80 bd       	out	0x20, r24	; 32
	_UBRRL = baudrate_reg;					/*configure the least 8 bits of UBRR register*/
     bfe:	29 b9       	out	0x09, r18	; 9


}
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	08 95       	ret

void UART_init(uartConfig_t * uartConfig){

	uint16 baudrate_reg = 0;
	if(uartConfig->mode == asynchronous){
		baudrate_reg = ((F_CPU / (16UL * (uartConfig->baudrate))) - 1);
     c08:	2d 81       	ldd	r18, Y+5	; 0x05
     c0a:	3e 81       	ldd	r19, Y+6	; 0x06
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	22 0f       	add	r18, r18
     c12:	33 1f       	adc	r19, r19
     c14:	44 1f       	adc	r20, r20
     c16:	55 1f       	adc	r21, r21
     c18:	22 0f       	add	r18, r18
     c1a:	33 1f       	adc	r19, r19
     c1c:	44 1f       	adc	r20, r20
     c1e:	55 1f       	adc	r21, r21
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	22 0f       	add	r18, r18
     c2a:	33 1f       	adc	r19, r19
     c2c:	44 1f       	adc	r20, r20
     c2e:	55 1f       	adc	r21, r21
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	72 e1       	ldi	r23, 0x12	; 18
     c34:	8a e7       	ldi	r24, 0x7A	; 122
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__udivmodsi4>
     c3c:	21 50       	subi	r18, 0x01	; 1
     c3e:	30 40       	sbci	r19, 0x00	; 0
     c40:	3f 70       	andi	r19, 0x0F	; 15
     c42:	a8 cf       	rjmp	.-176    	; 0xb94 <UART_init+0x1a>
	}
	else if(uartConfig->mode == synchronous){
		baudrate_reg = (uint16)((F_CPU / (2.0 * uartConfig->baudrate)) - 1);
     c44:	6d 81       	ldd	r22, Y+5	; 0x05
     c46:	7e 81       	ldd	r23, Y+6	; 0x06
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 4f 03 	call	0x69e	; 0x69e <__floatunsisf>
     c50:	9b 01       	movw	r18, r22
     c52:	ac 01       	movw	r20, r24
     c54:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     c58:	9b 01       	movw	r18, r22
     c5a:	ac 01       	movw	r20, r24
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	74 e2       	ldi	r23, 0x24	; 36
     c60:	84 ef       	ldi	r24, 0xF4	; 244
     c62:	9a e4       	ldi	r25, 0x4A	; 74
     c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e8       	ldi	r20, 0x80	; 128
     c6e:	5f e3       	ldi	r21, 0x3F	; 63
     c70:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c78:	37 2f       	mov	r19, r23
     c7a:	3f 70       	andi	r19, 0x0F	; 15
     c7c:	26 2f       	mov	r18, r22
     c7e:	8a cf       	rjmp	.-236    	; 0xb94 <UART_init+0x1a>

00000c80 <UART_transmit>:


}
void UART_transmit(uint8 data){
//	while(!_UCSRA._UDRE);	/*wait until the the register is empty*/
	while(BIT_IS_CLEAR(UCSRA , UDRE)) ;
     c80:	5d 9b       	sbis	0x0b, 5	; 11
     c82:	fe cf       	rjmp	.-4      	; 0xc80 <UART_transmit>
	_UDR = data;			/*send the data*/
     c84:	8c b9       	out	0x0c, r24	; 12
}
     c86:	08 95       	ret

00000c88 <UART_receive>:
uint8 UART_receive(void){
	while(!_UCSRA._RXC);	/*wait until the receiving operation completes*/
     c88:	5f 9b       	sbis	0x0b, 7	; 11
     c8a:	fe cf       	rjmp	.-4      	; 0xc88 <UART_receive>
	return _UDR;			/*return the received data*/
     c8c:	8c b1       	in	r24, 0x0c	; 12
}
     c8e:	08 95       	ret

00000c90 <UART_transmitString>:


void UART_transmitString(uint8* data , uint8 size){
     c90:	48 2f       	mov	r20, r24
	uint8 i = 0;
	while(i<size){
     c92:	66 23       	and	r22, r22
     c94:	59 f0       	breq	.+22     	; 0xcac <UART_transmitString+0x1c>
     c96:	9c 01       	movw	r18, r24
     c98:	f9 01       	movw	r30, r18
		UART_transmit(data[i]);
     c9a:	80 81       	ld	r24, Z


}
void UART_transmit(uint8 data){
//	while(!_UCSRA._UDRE);	/*wait until the the register is empty*/
	while(BIT_IS_CLEAR(UCSRA , UDRE)) ;
     c9c:	5d 9b       	sbis	0x0b, 5	; 11
     c9e:	fe cf       	rjmp	.-4      	; 0xc9c <UART_transmitString+0xc>
	_UDR = data;			/*send the data*/
     ca0:	8c b9       	out	0x0c, r24	; 12
     ca2:	31 96       	adiw	r30, 0x01	; 1
}


void UART_transmitString(uint8* data , uint8 size){
	uint8 i = 0;
	while(i<size){
     ca4:	8e 2f       	mov	r24, r30
     ca6:	84 1b       	sub	r24, r20
     ca8:	86 17       	cp	r24, r22
     caa:	b8 f3       	brcs	.-18     	; 0xc9a <UART_transmitString+0xa>
     cac:	08 95       	ret

00000cae <UART_receiveString>:
		UART_transmit(data[i]);
		i++;
	}
}
void UART_receiveString(uint8 * rec_data , uint8 size){
     cae:	48 2f       	mov	r20, r24
	uint8 i = 0;
	while(i<size){
     cb0:	66 23       	and	r22, r22
     cb2:	51 f0       	breq	.+20     	; 0xcc8 <UART_receiveString+0x1a>
     cb4:	9c 01       	movw	r18, r24
     cb6:	f9 01       	movw	r30, r18
//	while(!_UCSRA._UDRE);	/*wait until the the register is empty*/
	while(BIT_IS_CLEAR(UCSRA , UDRE)) ;
	_UDR = data;			/*send the data*/
}
uint8 UART_receive(void){
	while(!_UCSRA._RXC);	/*wait until the receiving operation completes*/
     cb8:	5f 9b       	sbis	0x0b, 7	; 11
     cba:	fe cf       	rjmp	.-4      	; 0xcb8 <UART_receiveString+0xa>
	return _UDR;			/*return the received data*/
     cbc:	8c b1       	in	r24, 0x0c	; 12
	}
}
void UART_receiveString(uint8 * rec_data , uint8 size){
	uint8 i = 0;
	while(i<size){
		rec_data[i] = UART_receive();
     cbe:	81 93       	st	Z+, r24
		i++;
	}
}
void UART_receiveString(uint8 * rec_data , uint8 size){
	uint8 i = 0;
	while(i<size){
     cc0:	8e 2f       	mov	r24, r30
     cc2:	84 1b       	sub	r24, r20
     cc4:	86 17       	cp	r24, r22
     cc6:	c0 f3       	brcs	.-16     	; 0xcb8 <UART_receiveString+0xa>
     cc8:	08 95       	ret

00000cca <UART_setcallback>:
		i++;
	}
}

void UART_setcallback(void (*a_callback)(void)){
	g_callback = (volatile void *)a_callback;
     cca:	90 93 61 02 	sts	0x0261, r25
     cce:	80 93 60 02 	sts	0x0260, r24
}
     cd2:	08 95       	ret

00000cd4 <__vector_11>:

ISR(USART_RXC_vect){
     cd4:	1f 92       	push	r1
     cd6:	0f 92       	push	r0
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	0f 92       	push	r0
     cdc:	11 24       	eor	r1, r1
     cde:	2f 93       	push	r18
     ce0:	3f 93       	push	r19
     ce2:	4f 93       	push	r20
     ce4:	5f 93       	push	r21
     ce6:	6f 93       	push	r22
     ce8:	7f 93       	push	r23
     cea:	8f 93       	push	r24
     cec:	9f 93       	push	r25
     cee:	af 93       	push	r26
     cf0:	bf 93       	push	r27
     cf2:	ef 93       	push	r30
     cf4:	ff 93       	push	r31
	recieved_data = _UDR;
     cf6:	8c b1       	in	r24, 0x0c	; 12
     cf8:	80 93 7a 02 	sts	0x027A, r24
	if(g_callback != NULL){
     cfc:	e0 91 60 02 	lds	r30, 0x0260
     d00:	f0 91 61 02 	lds	r31, 0x0261
     d04:	30 97       	sbiw	r30, 0x00	; 0
     d06:	09 f0       	breq	.+2      	; 0xd0a <__vector_11+0x36>
		(*g_callback)();
     d08:	09 95       	icall
	}
}
     d0a:	ff 91       	pop	r31
     d0c:	ef 91       	pop	r30
     d0e:	bf 91       	pop	r27
     d10:	af 91       	pop	r26
     d12:	9f 91       	pop	r25
     d14:	8f 91       	pop	r24
     d16:	7f 91       	pop	r23
     d18:	6f 91       	pop	r22
     d1a:	5f 91       	pop	r21
     d1c:	4f 91       	pop	r20
     d1e:	3f 91       	pop	r19
     d20:	2f 91       	pop	r18
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti

00000d2c <TIMER_start>:
 * Description : this function responsible to configure the timer with it's prescaler , call back function
 * 					timer mode either compare or overflow and the compare value in case of compare mode
 * 					compare value dosent matter in case of ovdrflow mode
 * ---------------------------------------------------------------------------------------------------------------------*/

void TIMER_start(const timerConfig_t * timerConfig){
     d2c:	fc 01       	movw	r30, r24
	switch(timerConfig->timerNUM){
     d2e:	80 81       	ld	r24, Z
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	09 f4       	brne	.+2      	; 0xd36 <TIMER_start+0xa>
     d34:	44 c0       	rjmp	.+136    	; 0xdbe <TIMER_start+0x92>
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	58 f5       	brcc	.+86     	; 0xd90 <TIMER_start+0x64>
	/*-------------------------------------------------------------------------------------------------------------------
	 * 											timer 0 configuration
	 * -----------------------------------------------------------------------------------------------------------------*/
	case timer0:
		_TCCR0._FOC0 = 1;						/*this bit is set at non PWM mode*/
     d3a:	83 b7       	in	r24, 0x33	; 51
     d3c:	80 68       	ori	r24, 0x80	; 128
     d3e:	83 bf       	out	0x33, r24	; 51
		_TCCR0._COM0 = 0;						/*disable output compare pin */
     d40:	83 b7       	in	r24, 0x33	; 51
     d42:	8f 7c       	andi	r24, 0xCF	; 207
     d44:	83 bf       	out	0x33, r24	; 51
		_TCNT0 = 0;								/*clear timer 0 data register*/
     d46:	12 be       	out	0x32, r1	; 50
		if(timerConfig->timer_mode == overflow){
     d48:	81 81       	ldd	r24, Z+1	; 0x01
     d4a:	88 23       	and	r24, r24
     d4c:	09 f0       	breq	.+2      	; 0xd50 <TIMER_start+0x24>
     d4e:	a3 c0       	rjmp	.+326    	; 0xe96 <TIMER_start+0x16a>
			_TCCR0._WGM01 = 0;							/*configure timer 0 to overflow mode*/
     d50:	83 b7       	in	r24, 0x33	; 51
     d52:	87 7f       	andi	r24, 0xF7	; 247
     d54:	83 bf       	out	0x33, r24	; 51
			_TCCR0._WGM00 = 0;
     d56:	83 b7       	in	r24, 0x33	; 51
     d58:	8f 7b       	andi	r24, 0xBF	; 191
     d5a:	83 bf       	out	0x33, r24	; 51
			_TIMSK._TOIE0 = 1;							/*enable timer 0 over flow interrupt request generation*/
     d5c:	89 b7       	in	r24, 0x39	; 57
     d5e:	81 60       	ori	r24, 0x01	; 1
     d60:	89 bf       	out	0x39, r24	; 57
			_TIMSK._OCIE0 = 0;							/*disable timer 0 compare interrupt request generation*/
     d62:	89 b7       	in	r24, 0x39	; 57
     d64:	8d 7f       	andi	r24, 0xFD	; 253
     d66:	89 bf       	out	0x39, r24	; 57
			_TCNT0 = timerConfig->SCValue;				/*load timer counter register with the initial value*/
     d68:	83 81       	ldd	r24, Z+3	; 0x03
     d6a:	94 81       	ldd	r25, Z+4	; 0x04
     d6c:	82 bf       	out	0x32, r24	; 50
			timer0_Reload = timerConfig->SCValue;		/*this value will be used later in ISR*/
     d6e:	90 93 6f 02 	sts	0x026F, r25
     d72:	80 93 6e 02 	sts	0x026E, r24
			g_timer0overflow = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;	/*configure the call back function address*/
     d76:	85 81       	ldd	r24, Z+5	; 0x05
     d78:	96 81       	ldd	r25, Z+6	; 0x06
     d7a:	90 93 6d 02 	sts	0x026D, r25
     d7e:	80 93 6c 02 	sts	0x026C, r24
			_OCR0 = timerConfig->SCValue;		/*set the compare register to compare value*/
			_TIMSK._TOIE0 = 0;					/*disable timer 0 over flow interrupt request generation*/
			_TIMSK._OCIE0 = 1;					/*enable timer 0 compare interrupt request generation*/
			g_timer0compare = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
		}
		_TCCR0._CS0 = timerConfig->timer_prescaler; /*configure prescaler for timer 0 and start counting*/
     d82:	92 81       	ldd	r25, Z+2	; 0x02
     d84:	97 70       	andi	r25, 0x07	; 7
     d86:	83 b7       	in	r24, 0x33	; 51
     d88:	88 7f       	andi	r24, 0xF8	; 248
     d8a:	89 2b       	or	r24, r25
     d8c:	83 bf       	out	0x33, r24	; 51
     d8e:	08 95       	ret
 * 					timer mode either compare or overflow and the compare value in case of compare mode
 * 					compare value dosent matter in case of ovdrflow mode
 * ---------------------------------------------------------------------------------------------------------------------*/

void TIMER_start(const timerConfig_t * timerConfig){
	switch(timerConfig->timerNUM){
     d90:	82 30       	cpi	r24, 0x02	; 2
     d92:	09 f0       	breq	.+2      	; 0xd96 <TIMER_start+0x6a>
     d94:	08 95       	ret
		break;
	/*-------------------------------------------------------------------------------------------------------------------
	 * 											timer 2 configuration
	 * -----------------------------------------------------------------------------------------------------------------*/
	case timer2:
		_TCCR2._FOC2 = 1;						/*this bit is set at non PWM mode*/
     d96:	85 b5       	in	r24, 0x25	; 37
     d98:	80 68       	ori	r24, 0x80	; 128
     d9a:	85 bd       	out	0x25, r24	; 37
		_TCCR2._COM2 = 0;
     d9c:	85 b5       	in	r24, 0x25	; 37
     d9e:	8f 7c       	andi	r24, 0xCF	; 207
     da0:	85 bd       	out	0x25, r24	; 37
		if(timerConfig->timer_mode == overflow){
     da2:	81 81       	ldd	r24, Z+1	; 0x01
     da4:	88 23       	and	r24, r24
     da6:	09 f4       	brne	.+2      	; 0xdaa <TIMER_start+0x7e>
     da8:	5c c0       	rjmp	.+184    	; 0xe62 <TIMER_start+0x136>
			_TIMSK._OCIE2 = 0;					/*disable timer 0 compare interrupt request generation*/
			_TCNT2 = timerConfig->SCValue;
			timer2_Reload = timerConfig->SCValue;
			g_timer2overflow = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
		}
		else if(timerConfig->timer_mode == compare){
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	09 f4       	brne	.+2      	; 0xdb0 <TIMER_start+0x84>
     dae:	8c c0       	rjmp	.+280    	; 0xec8 <TIMER_start+0x19c>
			_OCR2 = timerConfig->SCValue;		/*set the compare register to compare value*/
			_TIMSK._TOIE2 = 0;					/*disable timer 0 over flow interrupt request generation*/
			_TIMSK._OCIE2 = 1;					/*enable timer 0 compare interrupt request generation*/
			g_timer2compare = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
		}
		_TCCR2._CS2 = timerConfig->timer_prescaler; /*configure prescaler for timer 0 and start counting*/
     db0:	92 81       	ldd	r25, Z+2	; 0x02
     db2:	97 70       	andi	r25, 0x07	; 7
     db4:	85 b5       	in	r24, 0x25	; 37
     db6:	88 7f       	andi	r24, 0xF8	; 248
     db8:	89 2b       	or	r24, r25
     dba:	85 bd       	out	0x25, r24	; 37
     dbc:	08 95       	ret
		break;
		/*-------------------------------------------------------------------------------------------------------------------
		 * 											timer 1 configuration
		 * -----------------------------------------------------------------------------------------------------------------*/
	case timer1:
		_TCCR1A._COM1A = 0;
     dbe:	8f b5       	in	r24, 0x2f	; 47
     dc0:	8f 73       	andi	r24, 0x3F	; 63
     dc2:	8f bd       	out	0x2f, r24	; 47
		_TCCR1A._COM1B = 0;
     dc4:	8f b5       	in	r24, 0x2f	; 47
     dc6:	8f 7c       	andi	r24, 0xCF	; 207
     dc8:	8f bd       	out	0x2f, r24	; 47
		_TCCR1A._FOC1A = 1;
     dca:	8f b5       	in	r24, 0x2f	; 47
     dcc:	88 60       	ori	r24, 0x08	; 8
     dce:	8f bd       	out	0x2f, r24	; 47
		_TCCR1A._FOC1B = 1;
     dd0:	8f b5       	in	r24, 0x2f	; 47
     dd2:	84 60       	ori	r24, 0x04	; 4
     dd4:	8f bd       	out	0x2f, r24	; 47
		_TCCR1B._ICES1 = 0;
     dd6:	8e b5       	in	r24, 0x2e	; 46
     dd8:	8f 7b       	andi	r24, 0xBF	; 191
     dda:	8e bd       	out	0x2e, r24	; 46
		_TCCR1B._ICNC1 = 0;
     ddc:	8e b5       	in	r24, 0x2e	; 46
     dde:	8f 77       	andi	r24, 0x7F	; 127
     de0:	8e bd       	out	0x2e, r24	; 46
		if(timerConfig->timer_mode == overflow){
     de2:	81 81       	ldd	r24, Z+1	; 0x01
     de4:	88 23       	and	r24, r24
     de6:	09 f5       	brne	.+66     	; 0xe2a <TIMER_start+0xfe>
			_TCCR1A._WGM10_1 = 0;
     de8:	8f b5       	in	r24, 0x2f	; 47
     dea:	8c 7f       	andi	r24, 0xFC	; 252
     dec:	8f bd       	out	0x2f, r24	; 47
			_TCCR1B._WGM12_3 = 0;
     dee:	8e b5       	in	r24, 0x2e	; 46
     df0:	87 7e       	andi	r24, 0xE7	; 231
     df2:	8e bd       	out	0x2e, r24	; 46
			_TIMSK._TOIE1 = 1;
     df4:	89 b7       	in	r24, 0x39	; 57
     df6:	84 60       	ori	r24, 0x04	; 4
     df8:	89 bf       	out	0x39, r24	; 57
			_TIMSK._OCIE1A = 0;
     dfa:	89 b7       	in	r24, 0x39	; 57
     dfc:	8f 7e       	andi	r24, 0xEF	; 239
     dfe:	89 bf       	out	0x39, r24	; 57
			_TCNT1 = timerConfig->SCValue;
     e00:	83 81       	ldd	r24, Z+3	; 0x03
     e02:	94 81       	ldd	r25, Z+4	; 0x04
     e04:	9d bd       	out	0x2d, r25	; 45
     e06:	8c bd       	out	0x2c, r24	; 44
			timer1_Reload = timerConfig->SCValue;
     e08:	90 93 71 02 	sts	0x0271, r25
     e0c:	80 93 70 02 	sts	0x0270, r24
			g_timer1overflow = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
     e10:	85 81       	ldd	r24, Z+5	; 0x05
     e12:	96 81       	ldd	r25, Z+6	; 0x06
     e14:	90 93 69 02 	sts	0x0269, r25
     e18:	80 93 68 02 	sts	0x0268, r24
			_TIMSK._OCIE1A = 1;
			_TCNT1 = 0;
			_OCR1A = timerConfig->SCValue;
			g_timer1compare = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
		}
		_TCCR1B._CS1 = timerConfig->timer_prescaler;
     e1c:	92 81       	ldd	r25, Z+2	; 0x02
     e1e:	97 70       	andi	r25, 0x07	; 7
     e20:	8e b5       	in	r24, 0x2e	; 46
     e22:	88 7f       	andi	r24, 0xF8	; 248
     e24:	89 2b       	or	r24, r25
     e26:	8e bd       	out	0x2e, r24	; 46
     e28:	08 95       	ret
			_TIMSK._OCIE1A = 0;
			_TCNT1 = timerConfig->SCValue;
			timer1_Reload = timerConfig->SCValue;
			g_timer1overflow = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
		}
		else if(timerConfig->timer_mode == compare){
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	b9 f7       	brne	.-18     	; 0xe1c <TIMER_start+0xf0>
			_TCCR1A._WGM10_1 =  0;
     e2e:	8f b5       	in	r24, 0x2f	; 47
     e30:	8c 7f       	andi	r24, 0xFC	; 252
     e32:	8f bd       	out	0x2f, r24	; 47
			_TCCR1B._WGM12_3  = 1;
     e34:	8e b5       	in	r24, 0x2e	; 46
     e36:	87 7e       	andi	r24, 0xE7	; 231
     e38:	88 60       	ori	r24, 0x08	; 8
     e3a:	8e bd       	out	0x2e, r24	; 46
			_TIMSK._TOIE1  = 0;
     e3c:	89 b7       	in	r24, 0x39	; 57
     e3e:	8b 7f       	andi	r24, 0xFB	; 251
     e40:	89 bf       	out	0x39, r24	; 57
			_TIMSK._OCIE1A = 1;
     e42:	89 b7       	in	r24, 0x39	; 57
     e44:	80 61       	ori	r24, 0x10	; 16
     e46:	89 bf       	out	0x39, r24	; 57
			_TCNT1 = 0;
     e48:	1d bc       	out	0x2d, r1	; 45
     e4a:	1c bc       	out	0x2c, r1	; 44
			_OCR1A = timerConfig->SCValue;
     e4c:	83 81       	ldd	r24, Z+3	; 0x03
     e4e:	94 81       	ldd	r25, Z+4	; 0x04
     e50:	9b bd       	out	0x2b, r25	; 43
     e52:	8a bd       	out	0x2a, r24	; 42
			g_timer1compare = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
     e54:	85 81       	ldd	r24, Z+5	; 0x05
     e56:	96 81       	ldd	r25, Z+6	; 0x06
     e58:	90 93 67 02 	sts	0x0267, r25
     e5c:	80 93 66 02 	sts	0x0266, r24
     e60:	dd cf       	rjmp	.-70     	; 0xe1c <TIMER_start+0xf0>
	 * -----------------------------------------------------------------------------------------------------------------*/
	case timer2:
		_TCCR2._FOC2 = 1;						/*this bit is set at non PWM mode*/
		_TCCR2._COM2 = 0;
		if(timerConfig->timer_mode == overflow){
			_TCCR2._WGM21 = 0;					/*configure timer 0 to overflow mode*/
     e62:	85 b5       	in	r24, 0x25	; 37
     e64:	87 7f       	andi	r24, 0xF7	; 247
     e66:	85 bd       	out	0x25, r24	; 37
			_TCCR2._WGM20 = 0;
     e68:	85 b5       	in	r24, 0x25	; 37
     e6a:	8f 7b       	andi	r24, 0xBF	; 191
     e6c:	85 bd       	out	0x25, r24	; 37
			_TIMSK._TOIE2 = 1;					/*enable timer 0 over flow interrupt request generation*/
     e6e:	89 b7       	in	r24, 0x39	; 57
     e70:	80 64       	ori	r24, 0x40	; 64
     e72:	89 bf       	out	0x39, r24	; 57
			_TIMSK._OCIE2 = 0;					/*disable timer 0 compare interrupt request generation*/
     e74:	89 b7       	in	r24, 0x39	; 57
     e76:	8f 77       	andi	r24, 0x7F	; 127
     e78:	89 bf       	out	0x39, r24	; 57
			_TCNT2 = timerConfig->SCValue;
     e7a:	83 81       	ldd	r24, Z+3	; 0x03
     e7c:	94 81       	ldd	r25, Z+4	; 0x04
     e7e:	84 bd       	out	0x24, r24	; 36
			timer2_Reload = timerConfig->SCValue;
     e80:	90 93 73 02 	sts	0x0273, r25
     e84:	80 93 72 02 	sts	0x0272, r24
			g_timer2overflow = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
     e88:	85 81       	ldd	r24, Z+5	; 0x05
     e8a:	96 81       	ldd	r25, Z+6	; 0x06
     e8c:	90 93 65 02 	sts	0x0265, r25
     e90:	80 93 64 02 	sts	0x0264, r24
     e94:	8d cf       	rjmp	.-230    	; 0xdb0 <TIMER_start+0x84>
			_TIMSK._OCIE0 = 0;							/*disable timer 0 compare interrupt request generation*/
			_TCNT0 = timerConfig->SCValue;				/*load timer counter register with the initial value*/
			timer0_Reload = timerConfig->SCValue;		/*this value will be used later in ISR*/
			g_timer0overflow = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;	/*configure the call back function address*/
		}
		else if(timerConfig->timer_mode == compare){
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	09 f0       	breq	.+2      	; 0xe9c <TIMER_start+0x170>
     e9a:	73 cf       	rjmp	.-282    	; 0xd82 <TIMER_start+0x56>
			_TCCR0._WGM01 = 1;					/*configure timer 0 to compare mode*/
     e9c:	83 b7       	in	r24, 0x33	; 51
     e9e:	88 60       	ori	r24, 0x08	; 8
     ea0:	83 bf       	out	0x33, r24	; 51
			_TCCR0._WGM00 = 0;
     ea2:	83 b7       	in	r24, 0x33	; 51
     ea4:	8f 7b       	andi	r24, 0xBF	; 191
     ea6:	83 bf       	out	0x33, r24	; 51
			_TCNT0 = 0;							/*clear timer 0 data register*/
     ea8:	12 be       	out	0x32, r1	; 50
			_OCR0 = timerConfig->SCValue;		/*set the compare register to compare value*/
     eaa:	83 81       	ldd	r24, Z+3	; 0x03
     eac:	8c bf       	out	0x3c, r24	; 60
			_TIMSK._TOIE0 = 0;					/*disable timer 0 over flow interrupt request generation*/
     eae:	89 b7       	in	r24, 0x39	; 57
     eb0:	8e 7f       	andi	r24, 0xFE	; 254
     eb2:	89 bf       	out	0x39, r24	; 57
			_TIMSK._OCIE0 = 1;					/*enable timer 0 compare interrupt request generation*/
     eb4:	89 b7       	in	r24, 0x39	; 57
     eb6:	82 60       	ori	r24, 0x02	; 2
     eb8:	89 bf       	out	0x39, r24	; 57
			g_timer0compare = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
     eba:	85 81       	ldd	r24, Z+5	; 0x05
     ebc:	96 81       	ldd	r25, Z+6	; 0x06
     ebe:	90 93 6b 02 	sts	0x026B, r25
     ec2:	80 93 6a 02 	sts	0x026A, r24
     ec6:	5d cf       	rjmp	.-326    	; 0xd82 <TIMER_start+0x56>
			_TCNT2 = timerConfig->SCValue;
			timer2_Reload = timerConfig->SCValue;
			g_timer2overflow = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
		}
		else if(timerConfig->timer_mode == compare){
			_TCCR2._WGM21 = 1;					/*configure timer 0 to compare mode*/
     ec8:	85 b5       	in	r24, 0x25	; 37
     eca:	88 60       	ori	r24, 0x08	; 8
     ecc:	85 bd       	out	0x25, r24	; 37
			_TCCR2._WGM20 = 0;
     ece:	85 b5       	in	r24, 0x25	; 37
     ed0:	8f 7b       	andi	r24, 0xBF	; 191
     ed2:	85 bd       	out	0x25, r24	; 37
			_TCNT2 = 0;							/*clear timer 0 data register*/
     ed4:	14 bc       	out	0x24, r1	; 36
			_OCR2 = timerConfig->SCValue;		/*set the compare register to compare value*/
     ed6:	83 81       	ldd	r24, Z+3	; 0x03
     ed8:	83 bd       	out	0x23, r24	; 35
			_TIMSK._TOIE2 = 0;					/*disable timer 0 over flow interrupt request generation*/
     eda:	89 b7       	in	r24, 0x39	; 57
     edc:	8f 7b       	andi	r24, 0xBF	; 191
     ede:	89 bf       	out	0x39, r24	; 57
			_TIMSK._OCIE2 = 1;					/*enable timer 0 compare interrupt request generation*/
     ee0:	89 b7       	in	r24, 0x39	; 57
     ee2:	80 68       	ori	r24, 0x80	; 128
     ee4:	89 bf       	out	0x39, r24	; 57
			g_timer2compare = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
     ee6:	85 81       	ldd	r24, Z+5	; 0x05
     ee8:	96 81       	ldd	r25, Z+6	; 0x06
     eea:	90 93 63 02 	sts	0x0263, r25
     eee:	80 93 62 02 	sts	0x0262, r24
     ef2:	5e cf       	rjmp	.-324    	; 0xdb0 <TIMER_start+0x84>

00000ef4 <TIMER_stop>:
 * arguments : structure of type timerConfig_t contains
 * 				{timerNUM , timer_mode , timer_prescaler , compareValue , CallbackfunctionPtr}
 *
 * Description : this function responsible to stop the timer by disable it's clock
 * --------------------------------------------------------------------------------------------------------------*/
void TIMER_stop(const timerConfig_t * timerConfig){
     ef4:	fc 01       	movw	r30, r24
	switch(timerConfig->timerNUM){
     ef6:	e0 81       	ld	r30, Z
     ef8:	e1 30       	cpi	r30, 0x01	; 1
     efa:	69 f0       	breq	.+26     	; 0xf16 <TIMER_stop+0x22>
     efc:	e1 30       	cpi	r30, 0x01	; 1
     efe:	20 f4       	brcc	.+8      	; 0xf08 <TIMER_stop+0x14>
	case timer0:
		_TCCR0._CS0 = 0; /*remove clock and disable timer */
     f00:	83 b7       	in	r24, 0x33	; 51
     f02:	88 7f       	andi	r24, 0xF8	; 248
     f04:	83 bf       	out	0x33, r24	; 51
     f06:	08 95       	ret
 * 				{timerNUM , timer_mode , timer_prescaler , compareValue , CallbackfunctionPtr}
 *
 * Description : this function responsible to stop the timer by disable it's clock
 * --------------------------------------------------------------------------------------------------------------*/
void TIMER_stop(const timerConfig_t * timerConfig){
	switch(timerConfig->timerNUM){
     f08:	e2 30       	cpi	r30, 0x02	; 2
     f0a:	09 f0       	breq	.+2      	; 0xf0e <TIMER_stop+0x1a>
     f0c:	08 95       	ret
		break;
	case timer1:
		_TCCR1B._CS1 = 0;/*remove clock and disable timer */
		break;
	case timer2:
		_TCCR2._CS2 = 0; /*remove clock and disable timer */
     f0e:	85 b5       	in	r24, 0x25	; 37
     f10:	88 7f       	andi	r24, 0xF8	; 248
     f12:	85 bd       	out	0x25, r24	; 37
     f14:	08 95       	ret
	switch(timerConfig->timerNUM){
	case timer0:
		_TCCR0._CS0 = 0; /*remove clock and disable timer */
		break;
	case timer1:
		_TCCR1B._CS1 = 0;/*remove clock and disable timer */
     f16:	8e b5       	in	r24, 0x2e	; 46
     f18:	88 7f       	andi	r24, 0xF8	; 248
     f1a:	8e bd       	out	0x2e, r24	; 46
     f1c:	08 95       	ret

00000f1e <__vector_9>:
	}
}

/*----------------------------timer interrupt service routine -----------------------------*/

ISR(TIMER0_OVF_vect){
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
	_TCNT0 = timer0_Reload ;
     f40:	80 91 6e 02 	lds	r24, 0x026E
     f44:	90 91 6f 02 	lds	r25, 0x026F
     f48:	82 bf       	out	0x32, r24	; 50
	if(g_timer0overflow != NULL){
     f4a:	e0 91 6c 02 	lds	r30, 0x026C
     f4e:	f0 91 6d 02 	lds	r31, 0x026D
     f52:	30 97       	sbiw	r30, 0x00	; 0
     f54:	09 f0       	breq	.+2      	; 0xf58 <__vector_9+0x3a>
		(*g_timer0overflow)();
     f56:	09 95       	icall
	}
}
     f58:	ff 91       	pop	r31
     f5a:	ef 91       	pop	r30
     f5c:	bf 91       	pop	r27
     f5e:	af 91       	pop	r26
     f60:	9f 91       	pop	r25
     f62:	8f 91       	pop	r24
     f64:	7f 91       	pop	r23
     f66:	6f 91       	pop	r22
     f68:	5f 91       	pop	r21
     f6a:	4f 91       	pop	r20
     f6c:	3f 91       	pop	r19
     f6e:	2f 91       	pop	r18
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <__vector_19>:

ISR(TIMER0_COMP_vect){
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	11 24       	eor	r1, r1
     f84:	2f 93       	push	r18
     f86:	3f 93       	push	r19
     f88:	4f 93       	push	r20
     f8a:	5f 93       	push	r21
     f8c:	6f 93       	push	r22
     f8e:	7f 93       	push	r23
     f90:	8f 93       	push	r24
     f92:	9f 93       	push	r25
     f94:	af 93       	push	r26
     f96:	bf 93       	push	r27
     f98:	ef 93       	push	r30
     f9a:	ff 93       	push	r31
	if(g_timer0compare != NULL){
     f9c:	e0 91 6a 02 	lds	r30, 0x026A
     fa0:	f0 91 6b 02 	lds	r31, 0x026B
     fa4:	30 97       	sbiw	r30, 0x00	; 0
     fa6:	09 f0       	breq	.+2      	; 0xfaa <__vector_19+0x30>
		(*g_timer0compare)();
     fa8:	09 95       	icall
	}
}
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <__vector_8>:


ISR(TIMER1_OVF_vect){
     fcc:	1f 92       	push	r1
     fce:	0f 92       	push	r0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	4f 93       	push	r20
     fdc:	5f 93       	push	r21
     fde:	6f 93       	push	r22
     fe0:	7f 93       	push	r23
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31
	_TCNT1 = timer1_Reload ;
     fee:	80 91 70 02 	lds	r24, 0x0270
     ff2:	90 91 71 02 	lds	r25, 0x0271
     ff6:	9d bd       	out	0x2d, r25	; 45
     ff8:	8c bd       	out	0x2c, r24	; 44
	if(g_timer1overflow != NULL){
     ffa:	e0 91 68 02 	lds	r30, 0x0268
     ffe:	f0 91 69 02 	lds	r31, 0x0269
    1002:	30 97       	sbiw	r30, 0x00	; 0
    1004:	09 f0       	breq	.+2      	; 0x1008 <__vector_8+0x3c>
		(*g_timer1overflow)();
    1006:	09 95       	icall
	}
}
    1008:	ff 91       	pop	r31
    100a:	ef 91       	pop	r30
    100c:	bf 91       	pop	r27
    100e:	af 91       	pop	r26
    1010:	9f 91       	pop	r25
    1012:	8f 91       	pop	r24
    1014:	7f 91       	pop	r23
    1016:	6f 91       	pop	r22
    1018:	5f 91       	pop	r21
    101a:	4f 91       	pop	r20
    101c:	3f 91       	pop	r19
    101e:	2f 91       	pop	r18
    1020:	0f 90       	pop	r0
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	0f 90       	pop	r0
    1026:	1f 90       	pop	r1
    1028:	18 95       	reti

0000102a <__vector_6>:

ISR(TIMER1_COMPA_vect){
    102a:	1f 92       	push	r1
    102c:	0f 92       	push	r0
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	0f 92       	push	r0
    1032:	11 24       	eor	r1, r1
    1034:	2f 93       	push	r18
    1036:	3f 93       	push	r19
    1038:	4f 93       	push	r20
    103a:	5f 93       	push	r21
    103c:	6f 93       	push	r22
    103e:	7f 93       	push	r23
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	af 93       	push	r26
    1046:	bf 93       	push	r27
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31
	if(g_timer1compare != NULL){
    104c:	e0 91 66 02 	lds	r30, 0x0266
    1050:	f0 91 67 02 	lds	r31, 0x0267
    1054:	30 97       	sbiw	r30, 0x00	; 0
    1056:	09 f0       	breq	.+2      	; 0x105a <__vector_6+0x30>
		(*g_timer1compare)();
    1058:	09 95       	icall
	}
}
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	bf 91       	pop	r27
    1060:	af 91       	pop	r26
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	7f 91       	pop	r23
    1068:	6f 91       	pop	r22
    106a:	5f 91       	pop	r21
    106c:	4f 91       	pop	r20
    106e:	3f 91       	pop	r19
    1070:	2f 91       	pop	r18
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <__vector_4>:

ISR(TIMER2_OVF_vect){
    107c:	1f 92       	push	r1
    107e:	0f 92       	push	r0
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	0f 92       	push	r0
    1084:	11 24       	eor	r1, r1
    1086:	2f 93       	push	r18
    1088:	3f 93       	push	r19
    108a:	4f 93       	push	r20
    108c:	5f 93       	push	r21
    108e:	6f 93       	push	r22
    1090:	7f 93       	push	r23
    1092:	8f 93       	push	r24
    1094:	9f 93       	push	r25
    1096:	af 93       	push	r26
    1098:	bf 93       	push	r27
    109a:	ef 93       	push	r30
    109c:	ff 93       	push	r31
	_TCNT2 = timer2_Reload ;
    109e:	80 91 72 02 	lds	r24, 0x0272
    10a2:	90 91 73 02 	lds	r25, 0x0273
    10a6:	84 bd       	out	0x24, r24	; 36
	if(g_timer2overflow != NULL){
    10a8:	e0 91 64 02 	lds	r30, 0x0264
    10ac:	f0 91 65 02 	lds	r31, 0x0265
    10b0:	30 97       	sbiw	r30, 0x00	; 0
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <__vector_4+0x3a>
		(*g_timer2overflow)();
    10b4:	09 95       	icall
	}
}
    10b6:	ff 91       	pop	r31
    10b8:	ef 91       	pop	r30
    10ba:	bf 91       	pop	r27
    10bc:	af 91       	pop	r26
    10be:	9f 91       	pop	r25
    10c0:	8f 91       	pop	r24
    10c2:	7f 91       	pop	r23
    10c4:	6f 91       	pop	r22
    10c6:	5f 91       	pop	r21
    10c8:	4f 91       	pop	r20
    10ca:	3f 91       	pop	r19
    10cc:	2f 91       	pop	r18
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <__vector_3>:
ISR(TIMER2_COMP_vect){
    10d8:	1f 92       	push	r1
    10da:	0f 92       	push	r0
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	0f 92       	push	r0
    10e0:	11 24       	eor	r1, r1
    10e2:	2f 93       	push	r18
    10e4:	3f 93       	push	r19
    10e6:	4f 93       	push	r20
    10e8:	5f 93       	push	r21
    10ea:	6f 93       	push	r22
    10ec:	7f 93       	push	r23
    10ee:	8f 93       	push	r24
    10f0:	9f 93       	push	r25
    10f2:	af 93       	push	r26
    10f4:	bf 93       	push	r27
    10f6:	ef 93       	push	r30
    10f8:	ff 93       	push	r31
	if(g_timer2compare != NULL){
    10fa:	e0 91 62 02 	lds	r30, 0x0262
    10fe:	f0 91 63 02 	lds	r31, 0x0263
    1102:	30 97       	sbiw	r30, 0x00	; 0
    1104:	09 f0       	breq	.+2      	; 0x1108 <__vector_3+0x30>
		(*g_timer2compare)();
    1106:	09 95       	icall
	}
}
    1108:	ff 91       	pop	r31
    110a:	ef 91       	pop	r30
    110c:	bf 91       	pop	r27
    110e:	af 91       	pop	r26
    1110:	9f 91       	pop	r25
    1112:	8f 91       	pop	r24
    1114:	7f 91       	pop	r23
    1116:	6f 91       	pop	r22
    1118:	5f 91       	pop	r21
    111a:	4f 91       	pop	r20
    111c:	3f 91       	pop	r19
    111e:	2f 91       	pop	r18
    1120:	0f 90       	pop	r0
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	0f 90       	pop	r0
    1126:	1f 90       	pop	r1
    1128:	18 95       	reti

0000112a <TWI_init>:
 *  Created on: Jan 22, 2020
 *      Author: SALAH
 */
#include "i2c.h"

void TWI_init(TWIconfig_t * TWIconfig){
    112a:	fc 01       	movw	r30, r24
	 * 3	TWWC	-		write collision flag (HW flag)
	 * 2	TWEN	1		enables the TWI module
	 * 1	reserved
	 * 0	TWIE	0		TWI module interrupt enable (we will use polling)
	 */
	TWBR = TWIconfig->bitRate ;
    112c:	80 81       	ld	r24, Z
    112e:	80 b9       	out	0x00, r24	; 0
	TWCR = (1<<TWINT) | (1<<TWEN); /*clear the interrupt flag & enable the TWI module*/
    1130:	84 e8       	ldi	r24, 0x84	; 132
    1132:	86 bf       	out	0x36, r24	; 54
	TWSR = (TWSR & 0xFC) | (TWIconfig->preScaller & 0x03); /*set the prescaler */
    1134:	91 b1       	in	r25, 0x01	; 1
    1136:	81 81       	ldd	r24, Z+1	; 0x01
    1138:	83 70       	andi	r24, 0x03	; 3
    113a:	9c 7f       	andi	r25, 0xFC	; 252
    113c:	89 2b       	or	r24, r25
    113e:	81 b9       	out	0x01, r24	; 1
	TWAR = (TWIconfig->deviceAddress)<<1;	/*set the slave address (shift is used because the 7 bit address 7-1)*/
    1140:	82 81       	ldd	r24, Z+2	; 0x02
    1142:	88 0f       	add	r24, r24
    1144:	82 b9       	out	0x02, r24	; 2
}
    1146:	08 95       	ret

00001148 <TWI_start>:
void TWI_start(void){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA); /*clear the interrupt flag & enable the TWI module & set the start bit condition*/
    1148:	84 ea       	ldi	r24, 0xA4	; 164
    114a:	86 bf       	out	0x36, r24	; 54
	while(BIT_IS_CLEAR(TWCR , TWINT));	/*busy loop until finishing sending the start bit*/
    114c:	06 b6       	in	r0, 0x36	; 54
    114e:	07 fe       	sbrs	r0, 7
    1150:	fd cf       	rjmp	.-6      	; 0x114c <TWI_start+0x4>
}
    1152:	08 95       	ret

00001154 <TWI_stop>:
void TWI_stop(void){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); /*clear the interrupt flag & enable the TWI module & set the stop bit condition*/
    1154:	84 e9       	ldi	r24, 0x94	; 148
    1156:	86 bf       	out	0x36, r24	; 54
}
    1158:	08 95       	ret

0000115a <TWI_write>:
void TWI_write(uint8 data){
	TWDR = data;
    115a:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT) | (1 << TWEN); /*clear the interrupt flag & enable the TWI module*/
    115c:	84 e8       	ldi	r24, 0x84	; 132
    115e:	86 bf       	out	0x36, r24	; 54
	while(BIT_IS_CLEAR(TWCR , TWINT));	/*busy loop until finishing sending data*/
    1160:	06 b6       	in	r0, 0x36	; 54
    1162:	07 fe       	sbrs	r0, 7
    1164:	fd cf       	rjmp	.-6      	; 0x1160 <TWI_write+0x6>
}
    1166:	08 95       	ret

00001168 <TWI_readWithACK>:
uint8 TWI_readWithACK(void){
	TWCR = (1 << TWINT) | (1 << TWEN) | (1<<TWEA); /*clear the interrupt flag & enable the TWI module & enable replying with ACK*/
    1168:	84 ec       	ldi	r24, 0xC4	; 196
    116a:	86 bf       	out	0x36, r24	; 54
	while(BIT_IS_CLEAR(TWCR , TWINT));	/*busy loop until finishing receiving data*/
    116c:	06 b6       	in	r0, 0x36	; 54
    116e:	07 fe       	sbrs	r0, 7
    1170:	fd cf       	rjmp	.-6      	; 0x116c <TWI_readWithACK+0x4>
	return TWDR; /*read data*/
    1172:	83 b1       	in	r24, 0x03	; 3
}
    1174:	08 95       	ret

00001176 <TWI_readWithNACK>:
uint8 TWI_readWithNACK(void){
	TWCR = (1 << TWINT) | (1 << TWEN); /*clear the interrupt flag & enable the TWI module*/
    1176:	84 e8       	ldi	r24, 0x84	; 132
    1178:	86 bf       	out	0x36, r24	; 54
	while(BIT_IS_CLEAR(TWCR , TWINT));	/*busy loop until finishing recieving data*/
    117a:	06 b6       	in	r0, 0x36	; 54
    117c:	07 fe       	sbrs	r0, 7
    117e:	fd cf       	rjmp	.-6      	; 0x117a <TWI_readWithNACK+0x4>
	return TWDR;
    1180:	83 b1       	in	r24, 0x03	; 3
}
    1182:	08 95       	ret

00001184 <TWI_getStatus>:
uint8 TWI_getStatus(void){
	return (TWSR & 0xF8); /*masking the most five bits that represents the TWI status*/
    1184:	81 b1       	in	r24, 0x01	; 1
}
    1186:	88 7f       	andi	r24, 0xF8	; 248
    1188:	08 95       	ret

0000118a <EINT_changeSenseControl>:
		_GICR._INT2 = 1;	/*enable INT0 request*/
		g_INT2_functionPtr = (volatile void(*)(void))EINT_config->INT_handler;
		break;
	}
}
void EINT_changeSenseControl(const EINT_t *EINT_config , senseControl_t EINT_SC){
    118a:	fc 01       	movw	r30, r24
	switch(EINT_config->ch){
    118c:	80 81       	ld	r24, Z
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	81 f0       	breq	.+32     	; 0x11b2 <EINT_changeSenseControl+0x28>
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	38 f4       	brcc	.+14     	; 0x11a4 <EINT_changeSenseControl+0x1a>
	case E_INT0:
		MCUCR  = (MCUCR & 0xFC) | (EINT_config->INT_SC & 0x03); 	/*set the interrupt sense control bits*/
    1196:	95 b7       	in	r25, 0x35	; 53
    1198:	81 81       	ldd	r24, Z+1	; 0x01
    119a:	83 70       	andi	r24, 0x03	; 3
    119c:	9c 7f       	andi	r25, 0xFC	; 252
    119e:	89 2b       	or	r24, r25
    11a0:	85 bf       	out	0x35, r24	; 53
    11a2:	08 95       	ret
		g_INT2_functionPtr = (volatile void(*)(void))EINT_config->INT_handler;
		break;
	}
}
void EINT_changeSenseControl(const EINT_t *EINT_config , senseControl_t EINT_SC){
	switch(EINT_config->ch){
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	09 f0       	breq	.+2      	; 0x11aa <EINT_changeSenseControl+0x20>
    11a8:	08 95       	ret
	case E_INT1:
		MCUCR  = (MCUCR & 0xF3) | (EINT_config->INT_SC & 0x03)<<2; 	/*set the interrupt sense control bits*/
		break;
	case E_INT2:
		if((EINT_config->INT_SC != falling) | (EINT_config->INT_SC != rising)){
			MCUCSR  = (MCUCSR & 0xBF) | (1<<ISC2); 	/*1=rising*/
    11aa:	84 b7       	in	r24, 0x34	; 52
    11ac:	80 64       	ori	r24, 0x40	; 64
    11ae:	84 bf       	out	0x34, r24	; 52
    11b0:	08 95       	ret
	switch(EINT_config->ch){
	case E_INT0:
		MCUCR  = (MCUCR & 0xFC) | (EINT_config->INT_SC & 0x03); 	/*set the interrupt sense control bits*/
		break;
	case E_INT1:
		MCUCR  = (MCUCR & 0xF3) | (EINT_config->INT_SC & 0x03)<<2; 	/*set the interrupt sense control bits*/
    11b2:	25 b7       	in	r18, 0x35	; 53
    11b4:	81 81       	ldd	r24, Z+1	; 0x01
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	83 70       	andi	r24, 0x03	; 3
    11ba:	90 70       	andi	r25, 0x00	; 0
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	23 7f       	andi	r18, 0xF3	; 243
    11c6:	28 2b       	or	r18, r24
    11c8:	25 bf       	out	0x35, r18	; 53
    11ca:	08 95       	ret

000011cc <__vector_1>:
		}
		break;
	}
}

ISR(INT0_vect){
    11cc:	1f 92       	push	r1
    11ce:	0f 92       	push	r0
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	0f 92       	push	r0
    11d4:	11 24       	eor	r1, r1
    11d6:	2f 93       	push	r18
    11d8:	3f 93       	push	r19
    11da:	4f 93       	push	r20
    11dc:	5f 93       	push	r21
    11de:	6f 93       	push	r22
    11e0:	7f 93       	push	r23
    11e2:	8f 93       	push	r24
    11e4:	9f 93       	push	r25
    11e6:	af 93       	push	r26
    11e8:	bf 93       	push	r27
    11ea:	ef 93       	push	r30
    11ec:	ff 93       	push	r31
	if(g_INT0_functionPtr != NULL){
    11ee:	e0 91 78 02 	lds	r30, 0x0278
    11f2:	f0 91 79 02 	lds	r31, 0x0279
    11f6:	30 97       	sbiw	r30, 0x00	; 0
    11f8:	09 f0       	breq	.+2      	; 0x11fc <__vector_1+0x30>
		(*g_INT0_functionPtr)();
    11fa:	09 95       	icall
	}
}
    11fc:	ff 91       	pop	r31
    11fe:	ef 91       	pop	r30
    1200:	bf 91       	pop	r27
    1202:	af 91       	pop	r26
    1204:	9f 91       	pop	r25
    1206:	8f 91       	pop	r24
    1208:	7f 91       	pop	r23
    120a:	6f 91       	pop	r22
    120c:	5f 91       	pop	r21
    120e:	4f 91       	pop	r20
    1210:	3f 91       	pop	r19
    1212:	2f 91       	pop	r18
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	0f 90       	pop	r0
    121a:	1f 90       	pop	r1
    121c:	18 95       	reti

0000121e <__vector_2>:
ISR(INT1_vect){
    121e:	1f 92       	push	r1
    1220:	0f 92       	push	r0
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	0f 92       	push	r0
    1226:	11 24       	eor	r1, r1
    1228:	2f 93       	push	r18
    122a:	3f 93       	push	r19
    122c:	4f 93       	push	r20
    122e:	5f 93       	push	r21
    1230:	6f 93       	push	r22
    1232:	7f 93       	push	r23
    1234:	8f 93       	push	r24
    1236:	9f 93       	push	r25
    1238:	af 93       	push	r26
    123a:	bf 93       	push	r27
    123c:	ef 93       	push	r30
    123e:	ff 93       	push	r31
	if(g_INT1_functionPtr != NULL){
    1240:	e0 91 74 02 	lds	r30, 0x0274
    1244:	f0 91 75 02 	lds	r31, 0x0275
    1248:	30 97       	sbiw	r30, 0x00	; 0
    124a:	09 f0       	breq	.+2      	; 0x124e <__vector_2+0x30>
		(*g_INT1_functionPtr)();
    124c:	09 95       	icall
	}
}
    124e:	ff 91       	pop	r31
    1250:	ef 91       	pop	r30
    1252:	bf 91       	pop	r27
    1254:	af 91       	pop	r26
    1256:	9f 91       	pop	r25
    1258:	8f 91       	pop	r24
    125a:	7f 91       	pop	r23
    125c:	6f 91       	pop	r22
    125e:	5f 91       	pop	r21
    1260:	4f 91       	pop	r20
    1262:	3f 91       	pop	r19
    1264:	2f 91       	pop	r18
    1266:	0f 90       	pop	r0
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	0f 90       	pop	r0
    126c:	1f 90       	pop	r1
    126e:	18 95       	reti

00001270 <__vector_18>:
ISR(INT2_vect){
    1270:	1f 92       	push	r1
    1272:	0f 92       	push	r0
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	0f 92       	push	r0
    1278:	11 24       	eor	r1, r1
    127a:	2f 93       	push	r18
    127c:	3f 93       	push	r19
    127e:	4f 93       	push	r20
    1280:	5f 93       	push	r21
    1282:	6f 93       	push	r22
    1284:	7f 93       	push	r23
    1286:	8f 93       	push	r24
    1288:	9f 93       	push	r25
    128a:	af 93       	push	r26
    128c:	bf 93       	push	r27
    128e:	ef 93       	push	r30
    1290:	ff 93       	push	r31
	if(g_INT1_functionPtr != NULL){
    1292:	80 91 74 02 	lds	r24, 0x0274
    1296:	90 91 75 02 	lds	r25, 0x0275
    129a:	89 2b       	or	r24, r25
    129c:	29 f0       	breq	.+10     	; 0x12a8 <__vector_18+0x38>
		(*g_INT2_functionPtr)();
    129e:	e0 91 76 02 	lds	r30, 0x0276
    12a2:	f0 91 77 02 	lds	r31, 0x0277
    12a6:	09 95       	icall
	}
}
    12a8:	ff 91       	pop	r31
    12aa:	ef 91       	pop	r30
    12ac:	bf 91       	pop	r27
    12ae:	af 91       	pop	r26
    12b0:	9f 91       	pop	r25
    12b2:	8f 91       	pop	r24
    12b4:	7f 91       	pop	r23
    12b6:	6f 91       	pop	r22
    12b8:	5f 91       	pop	r21
    12ba:	4f 91       	pop	r20
    12bc:	3f 91       	pop	r19
    12be:	2f 91       	pop	r18
    12c0:	0f 90       	pop	r0
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	0f 90       	pop	r0
    12c6:	1f 90       	pop	r1
    12c8:	18 95       	reti

000012ca <EINT_init>:

volatile static void (*g_INT0_functionPtr) (void) = NULL;
volatile static void (*g_INT1_functionPtr) (void) = NULL;
volatile static void (*g_INT2_functionPtr) (void) = NULL;

void EINT_init(const EINT_t *EINT_config){
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	2c 97       	sbiw	r28, 0x0c	; 12
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	8c 01       	movw	r16, r24
	CHconfig_t EINT0_pin = {portD , pin2 , input , EINT_config->internal_resistor};
    12e4:	fc 01       	movw	r30, r24
    12e6:	92 81       	ldd	r25, Z+2	; 0x02
    12e8:	83 e0       	ldi	r24, 0x03	; 3
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	22 e0       	ldi	r18, 0x02	; 2
    12ee:	2a 83       	std	Y+2, r18	; 0x02
    12f0:	1b 82       	std	Y+3, r1	; 0x03
    12f2:	9c 83       	std	Y+4, r25	; 0x04
	CHconfig_t EINT1_pin = {portD , pin3 , input , EINT_config->internal_resistor};
    12f4:	8d 83       	std	Y+5, r24	; 0x05
    12f6:	8e 83       	std	Y+6, r24	; 0x06
    12f8:	1f 82       	std	Y+7, r1	; 0x07
    12fa:	98 87       	std	Y+8, r25	; 0x08
	CHconfig_t EINT2_pin = {portB , pin2 , input , EINT_config->internal_resistor};
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 87       	std	Y+9, r24	; 0x09
    1300:	2a 87       	std	Y+10, r18	; 0x0a
    1302:	1b 86       	std	Y+11, r1	; 0x0b
    1304:	9c 87       	std	Y+12, r25	; 0x0c
	switch(EINT_config->ch){
    1306:	80 81       	ld	r24, Z
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	a9 f1       	breq	.+106    	; 0x1376 <EINT_init+0xac>
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	f0 f0       	brcs	.+60     	; 0x134c <EINT_init+0x82>
    1310:	82 30       	cpi	r24, 0x02	; 2
    1312:	89 f4       	brne	.+34     	; 0x1336 <EINT_init+0x6c>
		_MCUCR._ISC1 = EINT_config->INT_SC;
		_GICR._INT1 = 1;
		g_INT1_functionPtr = (volatile void(*)(void))EINT_config->INT_handler;
		break;
	case E_INT2:
		DIO_initChannel(&EINT2_pin);	/*configure pin as input and configure pull up / pull down resistor*/
    1314:	ce 01       	movw	r24, r28
    1316:	09 96       	adiw	r24, 0x09	; 9
    1318:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_initChannel>
		if((EINT_config->INT_SC != falling) | (EINT_config->INT_SC != rising)){
			_MCUCSR._ISC2 = 1;	/*1=rising*/
    131c:	84 b7       	in	r24, 0x34	; 52
    131e:	80 64       	ori	r24, 0x40	; 64
    1320:	84 bf       	out	0x34, r24	; 52
		}
		else{
			_MCUCSR._ISC2 = EINT_config->INT_SC-2; 	/*0=falling 1=rising*/
		}
		_GICR._INT2 = 1;	/*enable INT0 request*/
    1322:	8b b7       	in	r24, 0x3b	; 59
    1324:	80 62       	ori	r24, 0x20	; 32
    1326:	8b bf       	out	0x3b, r24	; 59
		g_INT2_functionPtr = (volatile void(*)(void))EINT_config->INT_handler;
    1328:	f8 01       	movw	r30, r16
    132a:	83 81       	ldd	r24, Z+3	; 0x03
    132c:	94 81       	ldd	r25, Z+4	; 0x04
    132e:	90 93 77 02 	sts	0x0277, r25
    1332:	80 93 76 02 	sts	0x0276, r24
		break;
	}
}
    1336:	2c 96       	adiw	r28, 0x0c	; 12
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	08 95       	ret
	CHconfig_t EINT0_pin = {portD , pin2 , input , EINT_config->internal_resistor};
	CHconfig_t EINT1_pin = {portD , pin3 , input , EINT_config->internal_resistor};
	CHconfig_t EINT2_pin = {portB , pin2 , input , EINT_config->internal_resistor};
	switch(EINT_config->ch){
	case E_INT0:
		DIO_initChannel(&EINT0_pin);	/*configure pin as input and configure pull up / pull down resistor*/
    134c:	ce 01       	movw	r24, r28
    134e:	01 96       	adiw	r24, 0x01	; 1
    1350:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_initChannel>
		_MCUCR._ISC0 = EINT_config->INT_SC;
    1354:	f8 01       	movw	r30, r16
    1356:	91 81       	ldd	r25, Z+1	; 0x01
    1358:	93 70       	andi	r25, 0x03	; 3
    135a:	85 b7       	in	r24, 0x35	; 53
    135c:	8c 7f       	andi	r24, 0xFC	; 252
    135e:	89 2b       	or	r24, r25
    1360:	85 bf       	out	0x35, r24	; 53
		_GICR._INT0 = 1;
    1362:	8b b7       	in	r24, 0x3b	; 59
    1364:	80 64       	ori	r24, 0x40	; 64
    1366:	8b bf       	out	0x3b, r24	; 59
		g_INT0_functionPtr = (volatile void(*)(void))EINT_config->INT_handler;
    1368:	83 81       	ldd	r24, Z+3	; 0x03
    136a:	94 81       	ldd	r25, Z+4	; 0x04
    136c:	90 93 79 02 	sts	0x0279, r25
    1370:	80 93 78 02 	sts	0x0278, r24
    1374:	e0 cf       	rjmp	.-64     	; 0x1336 <EINT_init+0x6c>
		break;
	case E_INT1:
		DIO_initChannel(&EINT1_pin);	/*configure pin as input and configure pull up / pull down resistor*/
    1376:	ce 01       	movw	r24, r28
    1378:	05 96       	adiw	r24, 0x05	; 5
    137a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_initChannel>
		_MCUCR._ISC1 = EINT_config->INT_SC;
    137e:	f8 01       	movw	r30, r16
    1380:	91 81       	ldd	r25, Z+1	; 0x01
    1382:	93 70       	andi	r25, 0x03	; 3
    1384:	99 0f       	add	r25, r25
    1386:	99 0f       	add	r25, r25
    1388:	85 b7       	in	r24, 0x35	; 53
    138a:	83 7f       	andi	r24, 0xF3	; 243
    138c:	89 2b       	or	r24, r25
    138e:	85 bf       	out	0x35, r24	; 53
		_GICR._INT1 = 1;
    1390:	8b b7       	in	r24, 0x3b	; 59
    1392:	80 68       	ori	r24, 0x80	; 128
    1394:	8b bf       	out	0x3b, r24	; 59
		g_INT1_functionPtr = (volatile void(*)(void))EINT_config->INT_handler;
    1396:	83 81       	ldd	r24, Z+3	; 0x03
    1398:	94 81       	ldd	r25, Z+4	; 0x04
    139a:	90 93 75 02 	sts	0x0275, r25
    139e:	80 93 74 02 	sts	0x0274, r24
    13a2:	c9 cf       	rjmp	.-110    	; 0x1336 <EINT_init+0x6c>

000013a4 <DIO_initChannel>:
 *      Author: SALAH
 */

#include "dio.h"

void  DIO_initChannel(const CHconfig_t * pin_config){
    13a4:	fc 01       	movw	r30, r24
	switch (pin_config->PORT){
    13a6:	80 81       	ld	r24, Z
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <DIO_initChannel+0xa>
    13ac:	4c c0       	rjmp	.+152    	; 0x1446 <DIO_initChannel+0xa2>
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	30 f0       	brcs	.+12     	; 0x13be <DIO_initChannel+0x1a>
    13b2:	82 30       	cpi	r24, 0x02	; 2
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <DIO_initChannel+0x14>
    13b6:	69 c0       	rjmp	.+210    	; 0x148a <DIO_initChannel+0xe6>
    13b8:	83 30       	cpi	r24, 0x03	; 3
    13ba:	19 f1       	breq	.+70     	; 0x1402 <DIO_initChannel+0x5e>
    13bc:	08 95       	ret
	case portA:			/*configure pin in port A*/
		WRITE_BIT(DDRA , pin_config->channel_num , pin_config->direction); 				/*configure direction of pin either input or output*/
    13be:	4a b3       	in	r20, 0x1a	; 26
    13c0:	51 81       	ldd	r21, Z+1	; 0x01
    13c2:	21 e0       	ldi	r18, 0x01	; 1
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	05 2e       	mov	r0, r21
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <DIO_initChannel+0x2a>
    13ca:	22 0f       	add	r18, r18
    13cc:	33 1f       	adc	r19, r19
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <DIO_initChannel+0x26>
    13d2:	20 95       	com	r18
    13d4:	42 23       	and	r20, r18
    13d6:	82 81       	ldd	r24, Z+2	; 0x02
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	05 2e       	mov	r0, r21
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <DIO_initChannel+0x3e>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <DIO_initChannel+0x3a>
    13e6:	48 2b       	or	r20, r24
    13e8:	4a bb       	out	0x1a, r20	; 26
		WRITE_BIT(PORTA , pin_config->channel_num , pin_config->internal_resistor);		/*configure the internal resistor connection [none , internal_pullup]*/
    13ea:	8b b3       	in	r24, 0x1b	; 27
    13ec:	28 23       	and	r18, r24
    13ee:	83 81       	ldd	r24, Z+3	; 0x03
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_initChannel+0x54>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	5a 95       	dec	r21
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_initChannel+0x50>
    13fc:	28 2b       	or	r18, r24
    13fe:	2b bb       	out	0x1b, r18	; 27
    1400:	08 95       	ret
	case portC:
		WRITE_BIT(DDRC , pin_config->channel_num , pin_config->direction);
		WRITE_BIT(PORTC , pin_config->channel_num , pin_config->internal_resistor);
		break;
	case portD:
		WRITE_BIT(DDRD , pin_config->channel_num , pin_config->direction);
    1402:	41 b3       	in	r20, 0x11	; 17
    1404:	51 81       	ldd	r21, Z+1	; 0x01
    1406:	21 e0       	ldi	r18, 0x01	; 1
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	05 2e       	mov	r0, r21
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO_initChannel+0x6e>
    140e:	22 0f       	add	r18, r18
    1410:	33 1f       	adc	r19, r19
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <DIO_initChannel+0x6a>
    1416:	20 95       	com	r18
    1418:	42 23       	and	r20, r18
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	05 2e       	mov	r0, r21
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_initChannel+0x82>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_initChannel+0x7e>
    142a:	48 2b       	or	r20, r24
    142c:	41 bb       	out	0x11, r20	; 17
		WRITE_BIT(PORTD , pin_config->channel_num , pin_config->internal_resistor);
    142e:	82 b3       	in	r24, 0x12	; 18
    1430:	28 23       	and	r18, r24
    1432:	83 81       	ldd	r24, Z+3	; 0x03
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_initChannel+0x98>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	5a 95       	dec	r21
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_initChannel+0x94>
    1440:	28 2b       	or	r18, r24
    1442:	22 bb       	out	0x12, r18	; 18
    1444:	08 95       	ret
	case portA:			/*configure pin in port A*/
		WRITE_BIT(DDRA , pin_config->channel_num , pin_config->direction); 				/*configure direction of pin either input or output*/
		WRITE_BIT(PORTA , pin_config->channel_num , pin_config->internal_resistor);		/*configure the internal resistor connection [none , internal_pullup]*/
		break;
	case portB:
		WRITE_BIT(DDRB , pin_config->channel_num , pin_config->direction);
    1446:	47 b3       	in	r20, 0x17	; 23
    1448:	51 81       	ldd	r21, Z+1	; 0x01
    144a:	21 e0       	ldi	r18, 0x01	; 1
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	05 2e       	mov	r0, r21
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_initChannel+0xb2>
    1452:	22 0f       	add	r18, r18
    1454:	33 1f       	adc	r19, r19
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_initChannel+0xae>
    145a:	20 95       	com	r18
    145c:	42 23       	and	r20, r18
    145e:	82 81       	ldd	r24, Z+2	; 0x02
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	05 2e       	mov	r0, r21
    1464:	02 c0       	rjmp	.+4      	; 0x146a <DIO_initChannel+0xc6>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	0a 94       	dec	r0
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <DIO_initChannel+0xc2>
    146e:	48 2b       	or	r20, r24
    1470:	47 bb       	out	0x17, r20	; 23
		WRITE_BIT(PORTB , pin_config->channel_num , pin_config->internal_resistor);
    1472:	88 b3       	in	r24, 0x18	; 24
    1474:	28 23       	and	r18, r24
    1476:	83 81       	ldd	r24, Z+3	; 0x03
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <DIO_initChannel+0xdc>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	5a 95       	dec	r21
    1482:	e2 f7       	brpl	.-8      	; 0x147c <DIO_initChannel+0xd8>
    1484:	28 2b       	or	r18, r24
    1486:	28 bb       	out	0x18, r18	; 24
    1488:	08 95       	ret
		break;
	case portC:
		WRITE_BIT(DDRC , pin_config->channel_num , pin_config->direction);
    148a:	44 b3       	in	r20, 0x14	; 20
    148c:	51 81       	ldd	r21, Z+1	; 0x01
    148e:	21 e0       	ldi	r18, 0x01	; 1
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	05 2e       	mov	r0, r21
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_initChannel+0xf6>
    1496:	22 0f       	add	r18, r18
    1498:	33 1f       	adc	r19, r19
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_initChannel+0xf2>
    149e:	20 95       	com	r18
    14a0:	42 23       	and	r20, r18
    14a2:	82 81       	ldd	r24, Z+2	; 0x02
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	05 2e       	mov	r0, r21
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_initChannel+0x10a>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <DIO_initChannel+0x106>
    14b2:	48 2b       	or	r20, r24
    14b4:	44 bb       	out	0x14, r20	; 20
		WRITE_BIT(PORTC , pin_config->channel_num , pin_config->internal_resistor);
    14b6:	85 b3       	in	r24, 0x15	; 21
    14b8:	28 23       	and	r18, r24
    14ba:	83 81       	ldd	r24, Z+3	; 0x03
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_initChannel+0x120>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	5a 95       	dec	r21
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_initChannel+0x11c>
    14c8:	28 2b       	or	r18, r24
    14ca:	25 bb       	out	0x15, r18	; 21
    14cc:	08 95       	ret

000014ce <DIO_writeChannel>:
	default:
		return;
		break;
	}
}
void  DIO_writeChannel(const CHconfig_t * pin_config , uint8 value){
    14ce:	fc 01       	movw	r30, r24
	if(pin_config->direction == input){
    14d0:	82 81       	ldd	r24, Z+2	; 0x02
    14d2:	88 23       	and	r24, r24
    14d4:	51 f0       	breq	.+20     	; 0x14ea <DIO_writeChannel+0x1c>
		return ;
	}
	switch (pin_config->PORT){
    14d6:	80 81       	ld	r24, Z
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	f1 f0       	breq	.+60     	; 0x1518 <DIO_writeChannel+0x4a>
    14dc:	81 30       	cpi	r24, 0x01	; 1
    14de:	30 f0       	brcs	.+12     	; 0x14ec <DIO_writeChannel+0x1e>
    14e0:	82 30       	cpi	r24, 0x02	; 2
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <DIO_writeChannel+0x18>
    14e4:	45 c0       	rjmp	.+138    	; 0x1570 <DIO_writeChannel+0xa2>
    14e6:	83 30       	cpi	r24, 0x03	; 3
    14e8:	69 f1       	breq	.+90     	; 0x1544 <DIO_writeChannel+0x76>
    14ea:	08 95       	ret
	case portA:
		WRITE_BIT(PORTA , pin_config->channel_num , value);
    14ec:	5b b3       	in	r21, 0x1b	; 27
    14ee:	41 81       	ldd	r20, Z+1	; 0x01
    14f0:	26 2f       	mov	r18, r22
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	04 2e       	mov	r0, r20
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_writeChannel+0x2e>
    14f8:	22 0f       	add	r18, r18
    14fa:	33 1f       	adc	r19, r19
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DIO_writeChannel+0x2a>
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	02 c0       	rjmp	.+4      	; 0x150a <DIO_writeChannel+0x3c>
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	4a 95       	dec	r20
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <DIO_writeChannel+0x38>
    150e:	80 95       	com	r24
    1510:	85 23       	and	r24, r21
    1512:	82 2b       	or	r24, r18
    1514:	8b bb       	out	0x1b, r24	; 27
    1516:	08 95       	ret
		break;
	case portB:
		WRITE_BIT(PORTB , pin_config->channel_num , value);
    1518:	58 b3       	in	r21, 0x18	; 24
    151a:	41 81       	ldd	r20, Z+1	; 0x01
    151c:	26 2f       	mov	r18, r22
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	04 2e       	mov	r0, r20
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <DIO_writeChannel+0x5a>
    1524:	22 0f       	add	r18, r18
    1526:	33 1f       	adc	r19, r19
    1528:	0a 94       	dec	r0
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <DIO_writeChannel+0x56>
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <DIO_writeChannel+0x68>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	4a 95       	dec	r20
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <DIO_writeChannel+0x64>
    153a:	80 95       	com	r24
    153c:	85 23       	and	r24, r21
    153e:	82 2b       	or	r24, r18
    1540:	88 bb       	out	0x18, r24	; 24
    1542:	08 95       	ret
		break;
	case portC:
		WRITE_BIT(PORTC , pin_config->channel_num , value);
		break;
	case portD:
		WRITE_BIT(PORTD , pin_config->channel_num , value);
    1544:	52 b3       	in	r21, 0x12	; 18
    1546:	41 81       	ldd	r20, Z+1	; 0x01
    1548:	26 2f       	mov	r18, r22
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	04 2e       	mov	r0, r20
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <DIO_writeChannel+0x86>
    1550:	22 0f       	add	r18, r18
    1552:	33 1f       	adc	r19, r19
    1554:	0a 94       	dec	r0
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <DIO_writeChannel+0x82>
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <DIO_writeChannel+0x94>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	4a 95       	dec	r20
    1564:	e2 f7       	brpl	.-8      	; 0x155e <DIO_writeChannel+0x90>
    1566:	80 95       	com	r24
    1568:	85 23       	and	r24, r21
    156a:	82 2b       	or	r24, r18
    156c:	82 bb       	out	0x12, r24	; 18
    156e:	08 95       	ret
		break;
	case portB:
		WRITE_BIT(PORTB , pin_config->channel_num , value);
		break;
	case portC:
		WRITE_BIT(PORTC , pin_config->channel_num , value);
    1570:	55 b3       	in	r21, 0x15	; 21
    1572:	41 81       	ldd	r20, Z+1	; 0x01
    1574:	26 2f       	mov	r18, r22
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	04 2e       	mov	r0, r20
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_writeChannel+0xb2>
    157c:	22 0f       	add	r18, r18
    157e:	33 1f       	adc	r19, r19
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_writeChannel+0xae>
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_writeChannel+0xc0>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	4a 95       	dec	r20
    1590:	e2 f7       	brpl	.-8      	; 0x158a <DIO_writeChannel+0xbc>
    1592:	80 95       	com	r24
    1594:	85 23       	and	r24, r21
    1596:	82 2b       	or	r24, r18
    1598:	85 bb       	out	0x15, r24	; 21
    159a:	08 95       	ret

0000159c <DIO_readChannel>:
	case portD:
		WRITE_BIT(PORTD , pin_config->channel_num , value);
		break;
	}
}
uint8 DIO_readChannel(const CHconfig_t * pin_config){
    159c:	fc 01       	movw	r30, r24
	switch (pin_config->PORT){
    159e:	80 81       	ld	r24, Z
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	81 f1       	breq	.+96     	; 0x1604 <DIO_readChannel+0x68>
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	a0 f4       	brcc	.+40     	; 0x15d0 <DIO_readChannel+0x34>
	case portA:
		return READ_BIT(PINA , pin_config->channel_num );
    15a8:	89 b3       	in	r24, 0x19	; 25
		break;
	case portB:
		return READ_BIT(PINB , pin_config->channel_num );
		break;
	case portC:
		return READ_BIT(PINC , pin_config->channel_num );
    15aa:	41 81       	ldd	r20, Z+1	; 0x01
    15ac:	21 e0       	ldi	r18, 0x01	; 1
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	04 2e       	mov	r0, r20
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <DIO_readChannel+0x1c>
    15b4:	22 0f       	add	r18, r18
    15b6:	33 1f       	adc	r19, r19
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <DIO_readChannel+0x18>
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	28 23       	and	r18, r24
    15c0:	39 23       	and	r19, r25
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_readChannel+0x2c>
    15c4:	35 95       	asr	r19
    15c6:	27 95       	ror	r18
    15c8:	4a 95       	dec	r20
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <DIO_readChannel+0x28>
    15cc:	82 2f       	mov	r24, r18
    15ce:	08 95       	ret
		WRITE_BIT(PORTD , pin_config->channel_num , value);
		break;
	}
}
uint8 DIO_readChannel(const CHconfig_t * pin_config){
	switch (pin_config->PORT){
    15d0:	82 30       	cpi	r24, 0x02	; 2
    15d2:	d1 f0       	breq	.+52     	; 0x1608 <DIO_readChannel+0x6c>
    15d4:	83 30       	cpi	r24, 0x03	; 3
    15d6:	11 f0       	breq	.+4      	; 0x15dc <DIO_readChannel+0x40>
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	08 95       	ret
		break;
	case portC:
		return READ_BIT(PINC , pin_config->channel_num );
		break;
	case portD:
		return READ_BIT(PIND , pin_config->channel_num );
    15dc:	80 b3       	in	r24, 0x10	; 16
    15de:	41 81       	ldd	r20, Z+1	; 0x01
    15e0:	21 e0       	ldi	r18, 0x01	; 1
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	04 2e       	mov	r0, r20
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_readChannel+0x50>
    15e8:	22 0f       	add	r18, r18
    15ea:	33 1f       	adc	r19, r19
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_readChannel+0x4c>
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	28 23       	and	r18, r24
    15f4:	39 23       	and	r19, r25
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <DIO_readChannel+0x60>
    15f8:	35 95       	asr	r19
    15fa:	27 95       	ror	r18
    15fc:	4a 95       	dec	r20
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <DIO_readChannel+0x5c>
    1600:	82 2f       	mov	r24, r18
		break;
	}
	return 0;
}
    1602:	08 95       	ret
	switch (pin_config->PORT){
	case portA:
		return READ_BIT(PINA , pin_config->channel_num );
		break;
	case portB:
		return READ_BIT(PINB , pin_config->channel_num );
    1604:	86 b3       	in	r24, 0x16	; 22
    1606:	d1 cf       	rjmp	.-94     	; 0x15aa <DIO_readChannel+0xe>
		break;
	case portC:
		return READ_BIT(PINC , pin_config->channel_num );
    1608:	83 b3       	in	r24, 0x13	; 19
    160a:	cf cf       	rjmp	.-98     	; 0x15aa <DIO_readChannel+0xe>

0000160c <DIO_initPort>:
	return 0;
}



void  DIO_initPort(const PORTconfig_t * port_config){
    160c:	fc 01       	movw	r30, r24
	switch (port_config->PORT){
    160e:	80 81       	ld	r24, Z
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	b1 f1       	breq	.+108    	; 0x1680 <DIO_initPort+0x74>
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	30 f0       	brcs	.+12     	; 0x1624 <DIO_initPort+0x18>
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	09 f4       	brne	.+2      	; 0x161e <DIO_initPort+0x12>
    161c:	48 c0       	rjmp	.+144    	; 0x16ae <DIO_initPort+0xa2>
    161e:	83 30       	cpi	r24, 0x03	; 3
    1620:	c1 f0       	breq	.+48     	; 0x1652 <DIO_initPort+0x46>
    1622:	08 95       	ret
	case portA:
		DDRA  = (DDRA & ~(port_config->mask)) | ((port_config->direction * 255)         & port_config->mask);
    1624:	3a b3       	in	r19, 0x1a	; 26
    1626:	21 81       	ldd	r18, Z+1	; 0x01
    1628:	42 2f       	mov	r20, r18
    162a:	40 95       	com	r20
    162c:	82 81       	ldd	r24, Z+2	; 0x02
    162e:	5f ef       	ldi	r21, 0xFF	; 255
    1630:	85 9f       	mul	r24, r21
    1632:	c0 01       	movw	r24, r0
    1634:	11 24       	eor	r1, r1
    1636:	82 23       	and	r24, r18
    1638:	34 23       	and	r19, r20
    163a:	83 2b       	or	r24, r19
    163c:	8a bb       	out	0x1a, r24	; 26
		PORTA = (PORTA & ~(port_config->mask)) | ((port_config->internal_resistor * 255) & port_config->mask);
    163e:	3b b3       	in	r19, 0x1b	; 27
    1640:	83 81       	ldd	r24, Z+3	; 0x03
    1642:	85 9f       	mul	r24, r21
    1644:	c0 01       	movw	r24, r0
    1646:	11 24       	eor	r1, r1
    1648:	28 23       	and	r18, r24
    164a:	43 23       	and	r20, r19
    164c:	24 2b       	or	r18, r20
    164e:	2b bb       	out	0x1b, r18	; 27
    1650:	08 95       	ret
	case portC:
		DDRC  = (DDRC & ~(port_config->mask)) | ((port_config->direction * 255)         & port_config->mask);
		PORTC = (PORTC & ~(port_config->mask)) | ((port_config->internal_resistor * 255) & port_config->mask);
		break;
	case portD:
		DDRD  = (DDRD & ~(port_config->mask)) | ((port_config->direction * 255)         & port_config->mask);
    1652:	31 b3       	in	r19, 0x11	; 17
    1654:	21 81       	ldd	r18, Z+1	; 0x01
    1656:	42 2f       	mov	r20, r18
    1658:	40 95       	com	r20
    165a:	82 81       	ldd	r24, Z+2	; 0x02
    165c:	5f ef       	ldi	r21, 0xFF	; 255
    165e:	85 9f       	mul	r24, r21
    1660:	c0 01       	movw	r24, r0
    1662:	11 24       	eor	r1, r1
    1664:	82 23       	and	r24, r18
    1666:	34 23       	and	r19, r20
    1668:	83 2b       	or	r24, r19
    166a:	81 bb       	out	0x11, r24	; 17
		PORTD = (PORTD & ~(port_config->mask)) | ((port_config->internal_resistor * 255) & port_config->mask);
    166c:	32 b3       	in	r19, 0x12	; 18
    166e:	83 81       	ldd	r24, Z+3	; 0x03
    1670:	85 9f       	mul	r24, r21
    1672:	c0 01       	movw	r24, r0
    1674:	11 24       	eor	r1, r1
    1676:	28 23       	and	r18, r24
    1678:	43 23       	and	r20, r19
    167a:	24 2b       	or	r18, r20
    167c:	22 bb       	out	0x12, r18	; 18
    167e:	08 95       	ret
	case portA:
		DDRA  = (DDRA & ~(port_config->mask)) | ((port_config->direction * 255)         & port_config->mask);
		PORTA = (PORTA & ~(port_config->mask)) | ((port_config->internal_resistor * 255) & port_config->mask);
		break;
	case portB:
		DDRB  = (DDRB & ~(port_config->mask)) | ((port_config->direction * 255)         & port_config->mask);
    1680:	37 b3       	in	r19, 0x17	; 23
    1682:	21 81       	ldd	r18, Z+1	; 0x01
    1684:	42 2f       	mov	r20, r18
    1686:	40 95       	com	r20
    1688:	82 81       	ldd	r24, Z+2	; 0x02
    168a:	5f ef       	ldi	r21, 0xFF	; 255
    168c:	85 9f       	mul	r24, r21
    168e:	c0 01       	movw	r24, r0
    1690:	11 24       	eor	r1, r1
    1692:	82 23       	and	r24, r18
    1694:	34 23       	and	r19, r20
    1696:	83 2b       	or	r24, r19
    1698:	87 bb       	out	0x17, r24	; 23
		PORTB = (PORTB & ~(port_config->mask)) | ((port_config->internal_resistor * 255) & port_config->mask);
    169a:	38 b3       	in	r19, 0x18	; 24
    169c:	83 81       	ldd	r24, Z+3	; 0x03
    169e:	85 9f       	mul	r24, r21
    16a0:	c0 01       	movw	r24, r0
    16a2:	11 24       	eor	r1, r1
    16a4:	28 23       	and	r18, r24
    16a6:	43 23       	and	r20, r19
    16a8:	24 2b       	or	r18, r20
    16aa:	28 bb       	out	0x18, r18	; 24
    16ac:	08 95       	ret
		break;
	case portC:
		DDRC  = (DDRC & ~(port_config->mask)) | ((port_config->direction * 255)         & port_config->mask);
    16ae:	34 b3       	in	r19, 0x14	; 20
    16b0:	21 81       	ldd	r18, Z+1	; 0x01
    16b2:	42 2f       	mov	r20, r18
    16b4:	40 95       	com	r20
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	5f ef       	ldi	r21, 0xFF	; 255
    16ba:	85 9f       	mul	r24, r21
    16bc:	c0 01       	movw	r24, r0
    16be:	11 24       	eor	r1, r1
    16c0:	82 23       	and	r24, r18
    16c2:	34 23       	and	r19, r20
    16c4:	83 2b       	or	r24, r19
    16c6:	84 bb       	out	0x14, r24	; 20
		PORTC = (PORTC & ~(port_config->mask)) | ((port_config->internal_resistor * 255) & port_config->mask);
    16c8:	35 b3       	in	r19, 0x15	; 21
    16ca:	83 81       	ldd	r24, Z+3	; 0x03
    16cc:	85 9f       	mul	r24, r21
    16ce:	c0 01       	movw	r24, r0
    16d0:	11 24       	eor	r1, r1
    16d2:	28 23       	and	r18, r24
    16d4:	43 23       	and	r20, r19
    16d6:	24 2b       	or	r18, r20
    16d8:	25 bb       	out	0x15, r18	; 21
    16da:	08 95       	ret

000016dc <DIO_writePort>:
		DDRD  = (DDRD & ~(port_config->mask)) | ((port_config->direction * 255)         & port_config->mask);
		PORTD = (PORTD & ~(port_config->mask)) | ((port_config->internal_resistor * 255) & port_config->mask);
		break;
	}
}
void DIO_writePort(const PORTconfig_t * port_config , uint8 value){
    16dc:	fc 01       	movw	r30, r24
	switch (port_config->PORT){
    16de:	80 81       	ld	r24, Z
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	b9 f0       	breq	.+46     	; 0x1712 <DIO_writePort+0x36>
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	28 f0       	brcs	.+10     	; 0x16f2 <DIO_writePort+0x16>
    16e8:	82 30       	cpi	r24, 0x02	; 2
    16ea:	d9 f0       	breq	.+54     	; 0x1722 <DIO_writePort+0x46>
    16ec:	83 30       	cpi	r24, 0x03	; 3
    16ee:	49 f0       	breq	.+18     	; 0x1702 <DIO_writePort+0x26>
    16f0:	08 95       	ret
	case portA:
		PORTA = (PORTA & ~(port_config->mask)) | ((value) & port_config->mask);
    16f2:	9b b3       	in	r25, 0x1b	; 27
    16f4:	81 81       	ldd	r24, Z+1	; 0x01
    16f6:	68 23       	and	r22, r24
    16f8:	80 95       	com	r24
    16fa:	89 23       	and	r24, r25
    16fc:	86 2b       	or	r24, r22
    16fe:	8b bb       	out	0x1b, r24	; 27
    1700:	08 95       	ret
		break;
	case portC:
		PORTC = (PORTC & ~(port_config->mask)) | ((value) & port_config->mask);
		break;
	case portD:
		PORTD = (PORTD & ~(port_config->mask)) | ((value) & port_config->mask);
    1702:	92 b3       	in	r25, 0x12	; 18
    1704:	81 81       	ldd	r24, Z+1	; 0x01
    1706:	68 23       	and	r22, r24
    1708:	80 95       	com	r24
    170a:	89 23       	and	r24, r25
    170c:	86 2b       	or	r24, r22
    170e:	82 bb       	out	0x12, r24	; 18
    1710:	08 95       	ret
	switch (port_config->PORT){
	case portA:
		PORTA = (PORTA & ~(port_config->mask)) | ((value) & port_config->mask);
		break;
	case portB:
		PORTB = (PORTB & ~(port_config->mask)) | ((value) & port_config->mask);
    1712:	98 b3       	in	r25, 0x18	; 24
    1714:	81 81       	ldd	r24, Z+1	; 0x01
    1716:	68 23       	and	r22, r24
    1718:	80 95       	com	r24
    171a:	89 23       	and	r24, r25
    171c:	86 2b       	or	r24, r22
    171e:	88 bb       	out	0x18, r24	; 24
    1720:	08 95       	ret
		break;
	case portC:
		PORTC = (PORTC & ~(port_config->mask)) | ((value) & port_config->mask);
    1722:	95 b3       	in	r25, 0x15	; 21
    1724:	81 81       	ldd	r24, Z+1	; 0x01
    1726:	68 23       	and	r22, r24
    1728:	80 95       	com	r24
    172a:	89 23       	and	r24, r25
    172c:	86 2b       	or	r24, r22
    172e:	85 bb       	out	0x15, r24	; 21
    1730:	08 95       	ret

00001732 <DIO_PORTDirection>:
		PORTD = (PORTD & ~(port_config->mask)) | ((value) & port_config->mask);
		break;
	}
}

void DIO_PORTDirection(const PORTconfig_t * port_config , uint8 direction){
    1732:	fc 01       	movw	r30, r24
	switch (port_config->PORT){
    1734:	80 81       	ld	r24, Z
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	b9 f0       	breq	.+46     	; 0x1768 <DIO_PORTDirection+0x36>
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	28 f0       	brcs	.+10     	; 0x1748 <DIO_PORTDirection+0x16>
    173e:	82 30       	cpi	r24, 0x02	; 2
    1740:	d9 f0       	breq	.+54     	; 0x1778 <DIO_PORTDirection+0x46>
    1742:	83 30       	cpi	r24, 0x03	; 3
    1744:	49 f0       	breq	.+18     	; 0x1758 <DIO_PORTDirection+0x26>
    1746:	08 95       	ret
	case portA:
		DDRA = (DDRA & ~(port_config->mask)) | ((direction) & port_config->mask);
    1748:	9a b3       	in	r25, 0x1a	; 26
    174a:	81 81       	ldd	r24, Z+1	; 0x01
    174c:	68 23       	and	r22, r24
    174e:	80 95       	com	r24
    1750:	89 23       	and	r24, r25
    1752:	86 2b       	or	r24, r22
    1754:	8a bb       	out	0x1a, r24	; 26
    1756:	08 95       	ret
		break;
	case portC:
		DDRC = (DDRC & ~(port_config->mask)) | ((direction) & port_config->mask);
		break;
	case portD:
		DDRD = (DDRD & ~(port_config->mask)) | ((direction) & port_config->mask);
    1758:	91 b3       	in	r25, 0x11	; 17
    175a:	81 81       	ldd	r24, Z+1	; 0x01
    175c:	68 23       	and	r22, r24
    175e:	80 95       	com	r24
    1760:	89 23       	and	r24, r25
    1762:	86 2b       	or	r24, r22
    1764:	81 bb       	out	0x11, r24	; 17
    1766:	08 95       	ret
	switch (port_config->PORT){
	case portA:
		DDRA = (DDRA & ~(port_config->mask)) | ((direction) & port_config->mask);
		break;
	case portB:
		DDRB = (DDRB & ~(port_config->mask)) | ((direction) & port_config->mask);
    1768:	97 b3       	in	r25, 0x17	; 23
    176a:	81 81       	ldd	r24, Z+1	; 0x01
    176c:	68 23       	and	r22, r24
    176e:	80 95       	com	r24
    1770:	89 23       	and	r24, r25
    1772:	86 2b       	or	r24, r22
    1774:	87 bb       	out	0x17, r24	; 23
    1776:	08 95       	ret
		break;
	case portC:
		DDRC = (DDRC & ~(port_config->mask)) | ((direction) & port_config->mask);
    1778:	94 b3       	in	r25, 0x14	; 20
    177a:	81 81       	ldd	r24, Z+1	; 0x01
    177c:	68 23       	and	r22, r24
    177e:	80 95       	com	r24
    1780:	89 23       	and	r24, r25
    1782:	86 2b       	or	r24, r22
    1784:	84 bb       	out	0x14, r24	; 20
    1786:	08 95       	ret

00001788 <DIO_readPort>:
		DDRD = (DDRD & ~(port_config->mask)) | ((direction) & port_config->mask);
		break;
	}
}

uint8 DIO_readPort(const PORTconfig_t * port_config){
    1788:	fc 01       	movw	r30, r24
	switch (port_config->PORT){
    178a:	80 81       	ld	r24, Z
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	99 f0       	breq	.+38     	; 0x17b6 <DIO_readPort+0x2e>
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	28 f4       	brcc	.+10     	; 0x179e <DIO_readPort+0x16>
	case portA:
		return PINA & port_config->mask;
    1794:	29 b3       	in	r18, 0x19	; 25
    1796:	81 81       	ldd	r24, Z+1	; 0x01
    1798:	28 23       	and	r18, r24
	case portD:
		return PIND & port_config->mask;
		break;
	}
	return 0;
}
    179a:	82 2f       	mov	r24, r18
    179c:	08 95       	ret
		break;
	}
}

uint8 DIO_readPort(const PORTconfig_t * port_config){
	switch (port_config->PORT){
    179e:	82 30       	cpi	r24, 0x02	; 2
    17a0:	79 f0       	breq	.+30     	; 0x17c0 <DIO_readPort+0x38>
    17a2:	83 30       	cpi	r24, 0x03	; 3
    17a4:	19 f0       	breq	.+6      	; 0x17ac <DIO_readPort+0x24>
    17a6:	20 e0       	ldi	r18, 0x00	; 0
	case portD:
		return PIND & port_config->mask;
		break;
	}
	return 0;
}
    17a8:	82 2f       	mov	r24, r18
    17aa:	08 95       	ret
		break;
	case portC:
		return PINC & port_config->mask;
		break;
	case portD:
		return PIND & port_config->mask;
    17ac:	20 b3       	in	r18, 0x10	; 16
    17ae:	81 81       	ldd	r24, Z+1	; 0x01
    17b0:	28 23       	and	r18, r24
		break;
	}
	return 0;
}
    17b2:	82 2f       	mov	r24, r18
    17b4:	08 95       	ret
	switch (port_config->PORT){
	case portA:
		return PINA & port_config->mask;
		break;
	case portB:
		return PINB & port_config->mask;
    17b6:	26 b3       	in	r18, 0x16	; 22
    17b8:	81 81       	ldd	r24, Z+1	; 0x01
    17ba:	28 23       	and	r18, r24
	case portD:
		return PIND & port_config->mask;
		break;
	}
	return 0;
}
    17bc:	82 2f       	mov	r24, r18
    17be:	08 95       	ret
		break;
	case portB:
		return PINB & port_config->mask;
		break;
	case portC:
		return PINC & port_config->mask;
    17c0:	23 b3       	in	r18, 0x13	; 19
    17c2:	81 81       	ldd	r24, Z+1	; 0x01
    17c4:	28 23       	and	r18, r24
	case portD:
		return PIND & port_config->mask;
		break;
	}
	return 0;
}
    17c6:	82 2f       	mov	r24, r18
    17c8:	08 95       	ret

000017ca <PWM_start>:

#include "pwm.h"
/*
 * responsible for start a PWM signal with the specified frequency and duty cycle
 * */
void PWM_start(s_pwmConfig * a_pwm_config){
    17ca:	fc 01       	movw	r30, r24
	if(a_pwm_config->pwm_port == OC0){
    17cc:	80 81       	ld	r24, Z
    17ce:	88 23       	and	r24, r24
    17d0:	49 f0       	breq	.+18     	; 0x17e4 <PWM_start+0x1a>
		 * */
		TCCR0 = (1<<WGM00) | (1<<WGM01); /*configure timer1 to PWM mode*/
		TCCR0 = (TCCR0 & 0xCF) | ((a_pwm_config->pwm_mode & 0x03)<<4);
		TCCR0 = (TCCR0 & 0xF8) | (a_pwm_config->pwm_prescaler & 0x07);
	}
	else if(a_pwm_config->pwm_port == OC1A){
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	11 f1       	breq	.+68     	; 0x181a <PWM_start+0x50>
		CLEAR_BIT(TCCR1A , WGM10);
		SET_BIT(TCCR1B , WGM12);
		SET_BIT(TCCR1B , WGM13);
		TCCR1B = (TCCR1B & 0xF8) | (a_pwm_config->pwm_prescaler & 0x07);
	}
	else if(a_pwm_config->pwm_port == OC1B){
    17d6:	82 30       	cpi	r24, 0x02	; 2
    17d8:	09 f4       	brne	.+2      	; 0x17dc <PWM_start+0x12>
    17da:	62 c0       	rjmp	.+196    	; 0x18a0 <PWM_start+0xd6>
		CLEAR_BIT(TCCR1A , WGM10);
		SET_BIT(TCCR1B , WGM12);
		SET_BIT(TCCR1B , WGM13);
		TCCR1B = (TCCR1B & 0xF8) | (a_pwm_config->pwm_prescaler & 0x07);
	}
	else if(a_pwm_config->pwm_port == OC2){
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	09 f4       	brne	.+2      	; 0x17e2 <PWM_start+0x18>
    17e0:	44 c0       	rjmp	.+136    	; 0x186a <PWM_start+0xa0>
    17e2:	08 95       	ret
/*
 * responsible for start a PWM signal with the specified frequency and duty cycle
 * */
void PWM_start(s_pwmConfig * a_pwm_config){
	if(a_pwm_config->pwm_port == OC0){
		SET_BIT(DDRB , PB3); /*configure OC0 as output pin*/
    17e4:	bb 9a       	sbi	0x17, 3	; 23
		TCNT0 = 0; /*clear timer 0 counter register*/
    17e6:	12 be       	out	0x32, r1	; 50
		OCR0  = a_pwm_config->duty; /*set the duty cycle*/
    17e8:	84 81       	ldd	r24, Z+4	; 0x04
    17ea:	8c bf       	out	0x3c, r24	; 60
		 * 3- WGM01	1
		 * 2- CS02  	(CS02~0 = a_pwm_config -> pwm_prescaler)
		 * 1- CS01
		 * 0- CS00
		 * */
		TCCR0 = (1<<WGM00) | (1<<WGM01); /*configure timer1 to PWM mode*/
    17ec:	88 e4       	ldi	r24, 0x48	; 72
    17ee:	83 bf       	out	0x33, r24	; 51
		TCCR0 = (TCCR0 & 0xCF) | ((a_pwm_config->pwm_mode & 0x03)<<4);
    17f0:	23 b7       	in	r18, 0x33	; 51
    17f2:	86 81       	ldd	r24, Z+6	; 0x06
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	83 70       	andi	r24, 0x03	; 3
    17f8:	90 70       	andi	r25, 0x00	; 0
    17fa:	82 95       	swap	r24
    17fc:	92 95       	swap	r25
    17fe:	90 7f       	andi	r25, 0xF0	; 240
    1800:	98 27       	eor	r25, r24
    1802:	80 7f       	andi	r24, 0xF0	; 240
    1804:	98 27       	eor	r25, r24
    1806:	2f 7c       	andi	r18, 0xCF	; 207
    1808:	28 2b       	or	r18, r24
    180a:	23 bf       	out	0x33, r18	; 51
		TCCR0 = (TCCR0 & 0xF8) | (a_pwm_config->pwm_prescaler & 0x07);
    180c:	93 b7       	in	r25, 0x33	; 51
    180e:	81 81       	ldd	r24, Z+1	; 0x01
    1810:	87 70       	andi	r24, 0x07	; 7
    1812:	98 7f       	andi	r25, 0xF8	; 248
    1814:	89 2b       	or	r24, r25
    1816:	83 bf       	out	0x33, r24	; 51
    1818:	08 95       	ret
	}
	else if(a_pwm_config->pwm_port == OC1A){
		SET_BIT(DDRD , PD5); /*configure OC1A as output pin*/
    181a:	8d 9a       	sbi	0x11, 5	; 17
		ICR1  = a_pwm_config->freq;
    181c:	82 81       	ldd	r24, Z+2	; 0x02
    181e:	93 81       	ldd	r25, Z+3	; 0x03
    1820:	97 bd       	out	0x27, r25	; 39
    1822:	86 bd       	out	0x26, r24	; 38
		OCR1A = a_pwm_config->duty;
    1824:	84 81       	ldd	r24, Z+4	; 0x04
    1826:	95 81       	ldd	r25, Z+5	; 0x05
    1828:	9b bd       	out	0x2b, r25	; 43
    182a:	8a bd       	out	0x2a, r24	; 42
		/*set the compare mode for OC1A inverting / non */
		TCCR1A = (TCCR1A & 0x3F) | ((a_pwm_config->pwm_mode & 0x03)<<6);
    182c:	9f b5       	in	r25, 0x2f	; 47
    182e:	86 81       	ldd	r24, Z+6	; 0x06
    1830:	82 95       	swap	r24
    1832:	88 0f       	add	r24, r24
    1834:	88 0f       	add	r24, r24
    1836:	80 7c       	andi	r24, 0xC0	; 192
    1838:	9f 73       	andi	r25, 0x3F	; 63
    183a:	89 2b       	or	r24, r25
    183c:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TCCR1A,FOC1A);
    183e:	8f b5       	in	r24, 0x2f	; 47
    1840:	87 7f       	andi	r24, 0xF7	; 247
		SET_BIT(DDRD , PD4); /*configure OC1B as output pin*/
		ICR1  = a_pwm_config->freq;
		OCR1B = a_pwm_config->duty;
		/*set the compare mode for OC1A inverting / non */
		TCCR1A = (TCCR1A & 0xCF) | ((a_pwm_config->pwm_mode & 0x03)<<4);
		CLEAR_BIT(TCCR1A,FOC1B);
    1842:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1A , WGM11);
    1844:	8f b5       	in	r24, 0x2f	; 47
    1846:	82 60       	ori	r24, 0x02	; 2
    1848:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TCCR1A , WGM10);
    184a:	8f b5       	in	r24, 0x2f	; 47
    184c:	8e 7f       	andi	r24, 0xFE	; 254
    184e:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1B , WGM12);
    1850:	8e b5       	in	r24, 0x2e	; 46
    1852:	88 60       	ori	r24, 0x08	; 8
    1854:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B , WGM13);
    1856:	8e b5       	in	r24, 0x2e	; 46
    1858:	80 61       	ori	r24, 0x10	; 16
    185a:	8e bd       	out	0x2e, r24	; 46
		TCCR1B = (TCCR1B & 0xF8) | (a_pwm_config->pwm_prescaler & 0x07);
    185c:	9e b5       	in	r25, 0x2e	; 46
    185e:	81 81       	ldd	r24, Z+1	; 0x01
    1860:	87 70       	andi	r24, 0x07	; 7
    1862:	98 7f       	andi	r25, 0xF8	; 248
    1864:	89 2b       	or	r24, r25
    1866:	8e bd       	out	0x2e, r24	; 46
    1868:	08 95       	ret
	}
	else if(a_pwm_config->pwm_port == OC2){
		SET_BIT(DDRD , PD7); 	/*configure OC2 as output pin*/
    186a:	8f 9a       	sbi	0x11, 7	; 17
		TCNT2 = 0; 				/*clear timer 0 counter register*/
    186c:	14 bc       	out	0x24, r1	; 36
		OCR2  = a_pwm_config->duty; 		/*set the duty cycle*/
    186e:	84 81       	ldd	r24, Z+4	; 0x04
    1870:	83 bd       	out	0x23, r24	; 35
		TCCR2 = (1<<WGM20) | (1<<WGM21); 	/*configure timer1 to PWM mode*/
    1872:	88 e4       	ldi	r24, 0x48	; 72
    1874:	85 bd       	out	0x25, r24	; 37
		TCCR2 = (TCCR2 & 0xCF) | ((a_pwm_config->pwm_mode & 0x03)<<4);
    1876:	25 b5       	in	r18, 0x25	; 37
    1878:	86 81       	ldd	r24, Z+6	; 0x06
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	83 70       	andi	r24, 0x03	; 3
    187e:	90 70       	andi	r25, 0x00	; 0
    1880:	82 95       	swap	r24
    1882:	92 95       	swap	r25
    1884:	90 7f       	andi	r25, 0xF0	; 240
    1886:	98 27       	eor	r25, r24
    1888:	80 7f       	andi	r24, 0xF0	; 240
    188a:	98 27       	eor	r25, r24
    188c:	2f 7c       	andi	r18, 0xCF	; 207
    188e:	28 2b       	or	r18, r24
    1890:	25 bd       	out	0x25, r18	; 37
		TCCR2 = (TCCR2 & 0xF8) | (a_pwm_config->pwm_prescaler & 0x07);
    1892:	95 b5       	in	r25, 0x25	; 37
    1894:	81 81       	ldd	r24, Z+1	; 0x01
    1896:	87 70       	andi	r24, 0x07	; 7
    1898:	98 7f       	andi	r25, 0xF8	; 248
    189a:	89 2b       	or	r24, r25
    189c:	85 bd       	out	0x25, r24	; 37
    189e:	08 95       	ret
		SET_BIT(TCCR1B , WGM12);
		SET_BIT(TCCR1B , WGM13);
		TCCR1B = (TCCR1B & 0xF8) | (a_pwm_config->pwm_prescaler & 0x07);
	}
	else if(a_pwm_config->pwm_port == OC1B){
		SET_BIT(DDRD , PD4); /*configure OC1B as output pin*/
    18a0:	8c 9a       	sbi	0x11, 4	; 17
		ICR1  = a_pwm_config->freq;
    18a2:	82 81       	ldd	r24, Z+2	; 0x02
    18a4:	93 81       	ldd	r25, Z+3	; 0x03
    18a6:	97 bd       	out	0x27, r25	; 39
    18a8:	86 bd       	out	0x26, r24	; 38
		OCR1B = a_pwm_config->duty;
    18aa:	84 81       	ldd	r24, Z+4	; 0x04
    18ac:	95 81       	ldd	r25, Z+5	; 0x05
    18ae:	99 bd       	out	0x29, r25	; 41
    18b0:	88 bd       	out	0x28, r24	; 40
		/*set the compare mode for OC1A inverting / non */
		TCCR1A = (TCCR1A & 0xCF) | ((a_pwm_config->pwm_mode & 0x03)<<4);
    18b2:	2f b5       	in	r18, 0x2f	; 47
    18b4:	86 81       	ldd	r24, Z+6	; 0x06
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	83 70       	andi	r24, 0x03	; 3
    18ba:	90 70       	andi	r25, 0x00	; 0
    18bc:	82 95       	swap	r24
    18be:	92 95       	swap	r25
    18c0:	90 7f       	andi	r25, 0xF0	; 240
    18c2:	98 27       	eor	r25, r24
    18c4:	80 7f       	andi	r24, 0xF0	; 240
    18c6:	98 27       	eor	r25, r24
    18c8:	2f 7c       	andi	r18, 0xCF	; 207
    18ca:	28 2b       	or	r18, r24
    18cc:	2f bd       	out	0x2f, r18	; 47
		CLEAR_BIT(TCCR1A,FOC1B);
    18ce:	8f b5       	in	r24, 0x2f	; 47
    18d0:	8b 7f       	andi	r24, 0xFB	; 251
    18d2:	b7 cf       	rjmp	.-146    	; 0x1842 <PWM_start+0x78>

000018d4 <PWM_stop>:
}
/*
 * stop the timer1 PWM
 * */
void PWM_stop(e_pwmChannel ch){
	switch(ch){
    18d4:	83 30       	cpi	r24, 0x03	; 3
    18d6:	30 f4       	brcc	.+12     	; 0x18e4 <PWM_stop+0x10>
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	38 f0       	brcs	.+14     	; 0x18ea <PWM_stop+0x16>
	case OC0:
		TCCR0 = (TCCR0 & 0xF8) | (0x00);
		break;
	case OC1A:
	case OC1B:
		TCCR1B = (TCCR1B & 0xF8) | (0x00);
    18dc:	8e b5       	in	r24, 0x2e	; 46
    18de:	88 7f       	andi	r24, 0xF8	; 248
    18e0:	8e bd       	out	0x2e, r24	; 46
    18e2:	08 95       	ret
}
/*
 * stop the timer1 PWM
 * */
void PWM_stop(e_pwmChannel ch){
	switch(ch){
    18e4:	83 30       	cpi	r24, 0x03	; 3
    18e6:	29 f0       	breq	.+10     	; 0x18f2 <PWM_stop+0x1e>
    18e8:	08 95       	ret
	case OC0:
		TCCR0 = (TCCR0 & 0xF8) | (0x00);
    18ea:	83 b7       	in	r24, 0x33	; 51
    18ec:	88 7f       	andi	r24, 0xF8	; 248
    18ee:	83 bf       	out	0x33, r24	; 51
    18f0:	08 95       	ret
	case OC1A:
	case OC1B:
		TCCR1B = (TCCR1B & 0xF8) | (0x00);
		break;
	case OC2:
		TCCR2 = (TCCR2 & 0xF8) | (0x00);
    18f2:	85 b5       	in	r24, 0x25	; 37
    18f4:	88 7f       	andi	r24, 0xF8	; 248
    18f6:	85 bd       	out	0x25, r24	; 37
    18f8:	08 95       	ret

000018fa <PWM_change_DutyCycle>:
		break;
	}
}

void PWM_change_DutyCycle(e_pwmChannel ch , uint16 duty){
	switch(ch){
    18fa:	81 30       	cpi	r24, 0x01	; 1
    18fc:	59 f0       	breq	.+22     	; 0x1914 <PWM_change_DutyCycle+0x1a>
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	28 f0       	brcs	.+10     	; 0x190c <PWM_change_DutyCycle+0x12>
    1902:	82 30       	cpi	r24, 0x02	; 2
    1904:	51 f0       	breq	.+20     	; 0x191a <PWM_change_DutyCycle+0x20>
    1906:	83 30       	cpi	r24, 0x03	; 3
    1908:	19 f0       	breq	.+6      	; 0x1910 <PWM_change_DutyCycle+0x16>
    190a:	08 95       	ret
	case OC0:
		OCR0  = duty; /*set the duty cycle*/
    190c:	6c bf       	out	0x3c, r22	; 60
    190e:	08 95       	ret
		break;
	case OC1B:
		OCR1B = duty;
		break;
	case OC2:
		OCR2 = duty;
    1910:	63 bd       	out	0x23, r22	; 35
    1912:	08 95       	ret
	switch(ch){
	case OC0:
		OCR0  = duty; /*set the duty cycle*/
		break;
	case OC1A:
		OCR1A = duty;
    1914:	7b bd       	out	0x2b, r23	; 43
    1916:	6a bd       	out	0x2a, r22	; 42
    1918:	08 95       	ret
		break;
	case OC1B:
		OCR1B = duty;
    191a:	79 bd       	out	0x29, r23	; 41
    191c:	68 bd       	out	0x28, r22	; 40
    191e:	08 95       	ret

00001920 <MOTOR_changeDirection>:
	PWM_stop(motorConfig->enablePIN);
}



void MOTOR_changeDirection(motorConfig_t * motorConfig , motorDir direction){
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	ec 01       	movw	r28, r24
	if(direction == CW){
    1926:	66 23       	and	r22, r22
    1928:	29 f0       	breq	.+10     	; 0x1934 <MOTOR_changeDirection+0x14>
			DIO_writeChannel(&motorConfig->motorPIN0 , 0);
			DIO_writeChannel(&motorConfig->motorPIN1 , 1);
		}
		else if(direction == CCW){
    192a:	61 30       	cpi	r22, 0x01	; 1
    192c:	69 f0       	breq	.+26     	; 0x1948 <MOTOR_changeDirection+0x28>
			DIO_writeChannel(&motorConfig->motorPIN0 , 1);
			DIO_writeChannel(&motorConfig->motorPIN1 , 0);
		}
}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	08 95       	ret



void MOTOR_changeDirection(motorConfig_t * motorConfig , motorDir direction){
	if(direction == CW){
			DIO_writeChannel(&motorConfig->motorPIN0 , 0);
    1934:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
			DIO_writeChannel(&motorConfig->motorPIN1 , 1);
    1938:	ce 01       	movw	r24, r28
    193a:	04 96       	adiw	r24, 0x04	; 4
    193c:	61 e0       	ldi	r22, 0x01	; 1
    193e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
		}
		else if(direction == CCW){
			DIO_writeChannel(&motorConfig->motorPIN0 , 1);
			DIO_writeChannel(&motorConfig->motorPIN1 , 0);
		}
}
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	08 95       	ret
	if(direction == CW){
			DIO_writeChannel(&motorConfig->motorPIN0 , 0);
			DIO_writeChannel(&motorConfig->motorPIN1 , 1);
		}
		else if(direction == CCW){
			DIO_writeChannel(&motorConfig->motorPIN0 , 1);
    1948:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
			DIO_writeChannel(&motorConfig->motorPIN1 , 0);
    194c:	ce 01       	movw	r24, r28
    194e:	04 96       	adiw	r24, 0x04	; 4
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
		}
}
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	08 95       	ret

0000195c <MOTOR_stop>:
	s_pwmConfig motor = {motorConfig->enablePIN , CLK_8 , 255 , speed , non_inverting};
	PWM_start(&motor);
}

void MOTOR_stop(motorConfig_t * motorConfig){
	PWM_stop(motorConfig->enablePIN);
    195c:	fc 01       	movw	r30, r24
    195e:	80 85       	ldd	r24, Z+8	; 0x08
    1960:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <PWM_stop>
}
    1964:	08 95       	ret

00001966 <MOTOR_start>:
		DIO_writeChannel(&motorConfig->motorPIN1 , 0);
	}
}


void MOTOR_start(motorConfig_t * motorConfig , uint8 speed){
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	27 97       	sbiw	r28, 0x07	; 7
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
	s_pwmConfig motor = {motorConfig->enablePIN , CLK_8 , 255 , speed , non_inverting};
    197a:	fc 01       	movw	r30, r24
    197c:	80 85       	ldd	r24, Z+8	; 0x08
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	22 e0       	ldi	r18, 0x02	; 2
    1982:	2a 83       	std	Y+2, r18	; 0x02
    1984:	8f ef       	ldi	r24, 0xFF	; 255
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	9c 83       	std	Y+4, r25	; 0x04
    198a:	8b 83       	std	Y+3, r24	; 0x03
    198c:	6d 83       	std	Y+5, r22	; 0x05
    198e:	1e 82       	std	Y+6, r1	; 0x06
    1990:	2f 83       	std	Y+7, r18	; 0x07
	PWM_start(&motor);
    1992:	ce 01       	movw	r24, r28
    1994:	01 96       	adiw	r24, 0x01	; 1
    1996:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <PWM_start>
}
    199a:	27 96       	adiw	r28, 0x07	; 7
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <MOTOR_init>:
#include "../../MCAL/dio_module/dio.h"
#include "l293D.h"



void MOTOR_init(motorConfig_t * motorConfig){
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	ec 01       	movw	r28, r24
	DIO_initChannel(&motorConfig->motorPIN0);
    19b6:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_initChannel>
	DIO_initChannel(&motorConfig->motorPIN1);
    19ba:	8e 01       	movw	r16, r28
    19bc:	0c 5f       	subi	r16, 0xFC	; 252
    19be:	1f 4f       	sbci	r17, 0xFF	; 255
    19c0:	c8 01       	movw	r24, r16
    19c2:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_initChannel>
	if(motorConfig->direction == CW){
    19c6:	89 85       	ldd	r24, Y+9	; 0x09
    19c8:	88 23       	and	r24, r24
    19ca:	39 f0       	breq	.+14     	; 0x19da <MOTOR_init+0x2e>
		DIO_writeChannel(&motorConfig->motorPIN0 , 0);
		DIO_writeChannel(&motorConfig->motorPIN1 , 1);
	}
	else if(motorConfig->direction == CCW){
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	91 f0       	breq	.+36     	; 0x19f4 <MOTOR_init+0x48>
		DIO_writeChannel(&motorConfig->motorPIN0 , 1);
		DIO_writeChannel(&motorConfig->motorPIN1 , 0);
	}
}
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	08 95       	ret

void MOTOR_init(motorConfig_t * motorConfig){
	DIO_initChannel(&motorConfig->motorPIN0);
	DIO_initChannel(&motorConfig->motorPIN1);
	if(motorConfig->direction == CW){
		DIO_writeChannel(&motorConfig->motorPIN0 , 0);
    19da:	ce 01       	movw	r24, r28
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
		DIO_writeChannel(&motorConfig->motorPIN1 , 1);
    19e2:	c8 01       	movw	r24, r16
    19e4:	61 e0       	ldi	r22, 0x01	; 1
    19e6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
	}
	else if(motorConfig->direction == CCW){
		DIO_writeChannel(&motorConfig->motorPIN0 , 1);
		DIO_writeChannel(&motorConfig->motorPIN1 , 0);
	}
}
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	08 95       	ret
	if(motorConfig->direction == CW){
		DIO_writeChannel(&motorConfig->motorPIN0 , 0);
		DIO_writeChannel(&motorConfig->motorPIN1 , 1);
	}
	else if(motorConfig->direction == CCW){
		DIO_writeChannel(&motorConfig->motorPIN0 , 1);
    19f4:	ce 01       	movw	r24, r28
    19f6:	61 e0       	ldi	r22, 0x01	; 1
    19f8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
		DIO_writeChannel(&motorConfig->motorPIN1 , 0);
    19fc:	c8 01       	movw	r24, r16
    19fe:	60 e0       	ldi	r22, 0x00	; 0
    1a00:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
	}
}
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	08 95       	ret

00001a0e <LCD_characterDisplay>:
}

/*
 * send character (ascii of character) to be displayed on the LCD
 * */
void LCD_characterDisplay(uint8 a_character){
    1a0e:	af 92       	push	r10
    1a10:	bf 92       	push	r11
    1a12:	cf 92       	push	r12
    1a14:	df 92       	push	r13
    1a16:	ef 92       	push	r14
    1a18:	ff 92       	push	r15
    1a1a:	0f 93       	push	r16
    1a1c:	1f 93       	push	r17
    1a1e:	e8 2e       	mov	r14, r24
	DIO_writeChannel(&RS , 1);		/*RS = 1 to data*/
    1a20:	8e e2       	ldi	r24, 0x2E	; 46
    1a22:	92 e0       	ldi	r25, 0x02	; 2
    1a24:	61 e0       	ldi	r22, 0x01	; 1
    1a26:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    1a2a:	82 e3       	ldi	r24, 0x32	; 50
    1a2c:	92 e0       	ldi	r25, 0x02	; 2
    1a2e:	60 e0       	ldi	r22, 0x00	; 0
    1a30:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a34:	00 ed       	ldi	r16, 0xD0	; 208
    1a36:	17 e0       	ldi	r17, 0x07	; 7
    1a38:	c8 01       	movw	r24, r16
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <LCD_characterDisplay+0x2c>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1a3e:	26 e3       	ldi	r18, 0x36	; 54
    1a40:	c2 2e       	mov	r12, r18
    1a42:	22 e0       	ldi	r18, 0x02	; 2
    1a44:	d2 2e       	mov	r13, r18
    1a46:	c6 01       	movw	r24, r12
    1a48:	61 e0       	ldi	r22, 0x01	; 1
    1a4a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1a4e:	c8 01       	movw	r24, r16
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_characterDisplay+0x42>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_character & 0xf0));	/*write upper 4 bit of command*/
    1a54:	9a e2       	ldi	r25, 0x2A	; 42
    1a56:	a9 2e       	mov	r10, r25
    1a58:	92 e0       	ldi	r25, 0x02	; 2
    1a5a:	b9 2e       	mov	r11, r25
    1a5c:	6e 2d       	mov	r22, r14
    1a5e:	60 7f       	andi	r22, 0xF0	; 240
    1a60:	c5 01       	movw	r24, r10
    1a62:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1a66:	c8 01       	movw	r24, r16
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <LCD_characterDisplay+0x5a>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1a6c:	c6 01       	movw	r24, r12
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1a74:	c8 01       	movw	r24, r16
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <LCD_characterDisplay+0x68>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1a7a:	c6 01       	movw	r24, r12
    1a7c:	61 e0       	ldi	r22, 0x01	; 1
    1a7e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1a82:	c8 01       	movw	r24, r16
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <LCD_characterDisplay+0x76>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_character & 0x0f)<<4));	/*write lower 4 bit of command*/
    1a88:	ff 24       	eor	r15, r15
    1a8a:	e2 94       	swap	r14
    1a8c:	f2 94       	swap	r15
    1a8e:	80 ef       	ldi	r24, 0xF0	; 240
    1a90:	f8 22       	and	r15, r24
    1a92:	fe 24       	eor	r15, r14
    1a94:	e8 22       	and	r14, r24
    1a96:	fe 24       	eor	r15, r14
    1a98:	c5 01       	movw	r24, r10
    1a9a:	6e 2d       	mov	r22, r14
    1a9c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1aa0:	c8 01       	movw	r24, r16
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <LCD_characterDisplay+0x94>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1aa6:	c6 01       	movw	r24, r12
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0);  	/*enable pin = 0*/
#endif
#endif

}
    1aae:	1f 91       	pop	r17
    1ab0:	0f 91       	pop	r16
    1ab2:	ff 90       	pop	r15
    1ab4:	ef 90       	pop	r14
    1ab6:	df 90       	pop	r13
    1ab8:	cf 90       	pop	r12
    1aba:	bf 90       	pop	r11
    1abc:	af 90       	pop	r10
    1abe:	08 95       	ret

00001ac0 <LCD_sendCommand>:
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);	/*turn on the LCD and display cursor*/
}
/*
 * send 8 bit command to LCD (read LCD command section in lcd.h)
 * */
void LCD_sendCommand(uint8 a_command){
    1ac0:	af 92       	push	r10
    1ac2:	bf 92       	push	r11
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	e8 2e       	mov	r14, r24
	DIO_writeChannel(&RS , 0);		/*RS = 0 to command*/
    1ad2:	8e e2       	ldi	r24, 0x2E	; 46
    1ad4:	92 e0       	ldi	r25, 0x02	; 2
    1ad6:	60 e0       	ldi	r22, 0x00	; 0
    1ad8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    1adc:	82 e3       	ldi	r24, 0x32	; 50
    1ade:	92 e0       	ldi	r25, 0x02	; 2
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1ae6:	00 ed       	ldi	r16, 0xD0	; 208
    1ae8:	17 e0       	ldi	r17, 0x07	; 7
    1aea:	c8 01       	movw	r24, r16
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <LCD_sendCommand+0x2c>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1af0:	56 e3       	ldi	r21, 0x36	; 54
    1af2:	c5 2e       	mov	r12, r21
    1af4:	52 e0       	ldi	r21, 0x02	; 2
    1af6:	d5 2e       	mov	r13, r21
    1af8:	c6 01       	movw	r24, r12
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1b00:	c8 01       	movw	r24, r16
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <LCD_sendCommand+0x42>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_command & 0xf0));	/*write upper 4 bit of command*/
    1b06:	4a e2       	ldi	r20, 0x2A	; 42
    1b08:	a4 2e       	mov	r10, r20
    1b0a:	42 e0       	ldi	r20, 0x02	; 2
    1b0c:	b4 2e       	mov	r11, r20
    1b0e:	6e 2d       	mov	r22, r14
    1b10:	60 7f       	andi	r22, 0xF0	; 240
    1b12:	c5 01       	movw	r24, r10
    1b14:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1b18:	c8 01       	movw	r24, r16
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <LCD_sendCommand+0x5a>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1b1e:	c6 01       	movw	r24, r12
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1b26:	c8 01       	movw	r24, r16
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <LCD_sendCommand+0x68>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1b2c:	c6 01       	movw	r24, r12
    1b2e:	61 e0       	ldi	r22, 0x01	; 1
    1b30:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1b34:	c8 01       	movw	r24, r16
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <LCD_sendCommand+0x76>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_command & 0x0f)<<4));	/*write lower 4 bit of command*/
    1b3a:	ff 24       	eor	r15, r15
    1b3c:	e2 94       	swap	r14
    1b3e:	f2 94       	swap	r15
    1b40:	30 ef       	ldi	r19, 0xF0	; 240
    1b42:	f3 22       	and	r15, r19
    1b44:	fe 24       	eor	r15, r14
    1b46:	e3 22       	and	r14, r19
    1b48:	fe 24       	eor	r15, r14
    1b4a:	c5 01       	movw	r24, r10
    1b4c:	6e 2d       	mov	r22, r14
    1b4e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1b52:	c8 01       	movw	r24, r16
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <LCD_sendCommand+0x94>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1b58:	c6 01       	movw	r24, r12
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0);  	/*enable pin = 0*/
#endif
#endif

}
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	ff 90       	pop	r15
    1b66:	ef 90       	pop	r14
    1b68:	df 90       	pop	r13
    1b6a:	cf 90       	pop	r12
    1b6c:	bf 90       	pop	r11
    1b6e:	af 90       	pop	r10
    1b70:	08 95       	ret

00001b72 <LCD_displayString>:
#endif
#endif

}

void LCD_displayString(const uint8 *a_string){
    1b72:	ff 92       	push	r15
    1b74:	0f 93       	push	r16
    1b76:	1f 93       	push	r17
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	8c 01       	movw	r16, r24
	while(*a_string != '\0'){
    1b7e:	fc 01       	movw	r30, r24
    1b80:	f0 80       	ld	r15, Z
    1b82:	ff 20       	and	r15, r15
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <LCD_displayString+0x16>
    1b86:	4b c0       	rjmp	.+150    	; 0x1c1e <LCD_displayString+0xac>
    1b88:	c0 ed       	ldi	r28, 0xD0	; 208
    1b8a:	d7 e0       	ldi	r29, 0x07	; 7

/*
 * send character (ascii of character) to be displayed on the LCD
 * */
void LCD_characterDisplay(uint8 a_character){
	DIO_writeChannel(&RS , 1);		/*RS = 1 to data*/
    1b8c:	8e e2       	ldi	r24, 0x2E	; 46
    1b8e:	92 e0       	ldi	r25, 0x02	; 2
    1b90:	61 e0       	ldi	r22, 0x01	; 1
    1b92:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    1b96:	82 e3       	ldi	r24, 0x32	; 50
    1b98:	92 e0       	ldi	r25, 0x02	; 2
    1b9a:	60 e0       	ldi	r22, 0x00	; 0
    1b9c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <LCD_displayString+0x30>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1ba6:	86 e3       	ldi	r24, 0x36	; 54
    1ba8:	92 e0       	ldi	r25, 0x02	; 2
    1baa:	61 e0       	ldi	r22, 0x01	; 1
    1bac:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <LCD_displayString+0x40>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_character & 0xf0));	/*write upper 4 bit of command*/
    1bb6:	6f 2d       	mov	r22, r15
    1bb8:	60 7f       	andi	r22, 0xF0	; 240
    1bba:	8a e2       	ldi	r24, 0x2A	; 42
    1bbc:	92 e0       	ldi	r25, 0x02	; 2
    1bbe:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1bc2:	ce 01       	movw	r24, r28
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <LCD_displayString+0x52>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1bc8:	86 e3       	ldi	r24, 0x36	; 54
    1bca:	92 e0       	ldi	r25, 0x02	; 2
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <LCD_displayString+0x62>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1bd8:	86 e3       	ldi	r24, 0x36	; 54
    1bda:	92 e0       	ldi	r25, 0x02	; 2
    1bdc:	61 e0       	ldi	r22, 0x01	; 1
    1bde:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1be2:	ce 01       	movw	r24, r28
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_displayString+0x72>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_character & 0x0f)<<4));	/*write lower 4 bit of command*/
    1be8:	6f 2d       	mov	r22, r15
    1bea:	70 e0       	ldi	r23, 0x00	; 0
    1bec:	62 95       	swap	r22
    1bee:	72 95       	swap	r23
    1bf0:	70 7f       	andi	r23, 0xF0	; 240
    1bf2:	76 27       	eor	r23, r22
    1bf4:	60 7f       	andi	r22, 0xF0	; 240
    1bf6:	76 27       	eor	r23, r22
    1bf8:	8a e2       	ldi	r24, 0x2A	; 42
    1bfa:	92 e0       	ldi	r25, 0x02	; 2
    1bfc:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1c00:	ce 01       	movw	r24, r28
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <LCD_displayString+0x90>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1c06:	86 e3       	ldi	r24, 0x36	; 54
    1c08:	92 e0       	ldi	r25, 0x02	; 2
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
}

void LCD_displayString(const uint8 *a_string){
	while(*a_string != '\0'){
		LCD_characterDisplay(*a_string);
		a_string ++;
    1c10:	0f 5f       	subi	r16, 0xFF	; 255
    1c12:	1f 4f       	sbci	r17, 0xFF	; 255
#endif

}

void LCD_displayString(const uint8 *a_string){
	while(*a_string != '\0'){
    1c14:	f8 01       	movw	r30, r16
    1c16:	f0 80       	ld	r15, Z
    1c18:	ff 20       	and	r15, r15
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <LCD_displayString+0xac>
    1c1c:	b7 cf       	rjmp	.-146    	; 0x1b8c <LCD_displayString+0x1a>
		LCD_characterDisplay(*a_string);
		a_string ++;
	}
}
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	ff 90       	pop	r15
    1c28:	08 95       	ret

00001c2a <LCD_clearScreen>:


void LCD_clearScreen(void){
    1c2a:	cf 92       	push	r12
    1c2c:	df 92       	push	r13
    1c2e:	ef 92       	push	r14
    1c30:	ff 92       	push	r15
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
}
/*
 * send 8 bit command to LCD (read LCD command section in lcd.h)
 * */
void LCD_sendCommand(uint8 a_command){
	DIO_writeChannel(&RS , 0);		/*RS = 0 to command*/
    1c36:	8e e2       	ldi	r24, 0x2E	; 46
    1c38:	92 e0       	ldi	r25, 0x02	; 2
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    1c40:	82 e3       	ldi	r24, 0x32	; 50
    1c42:	92 e0       	ldi	r25, 0x02	; 2
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1c4a:	00 ed       	ldi	r16, 0xD0	; 208
    1c4c:	17 e0       	ldi	r17, 0x07	; 7
    1c4e:	c8 01       	movw	r24, r16
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	f1 f7       	brne	.-4      	; 0x1c50 <LCD_clearScreen+0x26>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1c54:	a6 e3       	ldi	r26, 0x36	; 54
    1c56:	ea 2e       	mov	r14, r26
    1c58:	a2 e0       	ldi	r26, 0x02	; 2
    1c5a:	fa 2e       	mov	r15, r26
    1c5c:	c7 01       	movw	r24, r14
    1c5e:	61 e0       	ldi	r22, 0x01	; 1
    1c60:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1c64:	c8 01       	movw	r24, r16
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <LCD_clearScreen+0x3c>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_command & 0xf0));	/*write upper 4 bit of command*/
    1c6a:	fa e2       	ldi	r31, 0x2A	; 42
    1c6c:	cf 2e       	mov	r12, r31
    1c6e:	f2 e0       	ldi	r31, 0x02	; 2
    1c70:	df 2e       	mov	r13, r31
    1c72:	c6 01       	movw	r24, r12
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1c7a:	c8 01       	movw	r24, r16
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <LCD_clearScreen+0x52>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1c80:	c7 01       	movw	r24, r14
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1c88:	c8 01       	movw	r24, r16
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <LCD_clearScreen+0x60>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1c8e:	c7 01       	movw	r24, r14
    1c90:	61 e0       	ldi	r22, 0x01	; 1
    1c92:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1c96:	c8 01       	movw	r24, r16
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <LCD_clearScreen+0x6e>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_command & 0x0f)<<4));	/*write lower 4 bit of command*/
    1c9c:	c6 01       	movw	r24, r12
    1c9e:	60 e1       	ldi	r22, 0x10	; 16
    1ca0:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1ca4:	c8 01       	movw	r24, r16
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <LCD_clearScreen+0x7c>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1caa:	c7 01       	movw	r24, r14
    1cac:	60 e0       	ldi	r22, 0x00	; 0
    1cae:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
}


void LCD_clearScreen(void){
	LCD_sendCommand(CLEAR_DISPLAY_SCREEN);
}
    1cb2:	1f 91       	pop	r17
    1cb4:	0f 91       	pop	r16
    1cb6:	ff 90       	pop	r15
    1cb8:	ef 90       	pop	r14
    1cba:	df 90       	pop	r13
    1cbc:	cf 90       	pop	r12
    1cbe:	08 95       	ret

00001cc0 <LCD_goTo>:
	}
	LCD_displayString(num_string);
}


void LCD_goTo(uint8 a_row , uint8 a_col){
    1cc0:	ff 92       	push	r15
    1cc2:	0f 93       	push	r16
    1cc4:	1f 93       	push	r17
	uint8 address;
	switch(a_row){
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <LCD_goTo+0xc>
    1cca:	57 c0       	rjmp	.+174    	; 0x1d7a <LCD_goTo+0xba>
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	08 f0       	brcs	.+2      	; 0x1cd2 <LCD_goTo+0x12>
    1cd0:	4b c0       	rjmp	.+150    	; 0x1d68 <LCD_goTo+0xa8>
	case 0:
		address = 128 + a_col;
    1cd2:	90 e8       	ldi	r25, 0x80	; 128
    1cd4:	f9 2e       	mov	r15, r25
    1cd6:	f6 0e       	add	r15, r22
}
/*
 * send 8 bit command to LCD (read LCD command section in lcd.h)
 * */
void LCD_sendCommand(uint8 a_command){
	DIO_writeChannel(&RS , 0);		/*RS = 0 to command*/
    1cd8:	8e e2       	ldi	r24, 0x2E	; 46
    1cda:	92 e0       	ldi	r25, 0x02	; 2
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    1ce2:	82 e3       	ldi	r24, 0x32	; 50
    1ce4:	92 e0       	ldi	r25, 0x02	; 2
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1cec:	00 ed       	ldi	r16, 0xD0	; 208
    1cee:	17 e0       	ldi	r17, 0x07	; 7
    1cf0:	c8 01       	movw	r24, r16
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <LCD_goTo+0x32>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1cf6:	86 e3       	ldi	r24, 0x36	; 54
    1cf8:	92 e0       	ldi	r25, 0x02	; 2
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1d00:	c8 01       	movw	r24, r16
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <LCD_goTo+0x42>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_command & 0xf0));	/*write upper 4 bit of command*/
    1d06:	6f 2d       	mov	r22, r15
    1d08:	60 7f       	andi	r22, 0xF0	; 240
    1d0a:	8a e2       	ldi	r24, 0x2A	; 42
    1d0c:	92 e0       	ldi	r25, 0x02	; 2
    1d0e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1d12:	c8 01       	movw	r24, r16
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <LCD_goTo+0x54>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1d18:	86 e3       	ldi	r24, 0x36	; 54
    1d1a:	92 e0       	ldi	r25, 0x02	; 2
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1d22:	c8 01       	movw	r24, r16
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <LCD_goTo+0x64>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1d28:	86 e3       	ldi	r24, 0x36	; 54
    1d2a:	92 e0       	ldi	r25, 0x02	; 2
    1d2c:	61 e0       	ldi	r22, 0x01	; 1
    1d2e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1d32:	c8 01       	movw	r24, r16
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <LCD_goTo+0x74>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_command & 0x0f)<<4));	/*write lower 4 bit of command*/
    1d38:	6f 2d       	mov	r22, r15
    1d3a:	70 e0       	ldi	r23, 0x00	; 0
    1d3c:	62 95       	swap	r22
    1d3e:	72 95       	swap	r23
    1d40:	70 7f       	andi	r23, 0xF0	; 240
    1d42:	76 27       	eor	r23, r22
    1d44:	60 7f       	andi	r22, 0xF0	; 240
    1d46:	76 27       	eor	r23, r22
    1d48:	8a e2       	ldi	r24, 0x2A	; 42
    1d4a:	92 e0       	ldi	r25, 0x02	; 2
    1d4c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1d50:	c8 01       	movw	r24, r16
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <LCD_goTo+0x92>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1d56:	86 e3       	ldi	r24, 0x36	; 54
    1d58:	92 e0       	ldi	r25, 0x02	; 2
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
#endif
	default :
		break;
	}
	LCD_sendCommand(address);
}
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	ff 90       	pop	r15
    1d66:	08 95       	ret
}


void LCD_goTo(uint8 a_row , uint8 a_col){
	uint8 address;
	switch(a_row){
    1d68:	82 30       	cpi	r24, 0x02	; 2
    1d6a:	59 f0       	breq	.+22     	; 0x1d82 <LCD_goTo+0xc2>
    1d6c:	83 30       	cpi	r24, 0x03	; 3
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <LCD_goTo+0xb2>
    1d70:	b3 cf       	rjmp	.-154    	; 0x1cd8 <LCD_goTo+0x18>
#if (LCD_ROW_NUM == 4)
	case 2:
		address = 128 + a_col + 0x10;
		break;
	case 3:
		address = 128 + a_col + 0x50;
    1d72:	10 ed       	ldi	r17, 0xD0	; 208
    1d74:	f1 2e       	mov	r15, r17
    1d76:	f6 0e       	add	r15, r22
    1d78:	af cf       	rjmp	.-162    	; 0x1cd8 <LCD_goTo+0x18>
	switch(a_row){
	case 0:
		address = 128 + a_col;
		break;
	case 1:
		address = 128 + a_col + 0x40;
    1d7a:	80 ec       	ldi	r24, 0xC0	; 192
    1d7c:	f8 2e       	mov	r15, r24
    1d7e:	f6 0e       	add	r15, r22
    1d80:	ab cf       	rjmp	.-170    	; 0x1cd8 <LCD_goTo+0x18>
		break;
#if (LCD_ROW_NUM == 4)
	case 2:
		address = 128 + a_col + 0x10;
    1d82:	00 e9       	ldi	r16, 0x90	; 144
    1d84:	f0 2e       	mov	r15, r16
    1d86:	f6 0e       	add	r15, r22
    1d88:	a7 cf       	rjmp	.-178    	; 0x1cd8 <LCD_goTo+0x18>

00001d8a <LCD_init>:
CHconfig_t RS     = RS_PIN;
CHconfig_t RW     = RW_PIN;
CHconfig_t E      = E_PIN;
CHconfig_t V0     = V0_PIN;

void LCD_init(void){
    1d8a:	8f 92       	push	r8
    1d8c:	9f 92       	push	r9
    1d8e:	af 92       	push	r10
    1d90:	bf 92       	push	r11
    1d92:	cf 92       	push	r12
    1d94:	df 92       	push	r13
    1d96:	ef 92       	push	r14
    1d98:	ff 92       	push	r15
    1d9a:	0f 93       	push	r16
    1d9c:	1f 93       	push	r17
	/*set the pins connected to LCD to output port*/
	DIO_initChannel(&RS);
    1d9e:	5e e2       	ldi	r21, 0x2E	; 46
    1da0:	a5 2e       	mov	r10, r21
    1da2:	52 e0       	ldi	r21, 0x02	; 2
    1da4:	b5 2e       	mov	r11, r21
    1da6:	c5 01       	movw	r24, r10
    1da8:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_initChannel>
	DIO_initChannel(&RW);
    1dac:	42 e3       	ldi	r20, 0x32	; 50
    1dae:	84 2e       	mov	r8, r20
    1db0:	42 e0       	ldi	r20, 0x02	; 2
    1db2:	94 2e       	mov	r9, r20
    1db4:	c4 01       	movw	r24, r8
    1db6:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_initChannel>
	DIO_initChannel(&E);
    1dba:	36 e3       	ldi	r19, 0x36	; 54
    1dbc:	e3 2e       	mov	r14, r19
    1dbe:	32 e0       	ldi	r19, 0x02	; 2
    1dc0:	f3 2e       	mov	r15, r19
    1dc2:	c7 01       	movw	r24, r14
    1dc4:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_initChannel>
	DIO_initPort(&data);
    1dc8:	2a e2       	ldi	r18, 0x2A	; 42
    1dca:	c2 2e       	mov	r12, r18
    1dcc:	22 e0       	ldi	r18, 0x02	; 2
    1dce:	d2 2e       	mov	r13, r18
    1dd0:	c6 01       	movw	r24, r12
    1dd2:	0e 94 06 0b 	call	0x160c	; 0x160c <DIO_initPort>
}
/*
 * send 8 bit command to LCD (read LCD command section in lcd.h)
 * */
void LCD_sendCommand(uint8 a_command){
	DIO_writeChannel(&RS , 0);		/*RS = 0 to command*/
    1dd6:	c5 01       	movw	r24, r10
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    1dde:	c4 01       	movw	r24, r8
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1de6:	00 ed       	ldi	r16, 0xD0	; 208
    1de8:	17 e0       	ldi	r17, 0x07	; 7
    1dea:	c8 01       	movw	r24, r16
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <LCD_init+0x62>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1df0:	c7 01       	movw	r24, r14
    1df2:	61 e0       	ldi	r22, 0x01	; 1
    1df4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1df8:	c8 01       	movw	r24, r16
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	f1 f7       	brne	.-4      	; 0x1dfa <LCD_init+0x70>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_command & 0xf0));	/*write upper 4 bit of command*/
    1dfe:	c6 01       	movw	r24, r12
    1e00:	60 e0       	ldi	r22, 0x00	; 0
    1e02:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1e06:	c8 01       	movw	r24, r16
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_init+0x7e>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1e0c:	c7 01       	movw	r24, r14
    1e0e:	60 e0       	ldi	r22, 0x00	; 0
    1e10:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1e14:	c8 01       	movw	r24, r16
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <LCD_init+0x8c>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1e1a:	c7 01       	movw	r24, r14
    1e1c:	61 e0       	ldi	r22, 0x01	; 1
    1e1e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1e22:	c8 01       	movw	r24, r16
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <LCD_init+0x9a>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_command & 0x0f)<<4));	/*write lower 4 bit of command*/
    1e28:	c6 01       	movw	r24, r12
    1e2a:	60 e2       	ldi	r22, 0x20	; 32
    1e2c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1e30:	c8 01       	movw	r24, r16
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <LCD_init+0xa8>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1e36:	c7 01       	movw	r24, r14
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
}
/*
 * send 8 bit command to LCD (read LCD command section in lcd.h)
 * */
void LCD_sendCommand(uint8 a_command){
	DIO_writeChannel(&RS , 0);		/*RS = 0 to command*/
    1e3e:	c5 01       	movw	r24, r10
    1e40:	60 e0       	ldi	r22, 0x00	; 0
    1e42:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    1e46:	c4 01       	movw	r24, r8
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1e4e:	c8 01       	movw	r24, r16
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <LCD_init+0xc6>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1e54:	c7 01       	movw	r24, r14
    1e56:	61 e0       	ldi	r22, 0x01	; 1
    1e58:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1e5c:	c8 01       	movw	r24, r16
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <LCD_init+0xd4>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_command & 0xf0));	/*write upper 4 bit of command*/
    1e62:	c6 01       	movw	r24, r12
    1e64:	60 e2       	ldi	r22, 0x20	; 32
    1e66:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1e6a:	c8 01       	movw	r24, r16
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <LCD_init+0xe2>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1e70:	c7 01       	movw	r24, r14
    1e72:	60 e0       	ldi	r22, 0x00	; 0
    1e74:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1e78:	c8 01       	movw	r24, r16
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <LCD_init+0xf0>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1e7e:	c7 01       	movw	r24, r14
    1e80:	61 e0       	ldi	r22, 0x01	; 1
    1e82:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1e86:	c8 01       	movw	r24, r16
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <LCD_init+0xfe>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_command & 0x0f)<<4));	/*write lower 4 bit of command*/
    1e8c:	c6 01       	movw	r24, r12
    1e8e:	60 e8       	ldi	r22, 0x80	; 128
    1e90:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1e94:	c8 01       	movw	r24, r16
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <LCD_init+0x10c>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1e9a:	c7 01       	movw	r24, r14
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
}
/*
 * send 8 bit command to LCD (read LCD command section in lcd.h)
 * */
void LCD_sendCommand(uint8 a_command){
	DIO_writeChannel(&RS , 0);		/*RS = 0 to command*/
    1ea2:	c5 01       	movw	r24, r10
    1ea4:	60 e0       	ldi	r22, 0x00	; 0
    1ea6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    1eaa:	c4 01       	movw	r24, r8
    1eac:	60 e0       	ldi	r22, 0x00	; 0
    1eae:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1eb2:	c8 01       	movw	r24, r16
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <LCD_init+0x12a>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1eb8:	c7 01       	movw	r24, r14
    1eba:	61 e0       	ldi	r22, 0x01	; 1
    1ebc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1ec0:	c8 01       	movw	r24, r16
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <LCD_init+0x138>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_command & 0xf0));	/*write upper 4 bit of command*/
    1ec6:	c6 01       	movw	r24, r12
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1ece:	c8 01       	movw	r24, r16
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <LCD_init+0x146>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1ed4:	c7 01       	movw	r24, r14
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1edc:	c8 01       	movw	r24, r16
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <LCD_init+0x154>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1ee2:	c7 01       	movw	r24, r14
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1eea:	c8 01       	movw	r24, r16
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <LCD_init+0x162>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_command & 0x0f)<<4));	/*write lower 4 bit of command*/
    1ef0:	c6 01       	movw	r24, r12
    1ef2:	60 ec       	ldi	r22, 0xC0	; 192
    1ef4:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1ef8:	c8 01       	movw	r24, r16
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <LCD_init+0x170>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1efe:	c7 01       	movw	r24, r14
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
#ifndef LCD_4BIT_MODE_UPPER_PORT
	LCD_sendCommand(_4BIT_2LINES);	/*set LCD to 8bit 2lines mode*/
#endif
#endif
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);	/*turn on the LCD and display cursor*/
}
    1f06:	1f 91       	pop	r17
    1f08:	0f 91       	pop	r16
    1f0a:	ff 90       	pop	r15
    1f0c:	ef 90       	pop	r14
    1f0e:	df 90       	pop	r13
    1f10:	cf 90       	pop	r12
    1f12:	bf 90       	pop	r11
    1f14:	af 90       	pop	r10
    1f16:	9f 90       	pop	r9
    1f18:	8f 90       	pop	r8
    1f1a:	08 95       	ret

00001f1c <LCD_displayNumber>:
	LCD_sendCommand(CLEAR_DISPLAY_SCREEN);
}



void LCD_displayNumber(uint16 a_num){
    1f1c:	cf 92       	push	r12
    1f1e:	df 92       	push	r13
    1f20:	ef 92       	push	r14
    1f22:	ff 92       	push	r15
    1f24:	0f 93       	push	r16
    1f26:	1f 93       	push	r17
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	60 97       	sbiw	r28, 0x10	; 16
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	8c 01       	movw	r16, r24
	if(a_num == 0){
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	79 f1       	breq	.+94     	; 0x1fa0 <LCD_displayNumber+0x84>
		LCD_characterDisplay('0');
	}
	uint8 num_string[16] = {'\0'};
    1f42:	7e 01       	movw	r14, r28
    1f44:	08 94       	sec
    1f46:	e1 1c       	adc	r14, r1
    1f48:	f1 1c       	adc	r15, r1
    1f4a:	80 e1       	ldi	r24, 0x10	; 16
    1f4c:	f7 01       	movw	r30, r14
    1f4e:	11 92       	st	Z+, r1
    1f50:	8a 95       	dec	r24
    1f52:	e9 f7       	brne	.-6      	; 0x1f4e <LCD_displayNumber+0x32>
    1f54:	41 e0       	ldi	r20, 0x01	; 1
	uint8 shift = 1;
	while(a_num > 0){
		int i=shift;
		for( ; i>=0 ; i--){
    1f56:	fe ef       	ldi	r31, 0xFE	; 254
    1f58:	cf 2e       	mov	r12, r31
    1f5a:	ff ef       	ldi	r31, 0xFF	; 255
    1f5c:	df 2e       	mov	r13, r31

void LCD_displayNumber(uint16 a_num){
	if(a_num == 0){
		LCD_characterDisplay('0');
	}
	uint8 num_string[16] = {'\0'};
    1f5e:	e4 2f       	mov	r30, r20
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	31 97       	sbiw	r30, 0x01	; 1
    1f64:	ee 0d       	add	r30, r14
    1f66:	ff 1d       	adc	r31, r15
	uint8 shift = 1;
	while(a_num > 0){
		int i=shift;
		for( ; i>=0 ; i--){
    1f68:	97 01       	movw	r18, r14
    1f6a:	2c 0d       	add	r18, r12
    1f6c:	3d 1d       	adc	r19, r13
			num_string[i] = num_string[i-1];
    1f6e:	80 81       	ld	r24, Z
    1f70:	81 83       	std	Z+1, r24	; 0x01
    1f72:	31 97       	sbiw	r30, 0x01	; 1
	}
	uint8 num_string[16] = {'\0'};
	uint8 shift = 1;
	while(a_num > 0){
		int i=shift;
		for( ; i>=0 ; i--){
    1f74:	e2 17       	cp	r30, r18
    1f76:	f3 07       	cpc	r31, r19
    1f78:	d1 f7       	brne	.-12     	; 0x1f6e <LCD_displayNumber+0x52>
			num_string[i] = num_string[i-1];
		}
		num_string[0] = (a_num % 10) + 48;
    1f7a:	c8 01       	movw	r24, r16
    1f7c:	6a e0       	ldi	r22, 0x0A	; 10
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <__udivmodhi4>
    1f84:	80 5d       	subi	r24, 0xD0	; 208
    1f86:	89 83       	std	Y+1, r24	; 0x01
		a_num /= 10;
    1f88:	c8 01       	movw	r24, r16
    1f8a:	6a e0       	ldi	r22, 0x0A	; 10
    1f8c:	70 e0       	ldi	r23, 0x00	; 0
    1f8e:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <__udivmodhi4>
    1f92:	8b 01       	movw	r16, r22
	if(a_num == 0){
		LCD_characterDisplay('0');
	}
	uint8 num_string[16] = {'\0'};
	uint8 shift = 1;
	while(a_num > 0){
    1f94:	61 15       	cp	r22, r1
    1f96:	71 05       	cpc	r23, r1
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <LCD_displayNumber+0x80>
    1f9a:	47 c0       	rjmp	.+142    	; 0x202a <LCD_displayNumber+0x10e>
		for( ; i>=0 ; i--){
			num_string[i] = num_string[i-1];
		}
		num_string[0] = (a_num % 10) + 48;
		a_num /= 10;
		shift++;
    1f9c:	4f 5f       	subi	r20, 0xFF	; 255
    1f9e:	df cf       	rjmp	.-66     	; 0x1f5e <LCD_displayNumber+0x42>

/*
 * send character (ascii of character) to be displayed on the LCD
 * */
void LCD_characterDisplay(uint8 a_character){
	DIO_writeChannel(&RS , 1);		/*RS = 1 to data*/
    1fa0:	8e e2       	ldi	r24, 0x2E	; 46
    1fa2:	92 e0       	ldi	r25, 0x02	; 2
    1fa4:	61 e0       	ldi	r22, 0x01	; 1
    1fa6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    1faa:	82 e3       	ldi	r24, 0x32	; 50
    1fac:	92 e0       	ldi	r25, 0x02	; 2
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1fb4:	00 ed       	ldi	r16, 0xD0	; 208
    1fb6:	17 e0       	ldi	r17, 0x07	; 7
    1fb8:	c8 01       	movw	r24, r16
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <LCD_displayNumber+0x9e>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1fbe:	86 e3       	ldi	r24, 0x36	; 54
    1fc0:	92 e0       	ldi	r25, 0x02	; 2
    1fc2:	61 e0       	ldi	r22, 0x01	; 1
    1fc4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1fc8:	c8 01       	movw	r24, r16
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <LCD_displayNumber+0xae>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_character & 0xf0));	/*write upper 4 bit of command*/
    1fce:	8a e2       	ldi	r24, 0x2A	; 42
    1fd0:	92 e0       	ldi	r25, 0x02	; 2
    1fd2:	60 e3       	ldi	r22, 0x30	; 48
    1fd4:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    1fd8:	c8 01       	movw	r24, r16
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_displayNumber+0xbe>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1fde:	86 e3       	ldi	r24, 0x36	; 54
    1fe0:	92 e0       	ldi	r25, 0x02	; 2
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1fe8:	c8 01       	movw	r24, r16
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <LCD_displayNumber+0xce>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1fee:	86 e3       	ldi	r24, 0x36	; 54
    1ff0:	92 e0       	ldi	r25, 0x02	; 2
    1ff2:	61 e0       	ldi	r22, 0x01	; 1
    1ff4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    1ff8:	c8 01       	movw	r24, r16
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <LCD_displayNumber+0xde>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_character & 0x0f)<<4));	/*write lower 4 bit of command*/
    1ffe:	8a e2       	ldi	r24, 0x2A	; 42
    2000:	92 e0       	ldi	r25, 0x02	; 2
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    2008:	c8 01       	movw	r24, r16
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_displayNumber+0xee>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    200e:	86 e3       	ldi	r24, 0x36	; 54
    2010:	92 e0       	ldi	r25, 0x02	; 2
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>

void LCD_displayNumber(uint16 a_num){
	if(a_num == 0){
		LCD_characterDisplay('0');
	}
	uint8 num_string[16] = {'\0'};
    2018:	7e 01       	movw	r14, r28
    201a:	08 94       	sec
    201c:	e1 1c       	adc	r14, r1
    201e:	f1 1c       	adc	r15, r1
    2020:	80 e1       	ldi	r24, 0x10	; 16
    2022:	f7 01       	movw	r30, r14
    2024:	11 92       	st	Z+, r1
    2026:	8a 95       	dec	r24
    2028:	e9 f7       	brne	.-6      	; 0x2024 <LCD_displayNumber+0x108>
#endif

}

void LCD_displayString(const uint8 *a_string){
	while(*a_string != '\0'){
    202a:	d9 80       	ldd	r13, Y+1	; 0x01
    202c:	dd 20       	and	r13, r13
    202e:	09 f4       	brne	.+2      	; 0x2032 <LCD_displayNumber+0x116>
    2030:	4c c0       	rjmp	.+152    	; 0x20ca <LCD_displayNumber+0x1ae>
    2032:	00 ed       	ldi	r16, 0xD0	; 208
    2034:	17 e0       	ldi	r17, 0x07	; 7

/*
 * send character (ascii of character) to be displayed on the LCD
 * */
void LCD_characterDisplay(uint8 a_character){
	DIO_writeChannel(&RS , 1);		/*RS = 1 to data*/
    2036:	8e e2       	ldi	r24, 0x2E	; 46
    2038:	92 e0       	ldi	r25, 0x02	; 2
    203a:	61 e0       	ldi	r22, 0x01	; 1
    203c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    2040:	82 e3       	ldi	r24, 0x32	; 50
    2042:	92 e0       	ldi	r25, 0x02	; 2
    2044:	60 e0       	ldi	r22, 0x00	; 0
    2046:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    204a:	c8 01       	movw	r24, r16
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_displayNumber+0x130>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    2050:	86 e3       	ldi	r24, 0x36	; 54
    2052:	92 e0       	ldi	r25, 0x02	; 2
    2054:	61 e0       	ldi	r22, 0x01	; 1
    2056:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    205a:	c8 01       	movw	r24, r16
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	f1 f7       	brne	.-4      	; 0x205c <LCD_displayNumber+0x140>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_character & 0xf0));	/*write upper 4 bit of command*/
    2060:	6d 2d       	mov	r22, r13
    2062:	60 7f       	andi	r22, 0xF0	; 240
    2064:	8a e2       	ldi	r24, 0x2A	; 42
    2066:	92 e0       	ldi	r25, 0x02	; 2
    2068:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    206c:	c8 01       	movw	r24, r16
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <LCD_displayNumber+0x152>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    2072:	86 e3       	ldi	r24, 0x36	; 54
    2074:	92 e0       	ldi	r25, 0x02	; 2
    2076:	60 e0       	ldi	r22, 0x00	; 0
    2078:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    207c:	c8 01       	movw	r24, r16
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <LCD_displayNumber+0x162>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    2082:	86 e3       	ldi	r24, 0x36	; 54
    2084:	92 e0       	ldi	r25, 0x02	; 2
    2086:	61 e0       	ldi	r22, 0x01	; 1
    2088:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    208c:	c8 01       	movw	r24, r16
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_displayNumber+0x172>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_character & 0x0f)<<4));	/*write lower 4 bit of command*/
    2092:	6d 2d       	mov	r22, r13
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	62 95       	swap	r22
    2098:	72 95       	swap	r23
    209a:	70 7f       	andi	r23, 0xF0	; 240
    209c:	76 27       	eor	r23, r22
    209e:	60 7f       	andi	r22, 0xF0	; 240
    20a0:	76 27       	eor	r23, r22
    20a2:	8a e2       	ldi	r24, 0x2A	; 42
    20a4:	92 e0       	ldi	r25, 0x02	; 2
    20a6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
    20aa:	c8 01       	movw	r24, r16
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <LCD_displayNumber+0x190>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    20b0:	86 e3       	ldi	r24, 0x36	; 54
    20b2:	92 e0       	ldi	r25, 0x02	; 2
    20b4:	60 e0       	ldi	r22, 0x00	; 0
    20b6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
}

void LCD_displayString(const uint8 *a_string){
	while(*a_string != '\0'){
		LCD_characterDisplay(*a_string);
		a_string ++;
    20ba:	08 94       	sec
    20bc:	e1 1c       	adc	r14, r1
    20be:	f1 1c       	adc	r15, r1
#endif

}

void LCD_displayString(const uint8 *a_string){
	while(*a_string != '\0'){
    20c0:	f7 01       	movw	r30, r14
    20c2:	d0 80       	ld	r13, Z
    20c4:	dd 20       	and	r13, r13
    20c6:	09 f0       	breq	.+2      	; 0x20ca <LCD_displayNumber+0x1ae>
    20c8:	b6 cf       	rjmp	.-148    	; 0x2036 <LCD_displayNumber+0x11a>
		num_string[0] = (a_num % 10) + 48;
		a_num /= 10;
		shift++;
	}
	LCD_displayString(num_string);
}
    20ca:	60 96       	adiw	r28, 0x10	; 16
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
    20de:	ff 90       	pop	r15
    20e0:	ef 90       	pop	r14
    20e2:	df 90       	pop	r13
    20e4:	cf 90       	pop	r12
    20e6:	08 95       	ret

000020e8 <KEYPAD_keyRelaesed>:
		}
	}
}


uint8 KEYPAD_keyRelaesed(void){
    20e8:	ef 92       	push	r14
    20ea:	ff 92       	push	r15
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	c0 e0       	ldi	r28, 0x00	; 0
    20f6:	d0 e0       	ldi	r29, 0x00	; 0
	uint8 col , row;	/*to loop through the rows and columns*/
	for(row=0 ; row<KEYPAD_ROW ; row++){
		DIO_PORTDirection(&keypad , (1<<row));
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	e8 2e       	mov	r14, r24
    20fc:	f1 2c       	mov	r15, r1
    20fe:	87 01       	movw	r16, r14
    2100:	0c 2e       	mov	r0, r28
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <KEYPAD_keyRelaesed+0x20>
    2104:	00 0f       	add	r16, r16
    2106:	11 1f       	adc	r17, r17
    2108:	0a 94       	dec	r0
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <KEYPAD_keyRelaesed+0x1c>
    210c:	8e e3       	ldi	r24, 0x3E	; 62
    210e:	92 e0       	ldi	r25, 0x02	; 2
    2110:	60 2f       	mov	r22, r16
    2112:	0e 94 99 0b 	call	0x1732	; 0x1732 <DIO_PORTDirection>
		DIO_writePort(&keypad , (~(1<<row)));
    2116:	00 95       	com	r16
    2118:	8e e3       	ldi	r24, 0x3E	; 62
    211a:	92 e0       	ldi	r25, 0x02	; 2
    211c:	60 2f       	mov	r22, r16
    211e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
		for(col=0 ; col<KEYPAD_COL ; col++){
			if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    2122:	8e e3       	ldi	r24, 0x3E	; 62
    2124:	92 e0       	ldi	r25, 0x02	; 2
    2126:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_readPort>
    212a:	84 ff       	sbrs	r24, 4
    212c:	1e c0       	rjmp	.+60     	; 0x216a <KEYPAD_keyRelaesed+0x82>
    212e:	8e e3       	ldi	r24, 0x3E	; 62
    2130:	92 e0       	ldi	r25, 0x02	; 2
    2132:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_readPort>
    2136:	85 ff       	sbrs	r24, 5
    2138:	18 c0       	rjmp	.+48     	; 0x216a <KEYPAD_keyRelaesed+0x82>
    213a:	8e e3       	ldi	r24, 0x3E	; 62
    213c:	92 e0       	ldi	r25, 0x02	; 2
    213e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_readPort>
    2142:	86 ff       	sbrs	r24, 6
    2144:	12 c0       	rjmp	.+36     	; 0x216a <KEYPAD_keyRelaesed+0x82>
    2146:	8e e3       	ldi	r24, 0x3E	; 62
    2148:	92 e0       	ldi	r25, 0x02	; 2
    214a:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_readPort>
    214e:	87 ff       	sbrs	r24, 7
    2150:	0c c0       	rjmp	.+24     	; 0x216a <KEYPAD_keyRelaesed+0x82>
    2152:	21 96       	adiw	r28, 0x01	; 1
}


uint8 KEYPAD_keyRelaesed(void){
	uint8 col , row;	/*to loop through the rows and columns*/
	for(row=0 ; row<KEYPAD_ROW ; row++){
    2154:	c4 30       	cpi	r28, 0x04	; 4
    2156:	d1 05       	cpc	r29, r1
    2158:	91 f6       	brne	.-92     	; 0x20fe <KEYPAD_keyRelaesed+0x16>
    215a:	81 e0       	ldi	r24, 0x01	; 1
				return 0;
			}
		}
	}
	return 1;
}
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	1f 91       	pop	r17
    2162:	0f 91       	pop	r16
    2164:	ff 90       	pop	r15
    2166:	ef 90       	pop	r14
    2168:	08 95       	ret
}


uint8 KEYPAD_keyRelaesed(void){
	uint8 col , row;	/*to loop through the rows and columns*/
	for(row=0 ; row<KEYPAD_ROW ; row++){
    216a:	80 e0       	ldi	r24, 0x00	; 0
				return 0;
			}
		}
	}
	return 1;
}
    216c:	df 91       	pop	r29
    216e:	cf 91       	pop	r28
    2170:	1f 91       	pop	r17
    2172:	0f 91       	pop	r16
    2174:	ff 90       	pop	r15
    2176:	ef 90       	pop	r14
    2178:	08 95       	ret

0000217a <KEYPAD_pressPosition>:


PORTconfig_t keypad  = KEYPAD_PORT;


uint8 KEYPAD_pressPosition(void){
    217a:	cf 92       	push	r12
    217c:	df 92       	push	r13
    217e:	ff 92       	push	r15
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	ff 24       	eor	r15, r15
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
			DIO_PORTDirection(&keypad , (1<<row));
    218a:	21 e0       	ldi	r18, 0x01	; 1
    218c:	c2 2e       	mov	r12, r18
    218e:	d1 2c       	mov	r13, r1
    2190:	cf 2d       	mov	r28, r15
    2192:	d0 e0       	ldi	r29, 0x00	; 0
    2194:	86 01       	movw	r16, r12
    2196:	0f 2c       	mov	r0, r15
    2198:	02 c0       	rjmp	.+4      	; 0x219e <KEYPAD_pressPosition+0x24>
    219a:	00 0f       	add	r16, r16
    219c:	11 1f       	adc	r17, r17
    219e:	0a 94       	dec	r0
    21a0:	e2 f7       	brpl	.-8      	; 0x219a <KEYPAD_pressPosition+0x20>
    21a2:	8e e3       	ldi	r24, 0x3E	; 62
    21a4:	92 e0       	ldi	r25, 0x02	; 2
    21a6:	60 2f       	mov	r22, r16
    21a8:	0e 94 99 0b 	call	0x1732	; 0x1732 <DIO_PORTDirection>
			DIO_writePort(&keypad , (~(1<<row)));
    21ac:	00 95       	com	r16
    21ae:	8e e3       	ldi	r24, 0x3E	; 62
    21b0:	92 e0       	ldi	r25, 0x02	; 2
    21b2:	60 2f       	mov	r22, r16
    21b4:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    21b8:	8e e3       	ldi	r24, 0x3E	; 62
    21ba:	92 e0       	ldi	r25, 0x02	; 2
    21bc:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_readPort>
    21c0:	84 ff       	sbrs	r24, 4
    21c2:	18 c0       	rjmp	.+48     	; 0x21f4 <KEYPAD_pressPosition+0x7a>
    21c4:	8e e3       	ldi	r24, 0x3E	; 62
    21c6:	92 e0       	ldi	r25, 0x02	; 2
    21c8:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_readPort>
    21cc:	85 ff       	sbrs	r24, 5
    21ce:	20 c0       	rjmp	.+64     	; 0x2210 <KEYPAD_pressPosition+0x96>
    21d0:	8e e3       	ldi	r24, 0x3E	; 62
    21d2:	92 e0       	ldi	r25, 0x02	; 2
    21d4:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_readPort>
    21d8:	86 ff       	sbrs	r24, 6
    21da:	1c c0       	rjmp	.+56     	; 0x2214 <KEYPAD_pressPosition+0x9a>
    21dc:	8e e3       	ldi	r24, 0x3E	; 62
    21de:	92 e0       	ldi	r25, 0x02	; 2
    21e0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_readPort>
    21e4:	87 ff       	sbrs	r24, 7
    21e6:	18 c0       	rjmp	.+48     	; 0x2218 <KEYPAD_pressPosition+0x9e>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    21e8:	f3 94       	inc	r15
    21ea:	83 e0       	ldi	r24, 0x03	; 3
    21ec:	8f 15       	cp	r24, r15
    21ee:	80 f6       	brcc	.-96     	; 0x2190 <KEYPAD_pressPosition+0x16>
    21f0:	ff 24       	eor	r15, r15
    21f2:	ce cf       	rjmp	.-100    	; 0x2190 <KEYPAD_pressPosition+0x16>
			DIO_PORTDirection(&keypad , (1<<row));
			DIO_writePort(&keypad , (~(1<<row)));
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	cc 0f       	add	r28, r28
    21f8:	dd 1f       	adc	r29, r29
    21fa:	cc 0f       	add	r28, r28
    21fc:	dd 1f       	adc	r29, r29
					return ((KEYPAD_COL * row) + col);
				}
			}
		}
	}
}
    21fe:	8c 0f       	add	r24, r28
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	1f 91       	pop	r17
    2206:	0f 91       	pop	r16
    2208:	ff 90       	pop	r15
    220a:	df 90       	pop	r13
    220c:	cf 90       	pop	r12
    220e:	08 95       	ret
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
			DIO_PORTDirection(&keypad , (1<<row));
			DIO_writePort(&keypad , (~(1<<row)));
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	f1 cf       	rjmp	.-30     	; 0x21f6 <KEYPAD_pressPosition+0x7c>
    2214:	82 e0       	ldi	r24, 0x02	; 2
    2216:	ef cf       	rjmp	.-34     	; 0x21f6 <KEYPAD_pressPosition+0x7c>
    2218:	83 e0       	ldi	r24, 0x03	; 3
    221a:	ed cf       	rjmp	.-38     	; 0x21f6 <KEYPAD_pressPosition+0x7c>

0000221c <KEYPAD_getCharacter>:
	}
	return 1;
}


uint8 KEYPAD_getCharacter(void){
    221c:	cf 92       	push	r12
    221e:	df 92       	push	r13
    2220:	ff 92       	push	r15
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	ff 24       	eor	r15, r15
uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
			DIO_PORTDirection(&keypad , (1<<row));
    222c:	41 e0       	ldi	r20, 0x01	; 1
    222e:	c4 2e       	mov	r12, r20
    2230:	d1 2c       	mov	r13, r1
    2232:	cf 2d       	mov	r28, r15
    2234:	d0 e0       	ldi	r29, 0x00	; 0
    2236:	86 01       	movw	r16, r12
    2238:	0f 2c       	mov	r0, r15
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <KEYPAD_getCharacter+0x24>
    223c:	00 0f       	add	r16, r16
    223e:	11 1f       	adc	r17, r17
    2240:	0a 94       	dec	r0
    2242:	e2 f7       	brpl	.-8      	; 0x223c <KEYPAD_getCharacter+0x20>
    2244:	8e e3       	ldi	r24, 0x3E	; 62
    2246:	92 e0       	ldi	r25, 0x02	; 2
    2248:	60 2f       	mov	r22, r16
    224a:	0e 94 99 0b 	call	0x1732	; 0x1732 <DIO_PORTDirection>
			DIO_writePort(&keypad , (~(1<<row)));
    224e:	00 95       	com	r16
    2250:	8e e3       	ldi	r24, 0x3E	; 62
    2252:	92 e0       	ldi	r25, 0x02	; 2
    2254:	60 2f       	mov	r22, r16
    2256:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    225a:	8e e3       	ldi	r24, 0x3E	; 62
    225c:	92 e0       	ldi	r25, 0x02	; 2
    225e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_readPort>
    2262:	84 ff       	sbrs	r24, 4
    2264:	18 c0       	rjmp	.+48     	; 0x2296 <KEYPAD_getCharacter+0x7a>
    2266:	8e e3       	ldi	r24, 0x3E	; 62
    2268:	92 e0       	ldi	r25, 0x02	; 2
    226a:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_readPort>
    226e:	85 ff       	sbrs	r24, 5
    2270:	3c c0       	rjmp	.+120    	; 0x22ea <KEYPAD_getCharacter+0xce>
    2272:	8e e3       	ldi	r24, 0x3E	; 62
    2274:	92 e0       	ldi	r25, 0x02	; 2
    2276:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_readPort>
    227a:	86 ff       	sbrs	r24, 6
    227c:	40 c0       	rjmp	.+128    	; 0x22fe <KEYPAD_getCharacter+0xe2>
    227e:	8e e3       	ldi	r24, 0x3E	; 62
    2280:	92 e0       	ldi	r25, 0x02	; 2
    2282:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_readPort>
    2286:	87 ff       	sbrs	r24, 7
    2288:	3c c0       	rjmp	.+120    	; 0x2302 <KEYPAD_getCharacter+0xe6>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    228a:	f3 94       	inc	r15
    228c:	83 e0       	ldi	r24, 0x03	; 3
    228e:	8f 15       	cp	r24, r15
    2290:	80 f6       	brcc	.-96     	; 0x2232 <KEYPAD_getCharacter+0x16>
    2292:	ff 24       	eor	r15, r15
    2294:	ce cf       	rjmp	.-100    	; 0x2232 <KEYPAD_getCharacter+0x16>
			DIO_PORTDirection(&keypad , (1<<row));
			DIO_writePort(&keypad , (~(1<<row)));
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    2296:	80 e0       	ldi	r24, 0x00	; 0
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    2298:	cc 0f       	add	r28, r28
    229a:	dd 1f       	adc	r29, r29
    229c:	cc 0f       	add	r28, r28
    229e:	dd 1f       	adc	r29, r29
    22a0:	8c 0f       	add	r24, r28
    22a2:	87 30       	cpi	r24, 0x07	; 7
    22a4:	51 f1       	breq	.+84     	; 0x22fa <KEYPAD_getCharacter+0xde>
    22a6:	88 30       	cpi	r24, 0x08	; 8
    22a8:	98 f4       	brcc	.+38     	; 0x22d0 <KEYPAD_getCharacter+0xb4>
    22aa:	83 30       	cpi	r24, 0x03	; 3
    22ac:	09 f4       	brne	.+2      	; 0x22b0 <KEYPAD_getCharacter+0x94>
    22ae:	41 c0       	rjmp	.+130    	; 0x2332 <KEYPAD_getCharacter+0x116>
    22b0:	84 30       	cpi	r24, 0x04	; 4
    22b2:	78 f1       	brcs	.+94     	; 0x2312 <KEYPAD_getCharacter+0xf6>
    22b4:	85 30       	cpi	r24, 0x05	; 5
    22b6:	09 f4       	brne	.+2      	; 0x22ba <KEYPAD_getCharacter+0x9e>
    22b8:	42 c0       	rjmp	.+132    	; 0x233e <KEYPAD_getCharacter+0x122>
    22ba:	86 30       	cpi	r24, 0x06	; 6
    22bc:	80 f5       	brcc	.+96     	; 0x231e <KEYPAD_getCharacter+0x102>
		break;
	case 2:
		return ROW0_COL2;
		break;
	case 3:
		return ROW0_COL3;
    22be:	84 e3       	ldi	r24, 0x34	; 52
	default :
		break;
}
#endif

}
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	ff 90       	pop	r15
    22ca:	df 90       	pop	r13
    22cc:	cf 90       	pop	r12
    22ce:	08 95       	ret
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    22d0:	8b 30       	cpi	r24, 0x0B	; 11
    22d2:	89 f1       	breq	.+98     	; 0x2336 <KEYPAD_getCharacter+0x11a>
    22d4:	8c 30       	cpi	r24, 0x0C	; 12
    22d6:	b8 f0       	brcs	.+46     	; 0x2306 <KEYPAD_getCharacter+0xea>
    22d8:	8d 30       	cpi	r24, 0x0D	; 13
    22da:	49 f1       	breq	.+82     	; 0x232e <KEYPAD_getCharacter+0x112>
    22dc:	8d 30       	cpi	r24, 0x0D	; 13
    22de:	28 f1       	brcs	.+74     	; 0x232a <KEYPAD_getCharacter+0x10e>
    22e0:	8e 30       	cpi	r24, 0x0E	; 14
    22e2:	89 f1       	breq	.+98     	; 0x2346 <KEYPAD_getCharacter+0x12a>
    22e4:	8f 30       	cpi	r24, 0x0F	; 15
    22e6:	89 f1       	breq	.+98     	; 0x234a <KEYPAD_getCharacter+0x12e>
    22e8:	eb cf       	rjmp	.-42     	; 0x22c0 <KEYPAD_getCharacter+0xa4>
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
			DIO_PORTDirection(&keypad , (1<<row));
			DIO_writePort(&keypad , (~(1<<row)));
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    22ea:	81 e0       	ldi	r24, 0x01	; 1
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    22ec:	cc 0f       	add	r28, r28
    22ee:	dd 1f       	adc	r29, r29
    22f0:	cc 0f       	add	r28, r28
    22f2:	dd 1f       	adc	r29, r29
    22f4:	8c 0f       	add	r24, r28
    22f6:	87 30       	cpi	r24, 0x07	; 7
    22f8:	b1 f6       	brne	.-84     	; 0x22a6 <KEYPAD_getCharacter+0x8a>
		break;
	case 5:
		return ROW1_COL1;
		break;
	case 6:
		return ROW1_COL2;
    22fa:	8a e2       	ldi	r24, 0x2A	; 42
    22fc:	e1 cf       	rjmp	.-62     	; 0x22c0 <KEYPAD_getCharacter+0xa4>
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
			DIO_PORTDirection(&keypad , (1<<row));
			DIO_writePort(&keypad , (~(1<<row)));
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    22fe:	82 e0       	ldi	r24, 0x02	; 2
    2300:	cb cf       	rjmp	.-106    	; 0x2298 <KEYPAD_getCharacter+0x7c>
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	c9 cf       	rjmp	.-110    	; 0x2298 <KEYPAD_getCharacter+0x7c>
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    2306:	89 30       	cpi	r24, 0x09	; 9
    2308:	c1 f0       	breq	.+48     	; 0x233a <KEYPAD_getCharacter+0x11e>
    230a:	8a 30       	cpi	r24, 0x0A	; 10
    230c:	60 f0       	brcs	.+24     	; 0x2326 <KEYPAD_getCharacter+0x10a>
		break;
	case 8:
		return ROW2_COL0;
		break;
	case 9:
		return ROW2_COL1;
    230e:	83 e3       	ldi	r24, 0x33	; 51
    2310:	d7 cf       	rjmp	.-82     	; 0x22c0 <KEYPAD_getCharacter+0xa4>
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	b1 f0       	breq	.+44     	; 0x2342 <KEYPAD_getCharacter+0x126>
    2316:	82 30       	cpi	r24, 0x02	; 2
    2318:	20 f0       	brcs	.+8      	; 0x2322 <KEYPAD_getCharacter+0x106>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    231a:	89 e3       	ldi	r24, 0x39	; 57
    231c:	d1 cf       	rjmp	.-94     	; 0x22c0 <KEYPAD_getCharacter+0xa4>
		break;
	case 4:
		return ROW1_COL0;
		break;
	case 5:
		return ROW1_COL1;
    231e:	86 e3       	ldi	r24, 0x36	; 54
    2320:	cf cf       	rjmp	.-98     	; 0x22c0 <KEYPAD_getCharacter+0xa4>
	default :
		break;
}
#endif

}
    2322:	87 e3       	ldi	r24, 0x37	; 55
    2324:	cd cf       	rjmp	.-102    	; 0x22c0 <KEYPAD_getCharacter+0xa4>
		break;
	case 6:
		return ROW1_COL2;
		break;
	case 7:
		return ROW1_COL3;
    2326:	81 e3       	ldi	r24, 0x31	; 49
    2328:	cb cf       	rjmp	.-106    	; 0x22c0 <KEYPAD_getCharacter+0xa4>
		break;
	case 10:
		return ROW2_COL2;
		break;
	case 11:
		return ROW2_COL3;
    232a:	8d e0       	ldi	r24, 0x0D	; 13
    232c:	c9 cf       	rjmp	.-110    	; 0x22c0 <KEYPAD_getCharacter+0xa4>
		break;
	case 12:
		return ROW3_COL0;
    232e:	80 e3       	ldi	r24, 0x30	; 48
    2330:	c7 cf       	rjmp	.-114    	; 0x22c0 <KEYPAD_getCharacter+0xa4>
		break;
	case 1:
		return ROW0_COL1;
		break;
	case 2:
		return ROW0_COL2;
    2332:	8f e2       	ldi	r24, 0x2F	; 47
    2334:	c5 cf       	rjmp	.-118    	; 0x22c0 <KEYPAD_getCharacter+0xa4>
		break;
	case 9:
		return ROW2_COL1;
		break;
	case 10:
		return ROW2_COL2;
    2336:	8d e2       	ldi	r24, 0x2D	; 45
    2338:	c3 cf       	rjmp	.-122    	; 0x22c0 <KEYPAD_getCharacter+0xa4>
		break;
	case 7:
		return ROW1_COL3;
		break;
	case 8:
		return ROW2_COL0;
    233a:	82 e3       	ldi	r24, 0x32	; 50
    233c:	c1 cf       	rjmp	.-126    	; 0x22c0 <KEYPAD_getCharacter+0xa4>
		break;
	case 3:
		return ROW0_COL3;
		break;
	case 4:
		return ROW1_COL0;
    233e:	85 e3       	ldi	r24, 0x35	; 53
    2340:	bf cf       	rjmp	.-130    	; 0x22c0 <KEYPAD_getCharacter+0xa4>
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    2342:	88 e3       	ldi	r24, 0x38	; 56
    2344:	bd cf       	rjmp	.-134    	; 0x22c0 <KEYPAD_getCharacter+0xa4>
		break;
	case 12:
		return ROW3_COL0;
		break;
	case 13:
		return ROW3_COL1;
    2346:	8d e3       	ldi	r24, 0x3D	; 61
    2348:	bb cf       	rjmp	.-138    	; 0x22c0 <KEYPAD_getCharacter+0xa4>
		break;
	case 14:
		return ROW3_COL2;
    234a:	8b e2       	ldi	r24, 0x2B	; 43
    234c:	b9 cf       	rjmp	.-142    	; 0x22c0 <KEYPAD_getCharacter+0xa4>

0000234e <KEYPAD_getNumber>:
		break;
}
#endif

}
uint8 KEYPAD_getNumber(void){
    234e:	cf 92       	push	r12
    2350:	df 92       	push	r13
    2352:	ff 92       	push	r15
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	cf 93       	push	r28
    235a:	df 93       	push	r29
    235c:	ff 24       	eor	r15, r15
uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
			DIO_PORTDirection(&keypad , (1<<row));
    235e:	61 e0       	ldi	r22, 0x01	; 1
    2360:	c6 2e       	mov	r12, r22
    2362:	d1 2c       	mov	r13, r1
    2364:	cf 2d       	mov	r28, r15
    2366:	d0 e0       	ldi	r29, 0x00	; 0
    2368:	86 01       	movw	r16, r12
    236a:	0f 2c       	mov	r0, r15
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <KEYPAD_getNumber+0x24>
    236e:	00 0f       	add	r16, r16
    2370:	11 1f       	adc	r17, r17
    2372:	0a 94       	dec	r0
    2374:	e2 f7       	brpl	.-8      	; 0x236e <KEYPAD_getNumber+0x20>
    2376:	8e e3       	ldi	r24, 0x3E	; 62
    2378:	92 e0       	ldi	r25, 0x02	; 2
    237a:	60 2f       	mov	r22, r16
    237c:	0e 94 99 0b 	call	0x1732	; 0x1732 <DIO_PORTDirection>
			DIO_writePort(&keypad , (~(1<<row)));
    2380:	00 95       	com	r16
    2382:	8e e3       	ldi	r24, 0x3E	; 62
    2384:	92 e0       	ldi	r25, 0x02	; 2
    2386:	60 2f       	mov	r22, r16
    2388:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <DIO_writePort>
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    238c:	8e e3       	ldi	r24, 0x3E	; 62
    238e:	92 e0       	ldi	r25, 0x02	; 2
    2390:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_readPort>
    2394:	84 ff       	sbrs	r24, 4
    2396:	18 c0       	rjmp	.+48     	; 0x23c8 <KEYPAD_getNumber+0x7a>
    2398:	8e e3       	ldi	r24, 0x3E	; 62
    239a:	92 e0       	ldi	r25, 0x02	; 2
    239c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_readPort>
    23a0:	85 ff       	sbrs	r24, 5
    23a2:	40 c0       	rjmp	.+128    	; 0x2424 <KEYPAD_getNumber+0xd6>
    23a4:	8e e3       	ldi	r24, 0x3E	; 62
    23a6:	92 e0       	ldi	r25, 0x02	; 2
    23a8:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_readPort>
    23ac:	86 ff       	sbrs	r24, 6
    23ae:	44 c0       	rjmp	.+136    	; 0x2438 <KEYPAD_getNumber+0xea>
    23b0:	8e e3       	ldi	r24, 0x3E	; 62
    23b2:	92 e0       	ldi	r25, 0x02	; 2
    23b4:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_readPort>
    23b8:	87 ff       	sbrs	r24, 7
    23ba:	40 c0       	rjmp	.+128    	; 0x243c <KEYPAD_getNumber+0xee>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    23bc:	f3 94       	inc	r15
    23be:	83 e0       	ldi	r24, 0x03	; 3
    23c0:	8f 15       	cp	r24, r15
    23c2:	80 f6       	brcc	.-96     	; 0x2364 <KEYPAD_getNumber+0x16>
    23c4:	ff 24       	eor	r15, r15
    23c6:	ce cf       	rjmp	.-100    	; 0x2364 <KEYPAD_getNumber+0x16>
			DIO_PORTDirection(&keypad , (1<<row));
			DIO_writePort(&keypad , (~(1<<row)));
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    23c8:	80 e0       	ldi	r24, 0x00	; 0
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    23ca:	cc 0f       	add	r28, r28
    23cc:	dd 1f       	adc	r29, r29
    23ce:	cc 0f       	add	r28, r28
    23d0:	dd 1f       	adc	r29, r29
    23d2:	8c 0f       	add	r24, r28
    23d4:	87 30       	cpi	r24, 0x07	; 7
    23d6:	71 f1       	breq	.+92     	; 0x2434 <KEYPAD_getNumber+0xe6>
    23d8:	88 30       	cpi	r24, 0x08	; 8
    23da:	b0 f4       	brcc	.+44     	; 0x2408 <KEYPAD_getNumber+0xba>
    23dc:	83 30       	cpi	r24, 0x03	; 3
    23de:	09 f4       	brne	.+2      	; 0x23e2 <KEYPAD_getNumber+0x94>
    23e0:	45 c0       	rjmp	.+138    	; 0x246c <KEYPAD_getNumber+0x11e>
    23e2:	84 30       	cpi	r24, 0x04	; 4
    23e4:	98 f1       	brcs	.+102    	; 0x244c <KEYPAD_getNumber+0xfe>
    23e6:	85 30       	cpi	r24, 0x05	; 5
    23e8:	09 f4       	brne	.+2      	; 0x23ec <KEYPAD_getNumber+0x9e>
    23ea:	46 c0       	rjmp	.+140    	; 0x2478 <KEYPAD_getNumber+0x12a>
    23ec:	86 30       	cpi	r24, 0x06	; 6
    23ee:	a0 f5       	brcc	.+104    	; 0x2458 <KEYPAD_getNumber+0x10a>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    23f0:	84 e3       	ldi	r24, 0x34	; 52
#endif

}
uint8 KEYPAD_getNumber(void){
	uint8 num = KEYPAD_getCharacter();
	if((num>='0')&&(num<='9')){
    23f2:	80 53       	subi	r24, 0x30	; 48
    23f4:	8a 30       	cpi	r24, 0x0A	; 10
    23f6:	00 f0       	brcs	.+0      	; 0x23f8 <KEYPAD_getNumber+0xaa>
		return num-48;
	}
}
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	1f 91       	pop	r17
    23fe:	0f 91       	pop	r16
    2400:	ff 90       	pop	r15
    2402:	df 90       	pop	r13
    2404:	cf 90       	pop	r12
    2406:	08 95       	ret
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    2408:	8b 30       	cpi	r24, 0x0B	; 11
    240a:	91 f1       	breq	.+100    	; 0x2470 <KEYPAD_getNumber+0x122>
    240c:	8c 30       	cpi	r24, 0x0C	; 12
    240e:	c0 f0       	brcs	.+48     	; 0x2440 <KEYPAD_getNumber+0xf2>
    2410:	8d 30       	cpi	r24, 0x0D	; 13
    2412:	51 f1       	breq	.+84     	; 0x2468 <KEYPAD_getNumber+0x11a>
    2414:	8d 30       	cpi	r24, 0x0D	; 13
    2416:	30 f1       	brcs	.+76     	; 0x2464 <KEYPAD_getNumber+0x116>
    2418:	8e 30       	cpi	r24, 0x0E	; 14
    241a:	91 f1       	breq	.+100    	; 0x2480 <KEYPAD_getNumber+0x132>
    241c:	8f 30       	cpi	r24, 0x0F	; 15
    241e:	49 f7       	brne	.-46     	; 0x23f2 <KEYPAD_getNumber+0xa4>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    2420:	8b e2       	ldi	r24, 0x2B	; 43
    2422:	e7 cf       	rjmp	.-50     	; 0x23f2 <KEYPAD_getNumber+0xa4>
			DIO_PORTDirection(&keypad , (1<<row));
			DIO_writePort(&keypad , (~(1<<row)));
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    2424:	81 e0       	ldi	r24, 0x01	; 1
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    2426:	cc 0f       	add	r28, r28
    2428:	dd 1f       	adc	r29, r29
    242a:	cc 0f       	add	r28, r28
    242c:	dd 1f       	adc	r29, r29
    242e:	8c 0f       	add	r24, r28
    2430:	87 30       	cpi	r24, 0x07	; 7
    2432:	91 f6       	brne	.-92     	; 0x23d8 <KEYPAD_getNumber+0x8a>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    2434:	8a e2       	ldi	r24, 0x2A	; 42
    2436:	dd cf       	rjmp	.-70     	; 0x23f2 <KEYPAD_getNumber+0xa4>
			DIO_PORTDirection(&keypad , (1<<row));
			DIO_writePort(&keypad , (~(1<<row)));
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    2438:	82 e0       	ldi	r24, 0x02	; 2
    243a:	c7 cf       	rjmp	.-114    	; 0x23ca <KEYPAD_getNumber+0x7c>
    243c:	83 e0       	ldi	r24, 0x03	; 3
    243e:	c5 cf       	rjmp	.-118    	; 0x23ca <KEYPAD_getNumber+0x7c>
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    2440:	89 30       	cpi	r24, 0x09	; 9
    2442:	c1 f0       	breq	.+48     	; 0x2474 <KEYPAD_getNumber+0x126>
    2444:	8a 30       	cpi	r24, 0x0A	; 10
    2446:	60 f0       	brcs	.+24     	; 0x2460 <KEYPAD_getNumber+0x112>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    2448:	83 e3       	ldi	r24, 0x33	; 51
    244a:	d3 cf       	rjmp	.-90     	; 0x23f2 <KEYPAD_getNumber+0xa4>
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    244c:	81 30       	cpi	r24, 0x01	; 1
    244e:	b1 f0       	breq	.+44     	; 0x247c <KEYPAD_getNumber+0x12e>
    2450:	82 30       	cpi	r24, 0x02	; 2
    2452:	20 f0       	brcs	.+8      	; 0x245c <KEYPAD_getNumber+0x10e>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    2454:	89 e3       	ldi	r24, 0x39	; 57
    2456:	cd cf       	rjmp	.-102    	; 0x23f2 <KEYPAD_getNumber+0xa4>
    2458:	86 e3       	ldi	r24, 0x36	; 54
    245a:	cb cf       	rjmp	.-106    	; 0x23f2 <KEYPAD_getNumber+0xa4>
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    245c:	87 e3       	ldi	r24, 0x37	; 55
    245e:	c9 cf       	rjmp	.-110    	; 0x23f2 <KEYPAD_getNumber+0xa4>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    2460:	81 e3       	ldi	r24, 0x31	; 49
    2462:	c7 cf       	rjmp	.-114    	; 0x23f2 <KEYPAD_getNumber+0xa4>
    2464:	8d e0       	ldi	r24, 0x0D	; 13
    2466:	c5 cf       	rjmp	.-118    	; 0x23f2 <KEYPAD_getNumber+0xa4>
    2468:	80 e3       	ldi	r24, 0x30	; 48
    246a:	c3 cf       	rjmp	.-122    	; 0x23f2 <KEYPAD_getNumber+0xa4>
    246c:	8f e2       	ldi	r24, 0x2F	; 47
    246e:	c1 cf       	rjmp	.-126    	; 0x23f2 <KEYPAD_getNumber+0xa4>
    2470:	8d e2       	ldi	r24, 0x2D	; 45
    2472:	bf cf       	rjmp	.-130    	; 0x23f2 <KEYPAD_getNumber+0xa4>
    2474:	82 e3       	ldi	r24, 0x32	; 50
    2476:	bd cf       	rjmp	.-134    	; 0x23f2 <KEYPAD_getNumber+0xa4>
    2478:	85 e3       	ldi	r24, 0x35	; 53
    247a:	bb cf       	rjmp	.-138    	; 0x23f2 <KEYPAD_getNumber+0xa4>
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    247c:	88 e3       	ldi	r24, 0x38	; 56
    247e:	b9 cf       	rjmp	.-142    	; 0x23f2 <KEYPAD_getNumber+0xa4>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    2480:	8d e3       	ldi	r24, 0x3D	; 61
    2482:	b7 cf       	rjmp	.-146    	; 0x23f2 <KEYPAD_getNumber+0xa4>

00002484 <EEPROM_readData>:
		TWI_write(data[i]);
	}
	TWI_stop();

}
uint8 EEPROM_readData(uint16 addr , uint8* recieved_data , uint8 size){
    2484:	cf 92       	push	r12
    2486:	df 92       	push	r13
    2488:	ef 92       	push	r14
    248a:	ff 92       	push	r15
    248c:	0f 93       	push	r16
    248e:	1f 93       	push	r17
    2490:	cf 93       	push	r28
    2492:	df 93       	push	r29
    2494:	8c 01       	movw	r16, r24
    2496:	6b 01       	movw	r12, r22
    2498:	f4 2e       	mov	r15, r20
	uint8 i;

	TWI_start();
    249a:	0e 94 a4 08 	call	0x1148	; 0x1148 <TWI_start>
	TWI_write((0b10100000 & 0xF0) | (uint8)((addr & 0x700) >> 7));
    249e:	c8 01       	movw	r24, r16
    24a0:	88 0f       	add	r24, r24
    24a2:	89 2f       	mov	r24, r25
    24a4:	88 1f       	adc	r24, r24
    24a6:	99 0b       	sbc	r25, r25
    24a8:	91 95       	neg	r25
    24aa:	18 2f       	mov	r17, r24
    24ac:	1e 70       	andi	r17, 0x0E	; 14
    24ae:	81 2f       	mov	r24, r17
    24b0:	80 6a       	ori	r24, 0xA0	; 160
    24b2:	0e 94 ad 08 	call	0x115a	; 0x115a <TWI_write>
	TWI_write((uint8)addr);
    24b6:	80 2f       	mov	r24, r16
    24b8:	0e 94 ad 08 	call	0x115a	; 0x115a <TWI_write>

	TWI_start();
    24bc:	0e 94 a4 08 	call	0x1148	; 0x1148 <TWI_start>
	TWI_write((0b10100001 & 0xF1) | (uint8)((addr & 0x700) >> 7));
    24c0:	81 2f       	mov	r24, r17
    24c2:	81 6a       	ori	r24, 0xA1	; 161
    24c4:	0e 94 ad 08 	call	0x115a	; 0x115a <TWI_write>
	for(i=0 ; i<size-1 ; i++){
    24c8:	ef 2c       	mov	r14, r15
    24ca:	ff 24       	eor	r15, r15
    24cc:	08 94       	sec
    24ce:	e1 08       	sbc	r14, r1
    24d0:	f1 08       	sbc	r15, r1
    24d2:	1e 14       	cp	r1, r14
    24d4:	1f 04       	cpc	r1, r15
    24d6:	74 f4       	brge	.+28     	; 0x24f4 <EEPROM_readData+0x70>
    24d8:	00 e0       	ldi	r16, 0x00	; 0
    24da:	c0 e0       	ldi	r28, 0x00	; 0
    24dc:	d0 e0       	ldi	r29, 0x00	; 0
		recieved_data[i] = TWI_readWithACK();
    24de:	0e 94 b4 08 	call	0x1168	; 0x1168 <TWI_readWithACK>
    24e2:	cc 0d       	add	r28, r12
    24e4:	dd 1d       	adc	r29, r13
    24e6:	88 83       	st	Y, r24
	TWI_write((0b10100000 & 0xF0) | (uint8)((addr & 0x700) >> 7));
	TWI_write((uint8)addr);

	TWI_start();
	TWI_write((0b10100001 & 0xF1) | (uint8)((addr & 0x700) >> 7));
	for(i=0 ; i<size-1 ; i++){
    24e8:	0f 5f       	subi	r16, 0xFF	; 255
    24ea:	c0 2f       	mov	r28, r16
    24ec:	d0 e0       	ldi	r29, 0x00	; 0
    24ee:	ce 15       	cp	r28, r14
    24f0:	df 05       	cpc	r29, r15
    24f2:	ac f3       	brlt	.-22     	; 0x24de <EEPROM_readData+0x5a>
		recieved_data[i] = TWI_readWithACK();
	}
	recieved_data[0] = TWI_readWithNACK();
    24f4:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_readWithNACK>
    24f8:	f6 01       	movw	r30, r12
    24fa:	80 83       	st	Z, r24
	TWI_stop();
    24fc:	0e 94 aa 08 	call	0x1154	; 0x1154 <TWI_stop>

}
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	1f 91       	pop	r17
    2506:	0f 91       	pop	r16
    2508:	ff 90       	pop	r15
    250a:	ef 90       	pop	r14
    250c:	df 90       	pop	r13
    250e:	cf 90       	pop	r12
    2510:	08 95       	ret

00002512 <EEPROM_writeData>:

void EEPROM_init(void){
	TWIconfig_t I2C_EEPROM_config= {2 , PRE_1 , 0xAA};
	TWI_init(&I2C_EEPROM_config);
}
uint8 EEPROM_writeData(uint16 addr , uint8* data , uint16 size){
    2512:	ef 92       	push	r14
    2514:	ff 92       	push	r15
    2516:	0f 93       	push	r16
    2518:	1f 93       	push	r17
    251a:	cf 93       	push	r28
    251c:	df 93       	push	r29
    251e:	8c 01       	movw	r16, r24
    2520:	7b 01       	movw	r14, r22
    2522:	ea 01       	movw	r28, r20

	uint16 devAddress = (0b10100000 & 0xF1) | (uint8)((addr & 0x700) >> 7);
	uint8 i = 0;
	TWI_start();
    2524:	0e 94 a4 08 	call	0x1148	; 0x1148 <TWI_start>
	TWI_write(devAddress);
    2528:	c8 01       	movw	r24, r16
    252a:	80 70       	andi	r24, 0x00	; 0
    252c:	97 70       	andi	r25, 0x07	; 7
    252e:	88 0f       	add	r24, r24
    2530:	89 2f       	mov	r24, r25
    2532:	88 1f       	adc	r24, r24
    2534:	99 0b       	sbc	r25, r25
    2536:	91 95       	neg	r25
    2538:	80 6a       	ori	r24, 0xA0	; 160
    253a:	0e 94 ad 08 	call	0x115a	; 0x115a <TWI_write>
	TWI_write((addr & 0xFF));
    253e:	80 2f       	mov	r24, r16
    2540:	0e 94 ad 08 	call	0x115a	; 0x115a <TWI_write>
	for(i=0 ; i<size ; i++){
    2544:	20 97       	sbiw	r28, 0x00	; 0
    2546:	71 f0       	breq	.+28     	; 0x2564 <EEPROM_writeData+0x52>
    2548:	00 e0       	ldi	r16, 0x00	; 0
    254a:	e0 e0       	ldi	r30, 0x00	; 0
    254c:	f0 e0       	ldi	r31, 0x00	; 0
		TWI_write(data[i]);
    254e:	ee 0d       	add	r30, r14
    2550:	ff 1d       	adc	r31, r15
    2552:	80 81       	ld	r24, Z
    2554:	0e 94 ad 08 	call	0x115a	; 0x115a <TWI_write>
	uint16 devAddress = (0b10100000 & 0xF1) | (uint8)((addr & 0x700) >> 7);
	uint8 i = 0;
	TWI_start();
	TWI_write(devAddress);
	TWI_write((addr & 0xFF));
	for(i=0 ; i<size ; i++){
    2558:	0f 5f       	subi	r16, 0xFF	; 255
    255a:	e0 2f       	mov	r30, r16
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	ec 17       	cp	r30, r28
    2560:	fd 07       	cpc	r31, r29
    2562:	a8 f3       	brcs	.-22     	; 0x254e <EEPROM_writeData+0x3c>
		TWI_write(data[i]);
	}
	TWI_stop();
    2564:	0e 94 aa 08 	call	0x1154	; 0x1154 <TWI_stop>

}
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	1f 91       	pop	r17
    256e:	0f 91       	pop	r16
    2570:	ff 90       	pop	r15
    2572:	ef 90       	pop	r14
    2574:	08 95       	ret

00002576 <EEPROM_init>:

#include "../../MCAL/i2c/i2c.h"
#include "eeprom.h"


void EEPROM_init(void){
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	00 d0       	rcall	.+0      	; 0x257c <EEPROM_init+0x6>
    257c:	0f 92       	push	r0
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
	TWIconfig_t I2C_EEPROM_config= {2 , PRE_1 , 0xAA};
    2582:	ce 01       	movw	r24, r28
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	dc 01       	movw	r26, r24
    2588:	ed e5       	ldi	r30, 0x5D	; 93
    258a:	f2 e0       	ldi	r31, 0x02	; 2
    258c:	23 e0       	ldi	r18, 0x03	; 3
    258e:	01 90       	ld	r0, Z+
    2590:	0d 92       	st	X+, r0
    2592:	21 50       	subi	r18, 0x01	; 1
    2594:	e1 f7       	brne	.-8      	; 0x258e <EEPROM_init+0x18>
	TWI_init(&I2C_EEPROM_config);
    2596:	0e 94 95 08 	call	0x112a	; 0x112a <TWI_init>
}
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	cf 91       	pop	r28
    25a2:	df 91       	pop	r29
    25a4:	08 95       	ret

000025a6 <main>:
		break;
	}
}

int main(void){
	DIO_initChannel(&buzzer);
    25a6:	83 e4       	ldi	r24, 0x43	; 67
    25a8:	92 e0       	ldi	r25, 0x02	; 2
    25aa:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_initChannel>
	EINT_init(&downbutton);
    25ae:	8e e4       	ldi	r24, 0x4E	; 78
    25b0:	92 e0       	ldi	r25, 0x02	; 2
    25b2:	0e 94 65 09 	call	0x12ca	; 0x12ca <EINT_init>
	EINT_init(&upbutton);
    25b6:	83 e5       	ldi	r24, 0x53	; 83
    25b8:	92 e0       	ldi	r25, 0x02	; 2
    25ba:	0e 94 65 09 	call	0x12ca	; 0x12ca <EINT_init>
	EINT_init(&selectbutton);
    25be:	88 e5       	ldi	r24, 0x58	; 88
    25c0:	92 e0       	ldi	r25, 0x02	; 2
    25c2:	0e 94 65 09 	call	0x12ca	; 0x12ca <EINT_init>
	LCD_init();
    25c6:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <LCD_init>
	UART_init(&uart);
    25ca:	87 e4       	ldi	r24, 0x47	; 71
    25cc:	92 e0       	ldi	r25, 0x02	; 2
    25ce:	0e 94 bd 05 	call	0xb7a	; 0xb7a <UART_init>
	UART_setcallback(uartMsgInetrruptHandler);
    25d2:	81 ef       	ldi	r24, 0xF1	; 241
    25d4:	92 e1       	ldi	r25, 0x12	; 18
    25d6:	0e 94 65 06 	call	0xcca	; 0xcca <UART_setcallback>
	SREG |= (1<<7);
    25da:	8f b7       	in	r24, 0x3f	; 63
    25dc:	80 68       	ori	r24, 0x80	; 128
    25de:	8f bf       	out	0x3f, r24	; 63
    25e0:	ff cf       	rjmp	.-2      	; 0x25e0 <main+0x3a>

000025e2 <uartMsgInetrruptHandler>:

#include "HMI_utility_functions.h"


void uartMsgInetrruptHandler(void){
	switch (recieved_data){
    25e2:	80 91 7a 02 	lds	r24, 0x027A
    25e6:	8e 36       	cpi	r24, 0x6E	; 110
    25e8:	09 f4       	brne	.+2      	; 0x25ec <uartMsgInetrruptHandler+0xa>
    25ea:	59 c0       	rjmp	.+178    	; 0x269e <uartMsgInetrruptHandler+0xbc>
    25ec:	8f 36       	cpi	r24, 0x6F	; 111
    25ee:	58 f0       	brcs	.+22     	; 0x2606 <uartMsgInetrruptHandler+0x24>
    25f0:	82 37       	cpi	r24, 0x72	; 114
    25f2:	09 f4       	brne	.+2      	; 0x25f6 <uartMsgInetrruptHandler+0x14>
    25f4:	42 c0       	rjmp	.+132    	; 0x267a <uartMsgInetrruptHandler+0x98>
    25f6:	83 37       	cpi	r24, 0x73	; 115
    25f8:	a8 f0       	brcs	.+42     	; 0x2624 <uartMsgInetrruptHandler+0x42>
    25fa:	83 37       	cpi	r24, 0x73	; 115
    25fc:	09 f4       	brne	.+2      	; 0x2600 <uartMsgInetrruptHandler+0x1e>
    25fe:	43 c0       	rjmp	.+134    	; 0x2686 <uartMsgInetrruptHandler+0xa4>
    2600:	88 37       	cpi	r24, 0x78	; 120
    2602:	49 f1       	breq	.+82     	; 0x2656 <uartMsgInetrruptHandler+0x74>
    2604:	08 95       	ret
    2606:	86 36       	cpi	r24, 0x66	; 102
    2608:	09 f4       	brne	.+2      	; 0x260c <uartMsgInetrruptHandler+0x2a>
    260a:	43 c0       	rjmp	.+134    	; 0x2692 <uartMsgInetrruptHandler+0xb0>
    260c:	87 36       	cpi	r24, 0x67	; 103
    260e:	a0 f0       	brcs	.+40     	; 0x2638 <uartMsgInetrruptHandler+0x56>
    2610:	87 36       	cpi	r24, 0x67	; 103
    2612:	69 f1       	breq	.+90     	; 0x266e <uartMsgInetrruptHandler+0x8c>
    2614:	8d 36       	cpi	r24, 0x6D	; 109
    2616:	b1 f7       	brne	.-20     	; 0x2604 <uartMsgInetrruptHandler+0x22>
		UART_transmit(ACK_MSG);
		//		_delay_ms(50);
		HMI_matchError();
		break;
	case PASSWORD_MATCH:	/*password matching*/
		UART_transmit(ACK_MSG);
    2618:	81 e6       	ldi	r24, 0x61	; 97
    261a:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_transmit>
		//		_delay_ms(50);
		HMI_success();
    261e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <HMI_success>
    2622:	08 95       	ret

#include "HMI_utility_functions.h"


void uartMsgInetrruptHandler(void){
	switch (recieved_data){
    2624:	8f 36       	cpi	r24, 0x6F	; 111
    2626:	e9 f0       	breq	.+58     	; 0x2662 <uartMsgInetrruptHandler+0x80>
    2628:	80 37       	cpi	r24, 0x70	; 112
    262a:	61 f7       	brne	.-40     	; 0x2604 <uartMsgInetrruptHandler+0x22>
		UART_transmit(ACK_MSG);
		//		_delay_ms(50);
		HMI_success();
		break;
	case PASS_UPDATED_MSG:	/*password updated*/
		UART_transmit(ACK_MSG);
    262c:	81 e6       	ldi	r24, 0x61	; 97
    262e:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_transmit>
		//		_delay_ms(50);
		HMI_updated();
    2632:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <HMI_updated>
    2636:	08 95       	ret

#include "HMI_utility_functions.h"


void uartMsgInetrruptHandler(void){
	switch (recieved_data){
    2638:	8d 34       	cpi	r24, 0x4D	; 77
    263a:	21 f7       	brne	.-56     	; 0x2604 <uartMsgInetrruptHandler+0x22>
		UART_transmit(ACK_MSG);
		//		_delay_ms(50);
		HMI_firstTimeMSG();
		break;
	case MAIN_MENU_MSG:	/*main menu*/
		UART_transmit(ACK_MSG);
    263c:	81 e6       	ldi	r24, 0x61	; 97
    263e:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_transmit>
		HMI_displayMainMenu();
    2642:	0e 94 99 13 	call	0x2732	; 0x2732 <HMI_displayMainMenu>
		pos = 1;
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	80 93 42 02 	sts	0x0242, r24
		HMI_moveArrow(pos);
    264c:	80 91 42 02 	lds	r24, 0x0242
    2650:	0e 94 bc 13 	call	0x2778	; 0x2778 <HMI_moveArrow>
    2654:	08 95       	ret
	case OLD_PASS_MSG:	/*get old password*/
		UART_transmit(ACK_MSG);
		HMI_getOldPassword();
		break;
	case ALARM_MSG:	/*get old password*/
		UART_transmit(ACK_MSG);
    2656:	81 e6       	ldi	r24, 0x61	; 97
    2658:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_transmit>
		HMI_alarm();
    265c:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HMI_alarm>
    2660:	08 95       	ret
	case ENTER_PASS_MSG:	/*get password*/
		UART_transmit(ACK_MSG);
		HMI_getpassword();
		break;
	case OLD_PASS_MSG:	/*get old password*/
		UART_transmit(ACK_MSG);
    2662:	81 e6       	ldi	r24, 0x61	; 97
    2664:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_transmit>
		HMI_getOldPassword();
    2668:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <HMI_getOldPassword>
    266c:	08 95       	ret
		HMI_displayMainMenu();
		pos = 1;
		HMI_moveArrow(pos);
		break;
	case ENTER_PASS_MSG:	/*get password*/
		UART_transmit(ACK_MSG);
    266e:	81 e6       	ldi	r24, 0x61	; 97
    2670:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_transmit>
		HMI_getpassword();
    2674:	0e 94 b0 14 	call	0x2960	; 0x2960 <HMI_getpassword>
    2678:	08 95       	ret
		UART_transmit(ACK_MSG);
		//		_delay_ms(50);
		HMI_set_password();
		break;
	case REPEATE_PASS_MSG:	/*repeat password*/
		UART_transmit(ACK_MSG);
    267a:	81 e6       	ldi	r24, 0x61	; 97
    267c:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_transmit>
		//		_delay_ms(50);
		HMI_repeat_password();
    2680:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <HMI_repeat_password>
    2684:	08 95       	ret


void uartMsgInetrruptHandler(void){
	switch (recieved_data){
	case NEW_PASS_MGS:	/*set new password*/
		UART_transmit(ACK_MSG);
    2686:	81 e6       	ldi	r24, 0x61	; 97
    2688:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_transmit>
		//		_delay_ms(50);
		HMI_set_password();
    268c:	0e 94 51 14 	call	0x28a2	; 0x28a2 <HMI_set_password>
    2690:	08 95       	ret
		UART_transmit(ACK_MSG);
		//		_delay_ms(50);
		HMI_updated();
		break;
	case FIRST_RUN:	/*first time msg*/
		UART_transmit(ACK_MSG);
    2692:	81 e6       	ldi	r24, 0x61	; 97
    2694:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_transmit>
		//		_delay_ms(50);
		HMI_firstTimeMSG();
    2698:	0e 94 82 13 	call	0x2704	; 0x2704 <HMI_firstTimeMSG>
    269c:	08 95       	ret
		UART_transmit(ACK_MSG);
		//		_delay_ms(50);
		HMI_repeat_password();
		break;
	case NO_MATCH:	/*matching error*/
		UART_transmit(ACK_MSG);
    269e:	81 e6       	ldi	r24, 0x61	; 97
    26a0:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_transmit>
		//		_delay_ms(50);
		HMI_matchError();
    26a4:	0e 94 55 13 	call	0x26aa	; 0x26aa <HMI_matchError>
    26a8:	08 95       	ret

000026aa <HMI_matchError>:
	UART_transmitString(pass , 5);
}


void HMI_matchError(void){
	LCD_clearScreen();
    26aa:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_clearScreen>
	LCD_displayString("no matching");
    26ae:	80 e6       	ldi	r24, 0x60	; 96
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
}
    26b6:	08 95       	ret

000026b8 <HMI_updated>:
	LCD_goTo(1,0);
	LCD_displayString("accepted");
}

void HMI_updated(void){
	LCD_clearScreen();
    26b8:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_clearScreen>
	LCD_displayString("password");
    26bc:	8c e6       	ldi	r24, 0x6C	; 108
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(1,0);
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	60 e0       	ldi	r22, 0x00	; 0
    26c8:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("updated");
    26cc:	85 e7       	ldi	r24, 0x75	; 117
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(2,0);
    26d4:	82 e0       	ldi	r24, 0x02	; 2
    26d6:	60 e0       	ldi	r22, 0x00	; 0
    26d8:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("successfully");
    26dc:	8d e7       	ldi	r24, 0x7D	; 125
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
}
    26e4:	08 95       	ret

000026e6 <HMI_success>:
	LCD_displayString("no matching");
}


void HMI_success(void){
	LCD_clearScreen();
    26e6:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_clearScreen>
	LCD_displayString("password");
    26ea:	8c e6       	ldi	r24, 0x6C	; 108
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(1,0);
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	60 e0       	ldi	r22, 0x00	; 0
    26f6:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("accepted");
    26fa:	8a e8       	ldi	r24, 0x8A	; 138
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
}
    2702:	08 95       	ret

00002704 <HMI_firstTimeMSG>:
}



void HMI_firstTimeMSG(void){
	LCD_clearScreen();
    2704:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_clearScreen>
	LCD_displayString("welcome");
    2708:	83 e9       	ldi	r24, 0x93	; 147
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(1,0);
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	60 e0       	ldi	r22, 0x00	; 0
    2714:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("yasta");
    2718:	8b e9       	ldi	r24, 0x9B	; 155
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(2,6);
    2720:	82 e0       	ldi	r24, 0x02	; 2
    2722:	66 e0       	ldi	r22, 0x06	; 6
    2724:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString(":)");
    2728:	81 ea       	ldi	r24, 0xA1	; 161
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
}
    2730:	08 95       	ret

00002732 <HMI_displayMainMenu>:
}



void HMI_displayMainMenu(void){
	LCD_clearScreen();
    2732:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_clearScreen>
	LCD_goTo(0,0);
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	60 e0       	ldi	r22, 0x00	; 0
    273a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("select :");
    273e:	84 ea       	ldi	r24, 0xA4	; 164
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(1,3);
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	63 e0       	ldi	r22, 0x03	; 3
    274a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("unlock door");
    274e:	8d ea       	ldi	r24, 0xAD	; 173
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(2,3);
    2756:	82 e0       	ldi	r24, 0x02	; 2
    2758:	63 e0       	ldi	r22, 0x03	; 3
    275a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("reset pass");
    275e:	89 eb       	ldi	r24, 0xB9	; 185
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(3,3);
    2766:	83 e0       	ldi	r24, 0x03	; 3
    2768:	63 e0       	ldi	r22, 0x03	; 3
    276a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("close door");
    276e:	84 ec       	ldi	r24, 0xC4	; 196
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	//	_delay_ms(100);
}
    2776:	08 95       	ret

00002778 <HMI_moveArrow>:
	}
	UART_transmitString(pass , 5);
}


void HMI_moveArrow(uint8 pos){
    2778:	ff 92       	push	r15
    277a:	0f 93       	push	r16
    277c:	1f 93       	push	r17
    277e:	f8 2e       	mov	r15, r24
	if((pos>3) && (pos<1)){
		return;
	}
	LCD_goTo(1,0);
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("  ");
    2788:	0f ec       	ldi	r16, 0xCF	; 207
    278a:	10 e0       	ldi	r17, 0x00	; 0
    278c:	c8 01       	movw	r24, r16
    278e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(2,0);
    2792:	82 e0       	ldi	r24, 0x02	; 2
    2794:	60 e0       	ldi	r22, 0x00	; 0
    2796:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("  ");
    279a:	c8 01       	movw	r24, r16
    279c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(3,0);
    27a0:	83 e0       	ldi	r24, 0x03	; 3
    27a2:	60 e0       	ldi	r22, 0x00	; 0
    27a4:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("  ");
    27a8:	c8 01       	movw	r24, r16
    27aa:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(pos,0);
    27ae:	8f 2d       	mov	r24, r15
    27b0:	60 e0       	ldi	r22, 0x00	; 0
    27b2:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("->");
    27b6:	82 ed       	ldi	r24, 0xD2	; 210
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
}
    27be:	1f 91       	pop	r17
    27c0:	0f 91       	pop	r16
    27c2:	ff 90       	pop	r15
    27c4:	08 95       	ret

000027c6 <HMI_alarm>:
	_delay_ms(50);
	DIO_writeChannel(&buzzer , 0);
}

void HMI_alarm(void){
	LCD_clearScreen();
    27c6:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_clearScreen>
	LCD_displayString("lw msktak");
    27ca:	85 ed       	ldi	r24, 0xD5	; 213
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(1,0);
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	60 e0       	ldi	r22, 0x00	; 0
    27d6:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("H........");
    27da:	8f ed       	ldi	r24, 0xDF	; 223
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
}
    27e2:	08 95       	ret

000027e4 <HMI_repeat_password>:
		while(!KEYPAD_keyRelaesed());
	}
	UART_transmitString(pass , 5);
}

uint8 HMI_repeat_password(void){
    27e4:	af 92       	push	r10
    27e6:	bf 92       	push	r11
    27e8:	cf 92       	push	r12
    27ea:	df 92       	push	r13
    27ec:	ef 92       	push	r14
    27ee:	ff 92       	push	r15
    27f0:	0f 93       	push	r16
    27f2:	1f 93       	push	r17
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	00 d0       	rcall	.+0      	; 0x27fa <HMI_repeat_password+0x16>
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <HMI_repeat_password+0x18>
    27fc:	0f 92       	push	r0
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
	uint8 i = 0;
	uint8 pass[5];
	LCD_clearScreen();
    2802:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_clearScreen>
	LCD_displayString("repeat password");
    2806:	89 ee       	ldi	r24, 0xE9	; 233
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(2,4);
    280e:	82 e0       	ldi	r24, 0x02	; 2
    2810:	64 e0       	ldi	r22, 0x04	; 4
    2812:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
    2816:	5e 01       	movw	r10, r28
    2818:	08 94       	sec
    281a:	a1 1c       	adc	r10, r1
    281c:	b1 1c       	adc	r11, r1
    281e:	75 01       	movw	r14, r10
    2820:	86 e0       	ldi	r24, 0x06	; 6
    2822:	c8 2e       	mov	r12, r24
    2824:	d1 2c       	mov	r13, r1
    2826:	cc 0e       	add	r12, r28
    2828:	dd 1e       	adc	r13, r29
    282a:	08 ec       	ldi	r16, 0xC8	; 200
    282c:	10 e0       	ldi	r17, 0x00	; 0
	while(i<5){
		pass[i] = KEYPAD_getCharacter();
    282e:	0e 94 0e 11 	call	0x221c	; 0x221c <KEYPAD_getCharacter>
    2832:	f7 01       	movw	r30, r14
    2834:	80 83       	st	Z, r24
		LCD_characterDisplay('*');
    2836:	8a e2       	ldi	r24, 0x2A	; 42
    2838:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <LCD_characterDisplay>
		DIO_writeChannel(&buzzer , 1);
    283c:	83 e4       	ldi	r24, 0x43	; 67
    283e:	92 e0       	ldi	r25, 0x02	; 2
    2840:	61 e0       	ldi	r22, 0x01	; 1
    2842:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	c8 01       	movw	r24, r16
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	f1 f7       	brne	.-4      	; 0x284c <HMI_repeat_password+0x68>
    2850:	2f 5f       	subi	r18, 0xFF	; 255
    2852:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2854:	f1 e0       	ldi	r31, 0x01	; 1
    2856:	24 3f       	cpi	r18, 0xF4	; 244
    2858:	3f 07       	cpc	r19, r31
    285a:	b9 f7       	brne	.-18     	; 0x284a <HMI_repeat_password+0x66>
		_delay_ms(50);
		DIO_writeChannel(&buzzer , 0);
    285c:	83 e4       	ldi	r24, 0x43	; 67
    285e:	92 e0       	ldi	r25, 0x02	; 2
    2860:	60 e0       	ldi	r22, 0x00	; 0
    2862:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
		i++;
		while(!KEYPAD_keyRelaesed());
    2866:	0e 94 74 10 	call	0x20e8	; 0x20e8 <KEYPAD_keyRelaesed>
    286a:	88 23       	and	r24, r24
    286c:	e1 f3       	breq	.-8      	; 0x2866 <HMI_repeat_password+0x82>
    286e:	08 94       	sec
    2870:	e1 1c       	adc	r14, r1
    2872:	f1 1c       	adc	r15, r1
	uint8 i = 0;
	uint8 pass[5];
	LCD_clearScreen();
	LCD_displayString("repeat password");
	LCD_goTo(2,4);
	while(i<5){
    2874:	ec 14       	cp	r14, r12
    2876:	fd 04       	cpc	r15, r13
    2878:	d1 f6       	brne	.-76     	; 0x282e <HMI_repeat_password+0x4a>
		_delay_ms(50);
		DIO_writeChannel(&buzzer , 0);
		i++;
		while(!KEYPAD_keyRelaesed());
	}
	UART_transmitString(pass , 5);
    287a:	c5 01       	movw	r24, r10
    287c:	65 e0       	ldi	r22, 0x05	; 5
    287e:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_transmitString>
}
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	1f 91       	pop	r17
    2892:	0f 91       	pop	r16
    2894:	ff 90       	pop	r15
    2896:	ef 90       	pop	r14
    2898:	df 90       	pop	r13
    289a:	cf 90       	pop	r12
    289c:	bf 90       	pop	r11
    289e:	af 90       	pop	r10
    28a0:	08 95       	ret

000028a2 <HMI_set_password>:
}




uint8 HMI_set_password(void){
    28a2:	af 92       	push	r10
    28a4:	bf 92       	push	r11
    28a6:	cf 92       	push	r12
    28a8:	df 92       	push	r13
    28aa:	ef 92       	push	r14
    28ac:	ff 92       	push	r15
    28ae:	0f 93       	push	r16
    28b0:	1f 93       	push	r17
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <HMI_set_password+0x16>
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <HMI_set_password+0x18>
    28ba:	0f 92       	push	r0
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
	uint8 i = 0;
	uint8 pass[5];
	LCD_clearScreen();
    28c0:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_clearScreen>
	LCD_displayString("new password");
    28c4:	89 ef       	ldi	r24, 0xF9	; 249
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(2,4);
    28cc:	82 e0       	ldi	r24, 0x02	; 2
    28ce:	64 e0       	ldi	r22, 0x04	; 4
    28d0:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
    28d4:	5e 01       	movw	r10, r28
    28d6:	08 94       	sec
    28d8:	a1 1c       	adc	r10, r1
    28da:	b1 1c       	adc	r11, r1
    28dc:	75 01       	movw	r14, r10
    28de:	96 e0       	ldi	r25, 0x06	; 6
    28e0:	c9 2e       	mov	r12, r25
    28e2:	d1 2c       	mov	r13, r1
    28e4:	cc 0e       	add	r12, r28
    28e6:	dd 1e       	adc	r13, r29
    28e8:	08 ec       	ldi	r16, 0xC8	; 200
    28ea:	10 e0       	ldi	r17, 0x00	; 0
	while(i<5){
		pass[i] = KEYPAD_getCharacter();
    28ec:	0e 94 0e 11 	call	0x221c	; 0x221c <KEYPAD_getCharacter>
    28f0:	f7 01       	movw	r30, r14
    28f2:	80 83       	st	Z, r24
		LCD_characterDisplay('*');
    28f4:	8a e2       	ldi	r24, 0x2A	; 42
    28f6:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <LCD_characterDisplay>
		DIO_writeChannel(&buzzer , 1);
    28fa:	83 e4       	ldi	r24, 0x43	; 67
    28fc:	92 e0       	ldi	r25, 0x02	; 2
    28fe:	61 e0       	ldi	r22, 0x01	; 1
    2900:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	c8 01       	movw	r24, r16
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	f1 f7       	brne	.-4      	; 0x290a <HMI_set_password+0x68>
    290e:	2f 5f       	subi	r18, 0xFF	; 255
    2910:	3f 4f       	sbci	r19, 0xFF	; 255
    2912:	f1 e0       	ldi	r31, 0x01	; 1
    2914:	24 3f       	cpi	r18, 0xF4	; 244
    2916:	3f 07       	cpc	r19, r31
    2918:	b9 f7       	brne	.-18     	; 0x2908 <HMI_set_password+0x66>
		_delay_ms(50);
		DIO_writeChannel(&buzzer , 0);
    291a:	83 e4       	ldi	r24, 0x43	; 67
    291c:	92 e0       	ldi	r25, 0x02	; 2
    291e:	60 e0       	ldi	r22, 0x00	; 0
    2920:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
		i++;
		while(!KEYPAD_keyRelaesed());
    2924:	0e 94 74 10 	call	0x20e8	; 0x20e8 <KEYPAD_keyRelaesed>
    2928:	88 23       	and	r24, r24
    292a:	e1 f3       	breq	.-8      	; 0x2924 <HMI_set_password+0x82>
    292c:	08 94       	sec
    292e:	e1 1c       	adc	r14, r1
    2930:	f1 1c       	adc	r15, r1
	uint8 i = 0;
	uint8 pass[5];
	LCD_clearScreen();
	LCD_displayString("new password");
	LCD_goTo(2,4);
	while(i<5){
    2932:	ec 14       	cp	r14, r12
    2934:	fd 04       	cpc	r15, r13
    2936:	d1 f6       	brne	.-76     	; 0x28ec <HMI_set_password+0x4a>
		_delay_ms(50);
		DIO_writeChannel(&buzzer , 0);
		i++;
		while(!KEYPAD_keyRelaesed());
	}
	UART_transmitString(pass , 5);
    2938:	c5 01       	movw	r24, r10
    293a:	65 e0       	ldi	r22, 0x05	; 5
    293c:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_transmitString>
}
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	1f 91       	pop	r17
    2950:	0f 91       	pop	r16
    2952:	ff 90       	pop	r15
    2954:	ef 90       	pop	r14
    2956:	df 90       	pop	r13
    2958:	cf 90       	pop	r12
    295a:	bf 90       	pop	r11
    295c:	af 90       	pop	r10
    295e:	08 95       	ret

00002960 <HMI_getpassword>:
	}
	UART_transmitString(pass , 5);
}


void HMI_getpassword(void){
    2960:	af 92       	push	r10
    2962:	bf 92       	push	r11
    2964:	cf 92       	push	r12
    2966:	df 92       	push	r13
    2968:	ef 92       	push	r14
    296a:	ff 92       	push	r15
    296c:	0f 93       	push	r16
    296e:	1f 93       	push	r17
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	00 d0       	rcall	.+0      	; 0x2976 <HMI_getpassword+0x16>
    2976:	00 d0       	rcall	.+0      	; 0x2978 <HMI_getpassword+0x18>
    2978:	0f 92       	push	r0
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
	uint8 i = 0;
	uint8 pass[5];
	LCD_clearScreen();
    297e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_clearScreen>
	LCD_displayString("enter password");
    2982:	86 e0       	ldi	r24, 0x06	; 6
    2984:	91 e0       	ldi	r25, 0x01	; 1
    2986:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(2,4);
    298a:	82 e0       	ldi	r24, 0x02	; 2
    298c:	64 e0       	ldi	r22, 0x04	; 4
    298e:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
    2992:	5e 01       	movw	r10, r28
    2994:	08 94       	sec
    2996:	a1 1c       	adc	r10, r1
    2998:	b1 1c       	adc	r11, r1
    299a:	75 01       	movw	r14, r10
    299c:	26 e0       	ldi	r18, 0x06	; 6
    299e:	c2 2e       	mov	r12, r18
    29a0:	d1 2c       	mov	r13, r1
    29a2:	cc 0e       	add	r12, r28
    29a4:	dd 1e       	adc	r13, r29
    29a6:	08 ec       	ldi	r16, 0xC8	; 200
    29a8:	10 e0       	ldi	r17, 0x00	; 0
	while(i<5){
		pass[i] = KEYPAD_getCharacter();
    29aa:	0e 94 0e 11 	call	0x221c	; 0x221c <KEYPAD_getCharacter>
    29ae:	f7 01       	movw	r30, r14
    29b0:	80 83       	st	Z, r24
		LCD_characterDisplay('*');
    29b2:	8a e2       	ldi	r24, 0x2A	; 42
    29b4:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <LCD_characterDisplay>
		DIO_writeChannel(&buzzer , 1);
    29b8:	83 e4       	ldi	r24, 0x43	; 67
    29ba:	92 e0       	ldi	r25, 0x02	; 2
    29bc:	61 e0       	ldi	r22, 0x01	; 1
    29be:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	c8 01       	movw	r24, r16
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <HMI_getpassword+0x68>
    29cc:	2f 5f       	subi	r18, 0xFF	; 255
    29ce:	3f 4f       	sbci	r19, 0xFF	; 255
    29d0:	f1 e0       	ldi	r31, 0x01	; 1
    29d2:	24 3f       	cpi	r18, 0xF4	; 244
    29d4:	3f 07       	cpc	r19, r31
    29d6:	b9 f7       	brne	.-18     	; 0x29c6 <HMI_getpassword+0x66>
		_delay_ms(50);
		DIO_writeChannel(&buzzer , 0);
    29d8:	83 e4       	ldi	r24, 0x43	; 67
    29da:	92 e0       	ldi	r25, 0x02	; 2
    29dc:	60 e0       	ldi	r22, 0x00	; 0
    29de:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
		i++;
		while(!KEYPAD_keyRelaesed());
    29e2:	0e 94 74 10 	call	0x20e8	; 0x20e8 <KEYPAD_keyRelaesed>
    29e6:	88 23       	and	r24, r24
    29e8:	e1 f3       	breq	.-8      	; 0x29e2 <HMI_getpassword+0x82>
    29ea:	08 94       	sec
    29ec:	e1 1c       	adc	r14, r1
    29ee:	f1 1c       	adc	r15, r1
	uint8 i = 0;
	uint8 pass[5];
	LCD_clearScreen();
	LCD_displayString("enter password");
	LCD_goTo(2,4);
	while(i<5){
    29f0:	ec 14       	cp	r14, r12
    29f2:	fd 04       	cpc	r15, r13
    29f4:	d1 f6       	brne	.-76     	; 0x29aa <HMI_getpassword+0x4a>
		_delay_ms(50);
		DIO_writeChannel(&buzzer , 0);
		i++;
		while(!KEYPAD_keyRelaesed());
	}
	UART_transmitString(pass , 5);
    29f6:	c5 01       	movw	r24, r10
    29f8:	65 e0       	ldi	r22, 0x05	; 5
    29fa:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_transmitString>
}
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	ff 90       	pop	r15
    2a12:	ef 90       	pop	r14
    2a14:	df 90       	pop	r13
    2a16:	cf 90       	pop	r12
    2a18:	bf 90       	pop	r11
    2a1a:	af 90       	pop	r10
    2a1c:	08 95       	ret

00002a1e <HMI_getOldPassword>:
	LCD_clearScreen();
	LCD_displayString("lw msktak");
	LCD_goTo(1,0);
	LCD_displayString("H........");
}
void HMI_getOldPassword(void){
    2a1e:	af 92       	push	r10
    2a20:	bf 92       	push	r11
    2a22:	cf 92       	push	r12
    2a24:	df 92       	push	r13
    2a26:	ef 92       	push	r14
    2a28:	ff 92       	push	r15
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	00 d0       	rcall	.+0      	; 0x2a34 <HMI_getOldPassword+0x16>
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <HMI_getOldPassword+0x18>
    2a36:	0f 92       	push	r0
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
	uint8 i = 0;
	uint8 pass[5];
	LCD_clearScreen();
    2a3c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_clearScreen>
	LCD_displayString("old password");
    2a40:	85 e1       	ldi	r24, 0x15	; 21
    2a42:	91 e0       	ldi	r25, 0x01	; 1
    2a44:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(2,4);
    2a48:	82 e0       	ldi	r24, 0x02	; 2
    2a4a:	64 e0       	ldi	r22, 0x04	; 4
    2a4c:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
    2a50:	5e 01       	movw	r10, r28
    2a52:	08 94       	sec
    2a54:	a1 1c       	adc	r10, r1
    2a56:	b1 1c       	adc	r11, r1
    2a58:	75 01       	movw	r14, r10
    2a5a:	36 e0       	ldi	r19, 0x06	; 6
    2a5c:	c3 2e       	mov	r12, r19
    2a5e:	d1 2c       	mov	r13, r1
    2a60:	cc 0e       	add	r12, r28
    2a62:	dd 1e       	adc	r13, r29
    2a64:	08 ec       	ldi	r16, 0xC8	; 200
    2a66:	10 e0       	ldi	r17, 0x00	; 0
	while(i<5){
		pass[i] = KEYPAD_getCharacter();
    2a68:	0e 94 0e 11 	call	0x221c	; 0x221c <KEYPAD_getCharacter>
    2a6c:	f7 01       	movw	r30, r14
    2a6e:	80 83       	st	Z, r24
		LCD_characterDisplay('*');
    2a70:	8a e2       	ldi	r24, 0x2A	; 42
    2a72:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <LCD_characterDisplay>
		DIO_writeChannel(&buzzer , 1);
    2a76:	83 e4       	ldi	r24, 0x43	; 67
    2a78:	92 e0       	ldi	r25, 0x02	; 2
    2a7a:	61 e0       	ldi	r22, 0x01	; 1
    2a7c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	c8 01       	movw	r24, r16
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <HMI_getOldPassword+0x68>
    2a8a:	2f 5f       	subi	r18, 0xFF	; 255
    2a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8e:	f1 e0       	ldi	r31, 0x01	; 1
    2a90:	24 3f       	cpi	r18, 0xF4	; 244
    2a92:	3f 07       	cpc	r19, r31
    2a94:	b9 f7       	brne	.-18     	; 0x2a84 <HMI_getOldPassword+0x66>
		_delay_ms(50);
		DIO_writeChannel(&buzzer , 0);
    2a96:	83 e4       	ldi	r24, 0x43	; 67
    2a98:	92 e0       	ldi	r25, 0x02	; 2
    2a9a:	60 e0       	ldi	r22, 0x00	; 0
    2a9c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
		i++;
		while(!KEYPAD_keyRelaesed());
    2aa0:	0e 94 74 10 	call	0x20e8	; 0x20e8 <KEYPAD_keyRelaesed>
    2aa4:	88 23       	and	r24, r24
    2aa6:	e1 f3       	breq	.-8      	; 0x2aa0 <HMI_getOldPassword+0x82>
    2aa8:	08 94       	sec
    2aaa:	e1 1c       	adc	r14, r1
    2aac:	f1 1c       	adc	r15, r1
	uint8 i = 0;
	uint8 pass[5];
	LCD_clearScreen();
	LCD_displayString("old password");
	LCD_goTo(2,4);
	while(i<5){
    2aae:	ec 14       	cp	r14, r12
    2ab0:	fd 04       	cpc	r15, r13
    2ab2:	d1 f6       	brne	.-76     	; 0x2a68 <HMI_getOldPassword+0x4a>
		_delay_ms(50);
		DIO_writeChannel(&buzzer , 0);
		i++;
		while(!KEYPAD_keyRelaesed());
	}
	UART_transmitString(pass , 5);
    2ab4:	c5 01       	movw	r24, r10
    2ab6:	65 e0       	ldi	r22, 0x05	; 5
    2ab8:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_transmitString>
}
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	1f 91       	pop	r17
    2acc:	0f 91       	pop	r16
    2ace:	ff 90       	pop	r15
    2ad0:	ef 90       	pop	r14
    2ad2:	df 90       	pop	r13
    2ad4:	cf 90       	pop	r12
    2ad6:	bf 90       	pop	r11
    2ad8:	af 90       	pop	r10
    2ada:	08 95       	ret

00002adc <select>:
	_delay_ms(50);
	DIO_writeChannel(&buzzer , 0);
}

void select(void){
	switch(pos){
    2adc:	80 91 42 02 	lds	r24, 0x0242
    2ae0:	82 30       	cpi	r24, 0x02	; 2
    2ae2:	21 f1       	breq	.+72     	; 0x2b2c <select+0x50>
    2ae4:	83 30       	cpi	r24, 0x03	; 3
    2ae6:	f1 f0       	breq	.+60     	; 0x2b24 <select+0x48>
    2ae8:	81 30       	cpi	r24, 0x01	; 1
    2aea:	c1 f0       	breq	.+48     	; 0x2b1c <select+0x40>
		break;
	case 3:
		UART_transmit('c');
		break;
	}
	DIO_writeChannel(&buzzer , 1);
    2aec:	83 e4       	ldi	r24, 0x43	; 67
    2aee:	92 e0       	ldi	r25, 0x02	; 2
    2af0:	61 e0       	ldi	r22, 0x01	; 1
    2af2:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	48 ec       	ldi	r20, 0xC8	; 200
    2afc:	50 e0       	ldi	r21, 0x00	; 0
    2afe:	ca 01       	movw	r24, r20
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	f1 f7       	brne	.-4      	; 0x2b00 <select+0x24>
    2b04:	2f 5f       	subi	r18, 0xFF	; 255
    2b06:	3f 4f       	sbci	r19, 0xFF	; 255
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	24 3f       	cpi	r18, 0xF4	; 244
    2b0c:	38 07       	cpc	r19, r24
    2b0e:	b9 f7       	brne	.-18     	; 0x2afe <select+0x22>
	_delay_ms(50);
	DIO_writeChannel(&buzzer , 0);
    2b10:	83 e4       	ldi	r24, 0x43	; 67
    2b12:	92 e0       	ldi	r25, 0x02	; 2
    2b14:	60 e0       	ldi	r22, 0x00	; 0
    2b16:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
}
    2b1a:	08 95       	ret
}

void select(void){
	switch(pos){
	case 1:
		UART_transmit('u');
    2b1c:	85 e7       	ldi	r24, 0x75	; 117
    2b1e:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_transmit>
    2b22:	e4 cf       	rjmp	.-56     	; 0x2aec <select+0x10>
		break;
	case 2:
		UART_transmit('t');
		break;
	case 3:
		UART_transmit('c');
    2b24:	83 e6       	ldi	r24, 0x63	; 99
    2b26:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_transmit>
    2b2a:	e0 cf       	rjmp	.-64     	; 0x2aec <select+0x10>
	switch(pos){
	case 1:
		UART_transmit('u');
		break;
	case 2:
		UART_transmit('t');
    2b2c:	84 e7       	ldi	r24, 0x74	; 116
    2b2e:	0e 94 40 06 	call	0xc80	; 0xc80 <UART_transmit>
    2b32:	dc cf       	rjmp	.-72     	; 0x2aec <select+0x10>

00002b34 <movedown>:

#include "HMI_utility_functions.h"
volatile uint8 pos = 1;


void movedown(void){
    2b34:	1f 93       	push	r17
	pos++;
    2b36:	80 91 42 02 	lds	r24, 0x0242
    2b3a:	8f 5f       	subi	r24, 0xFF	; 255
    2b3c:	80 93 42 02 	sts	0x0242, r24
	if(pos > 3){
    2b40:	80 91 42 02 	lds	r24, 0x0242
    2b44:	84 30       	cpi	r24, 0x04	; 4
    2b46:	18 f0       	brcs	.+6      	; 0x2b4e <movedown+0x1a>
		pos = 3;
    2b48:	83 e0       	ldi	r24, 0x03	; 3
    2b4a:	80 93 42 02 	sts	0x0242, r24
	}
	HMI_moveArrow(pos);
    2b4e:	10 91 42 02 	lds	r17, 0x0242

void HMI_moveArrow(uint8 pos){
	if((pos>3) && (pos<1)){
		return;
	}
	LCD_goTo(1,0);
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	60 e0       	ldi	r22, 0x00	; 0
    2b56:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("  ");
    2b5a:	8f ec       	ldi	r24, 0xCF	; 207
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(2,0);
    2b62:	82 e0       	ldi	r24, 0x02	; 2
    2b64:	60 e0       	ldi	r22, 0x00	; 0
    2b66:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("  ");
    2b6a:	8f ec       	ldi	r24, 0xCF	; 207
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(3,0);
    2b72:	83 e0       	ldi	r24, 0x03	; 3
    2b74:	60 e0       	ldi	r22, 0x00	; 0
    2b76:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("  ");
    2b7a:	8f ec       	ldi	r24, 0xCF	; 207
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(pos,0);
    2b82:	81 2f       	mov	r24, r17
    2b84:	60 e0       	ldi	r22, 0x00	; 0
    2b86:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("->");
    2b8a:	82 ed       	ldi	r24, 0xD2	; 210
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	pos++;
	if(pos > 3){
		pos = 3;
	}
	HMI_moveArrow(pos);
	DIO_writeChannel(&buzzer , 1);
    2b92:	83 e4       	ldi	r24, 0x43	; 67
    2b94:	92 e0       	ldi	r25, 0x02	; 2
    2b96:	61 e0       	ldi	r22, 0x01	; 1
    2b98:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	48 ec       	ldi	r20, 0xC8	; 200
    2ba2:	50 e0       	ldi	r21, 0x00	; 0
    2ba4:	ca 01       	movw	r24, r20
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <movedown+0x72>
    2baa:	2f 5f       	subi	r18, 0xFF	; 255
    2bac:	3f 4f       	sbci	r19, 0xFF	; 255
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	24 3f       	cpi	r18, 0xF4	; 244
    2bb2:	38 07       	cpc	r19, r24
    2bb4:	b9 f7       	brne	.-18     	; 0x2ba4 <movedown+0x70>
	_delay_ms(50);
	DIO_writeChannel(&buzzer , 0);
    2bb6:	83 e4       	ldi	r24, 0x43	; 67
    2bb8:	92 e0       	ldi	r25, 0x02	; 2
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
}
    2bc0:	1f 91       	pop	r17
    2bc2:	08 95       	ret

00002bc4 <moveup>:
void moveup(void){
    2bc4:	1f 93       	push	r17
	pos--;
    2bc6:	80 91 42 02 	lds	r24, 0x0242
    2bca:	81 50       	subi	r24, 0x01	; 1
    2bcc:	80 93 42 02 	sts	0x0242, r24
	if(pos < 1){
    2bd0:	80 91 42 02 	lds	r24, 0x0242
    2bd4:	88 23       	and	r24, r24
    2bd6:	19 f4       	brne	.+6      	; 0x2bde <moveup+0x1a>
		pos = 1;
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	80 93 42 02 	sts	0x0242, r24
	}
	HMI_moveArrow(pos);
    2bde:	10 91 42 02 	lds	r17, 0x0242

void HMI_moveArrow(uint8 pos){
	if((pos>3) && (pos<1)){
		return;
	}
	LCD_goTo(1,0);
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	60 e0       	ldi	r22, 0x00	; 0
    2be6:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("  ");
    2bea:	8f ec       	ldi	r24, 0xCF	; 207
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(2,0);
    2bf2:	82 e0       	ldi	r24, 0x02	; 2
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("  ");
    2bfa:	8f ec       	ldi	r24, 0xCF	; 207
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(3,0);
    2c02:	83 e0       	ldi	r24, 0x03	; 3
    2c04:	60 e0       	ldi	r22, 0x00	; 0
    2c06:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("  ");
    2c0a:	8f ec       	ldi	r24, 0xCF	; 207
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	LCD_goTo(pos,0);
    2c12:	81 2f       	mov	r24, r17
    2c14:	60 e0       	ldi	r22, 0x00	; 0
    2c16:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <LCD_goTo>
	LCD_displayString("->");
    2c1a:	82 ed       	ldi	r24, 0xD2	; 210
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_displayString>
	pos--;
	if(pos < 1){
		pos = 1;
	}
	HMI_moveArrow(pos);
	DIO_writeChannel(&buzzer , 1);
    2c22:	83 e4       	ldi	r24, 0x43	; 67
    2c24:	92 e0       	ldi	r25, 0x02	; 2
    2c26:	61 e0       	ldi	r22, 0x01	; 1
    2c28:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	48 ec       	ldi	r20, 0xC8	; 200
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	ca 01       	movw	r24, r20
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	f1 f7       	brne	.-4      	; 0x2c36 <moveup+0x72>
    2c3a:	2f 5f       	subi	r18, 0xFF	; 255
    2c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	24 3f       	cpi	r18, 0xF4	; 244
    2c42:	38 07       	cpc	r19, r24
    2c44:	b9 f7       	brne	.-18     	; 0x2c34 <moveup+0x70>
	_delay_ms(50);
	DIO_writeChannel(&buzzer , 0);
    2c46:	83 e4       	ldi	r24, 0x43	; 67
    2c48:	92 e0       	ldi	r25, 0x02	; 2
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_writeChannel>
}
    2c50:	1f 91       	pop	r17
    2c52:	08 95       	ret

00002c54 <__udivmodhi4>:
    2c54:	aa 1b       	sub	r26, r26
    2c56:	bb 1b       	sub	r27, r27
    2c58:	51 e1       	ldi	r21, 0x11	; 17
    2c5a:	07 c0       	rjmp	.+14     	; 0x2c6a <__udivmodhi4_ep>

00002c5c <__udivmodhi4_loop>:
    2c5c:	aa 1f       	adc	r26, r26
    2c5e:	bb 1f       	adc	r27, r27
    2c60:	a6 17       	cp	r26, r22
    2c62:	b7 07       	cpc	r27, r23
    2c64:	10 f0       	brcs	.+4      	; 0x2c6a <__udivmodhi4_ep>
    2c66:	a6 1b       	sub	r26, r22
    2c68:	b7 0b       	sbc	r27, r23

00002c6a <__udivmodhi4_ep>:
    2c6a:	88 1f       	adc	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	5a 95       	dec	r21
    2c70:	a9 f7       	brne	.-22     	; 0x2c5c <__udivmodhi4_loop>
    2c72:	80 95       	com	r24
    2c74:	90 95       	com	r25
    2c76:	bc 01       	movw	r22, r24
    2c78:	cd 01       	movw	r24, r26
    2c7a:	08 95       	ret

00002c7c <__udivmodsi4>:
    2c7c:	a1 e2       	ldi	r26, 0x21	; 33
    2c7e:	1a 2e       	mov	r1, r26
    2c80:	aa 1b       	sub	r26, r26
    2c82:	bb 1b       	sub	r27, r27
    2c84:	fd 01       	movw	r30, r26
    2c86:	0d c0       	rjmp	.+26     	; 0x2ca2 <__udivmodsi4_ep>

00002c88 <__udivmodsi4_loop>:
    2c88:	aa 1f       	adc	r26, r26
    2c8a:	bb 1f       	adc	r27, r27
    2c8c:	ee 1f       	adc	r30, r30
    2c8e:	ff 1f       	adc	r31, r31
    2c90:	a2 17       	cp	r26, r18
    2c92:	b3 07       	cpc	r27, r19
    2c94:	e4 07       	cpc	r30, r20
    2c96:	f5 07       	cpc	r31, r21
    2c98:	20 f0       	brcs	.+8      	; 0x2ca2 <__udivmodsi4_ep>
    2c9a:	a2 1b       	sub	r26, r18
    2c9c:	b3 0b       	sbc	r27, r19
    2c9e:	e4 0b       	sbc	r30, r20
    2ca0:	f5 0b       	sbc	r31, r21

00002ca2 <__udivmodsi4_ep>:
    2ca2:	66 1f       	adc	r22, r22
    2ca4:	77 1f       	adc	r23, r23
    2ca6:	88 1f       	adc	r24, r24
    2ca8:	99 1f       	adc	r25, r25
    2caa:	1a 94       	dec	r1
    2cac:	69 f7       	brne	.-38     	; 0x2c88 <__udivmodsi4_loop>
    2cae:	60 95       	com	r22
    2cb0:	70 95       	com	r23
    2cb2:	80 95       	com	r24
    2cb4:	90 95       	com	r25
    2cb6:	9b 01       	movw	r18, r22
    2cb8:	ac 01       	movw	r20, r24
    2cba:	bd 01       	movw	r22, r26
    2cbc:	cf 01       	movw	r24, r30
    2cbe:	08 95       	ret

00002cc0 <__prologue_saves__>:
    2cc0:	2f 92       	push	r2
    2cc2:	3f 92       	push	r3
    2cc4:	4f 92       	push	r4
    2cc6:	5f 92       	push	r5
    2cc8:	6f 92       	push	r6
    2cca:	7f 92       	push	r7
    2ccc:	8f 92       	push	r8
    2cce:	9f 92       	push	r9
    2cd0:	af 92       	push	r10
    2cd2:	bf 92       	push	r11
    2cd4:	cf 92       	push	r12
    2cd6:	df 92       	push	r13
    2cd8:	ef 92       	push	r14
    2cda:	ff 92       	push	r15
    2cdc:	0f 93       	push	r16
    2cde:	1f 93       	push	r17
    2ce0:	cf 93       	push	r28
    2ce2:	df 93       	push	r29
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	ca 1b       	sub	r28, r26
    2cea:	db 0b       	sbc	r29, r27
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	f8 94       	cli
    2cf0:	de bf       	out	0x3e, r29	; 62
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	cd bf       	out	0x3d, r28	; 61
    2cf6:	09 94       	ijmp

00002cf8 <__epilogue_restores__>:
    2cf8:	2a 88       	ldd	r2, Y+18	; 0x12
    2cfa:	39 88       	ldd	r3, Y+17	; 0x11
    2cfc:	48 88       	ldd	r4, Y+16	; 0x10
    2cfe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d00:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d02:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d04:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d06:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d08:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d0a:	b9 84       	ldd	r11, Y+9	; 0x09
    2d0c:	c8 84       	ldd	r12, Y+8	; 0x08
    2d0e:	df 80       	ldd	r13, Y+7	; 0x07
    2d10:	ee 80       	ldd	r14, Y+6	; 0x06
    2d12:	fd 80       	ldd	r15, Y+5	; 0x05
    2d14:	0c 81       	ldd	r16, Y+4	; 0x04
    2d16:	1b 81       	ldd	r17, Y+3	; 0x03
    2d18:	aa 81       	ldd	r26, Y+2	; 0x02
    2d1a:	b9 81       	ldd	r27, Y+1	; 0x01
    2d1c:	ce 0f       	add	r28, r30
    2d1e:	d1 1d       	adc	r29, r1
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	de bf       	out	0x3e, r29	; 62
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	cd bf       	out	0x3d, r28	; 61
    2d2a:	ed 01       	movw	r28, r26
    2d2c:	08 95       	ret

00002d2e <_exit>:
    2d2e:	f8 94       	cli

00002d30 <__stop_program>:
    2d30:	ff cf       	rjmp	.-2      	; 0x2d30 <__stop_program>
