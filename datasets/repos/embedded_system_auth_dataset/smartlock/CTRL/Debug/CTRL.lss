
CTRL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014e  00800060  00002f92  00003026  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  008001ae  008001ae  00003174  2**0
                  ALLOC
  3 .stab         000069a8  00000000  00000000  00003174  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003eda  00000000  00000000  00009b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000d9f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  0000db56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  0000dd0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  0000fc19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  00010ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00011d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  00011e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  00012182  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012a78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__vector_1>
       8:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__vector_2>
       c:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__vector_3>
      10:	0c 94 25 09 	jmp	0x124a	; 0x124a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__vector_8>
      24:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__vector_18>
      4c:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3c       	cpi	r26, 0xCD	; 205
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 13 	call	0x2774	; 0x2774 <main>
      8a:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__fixsfsi+0x80>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__fixsfsi+0x80>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__fixsfsi+0x8a>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__fixsfsi+0x94>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__fixsfsi+0x80>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__fixsfsi+0x8a>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__fixsfsi+0x94>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__fixsfsi+0x9c>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__fixsfsi+0x9c>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__fixsfsi+0x9c>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__fixsfsi+0x9c>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <UART_init>:

volatile uint8 recieved_data ;
volatile void(*g_callback)(void) = NULL;


void UART_init(uartConfig_t * uartConfig){
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	ec 01       	movw	r28, r24
	uint16 baudrate_reg = 0;
	if(uartConfig->mode == asynchronous){
     d76:	18 81       	ld	r17, Y
     d78:	11 23       	and	r17, r17
     d7a:	09 f4       	brne	.+2      	; 0xd7e <UART_init+0x10>
     d7c:	3f c0       	rjmp	.+126    	; 0xdfc <UART_init+0x8e>
		baudrate_reg = (uint16)((F_CPU / (16.0 * uartConfig->baudrate)) - 1);
	}
	else if(uartConfig->mode == synchronous){
     d7e:	11 30       	cpi	r17, 0x01	; 1
     d80:	09 f4       	brne	.+2      	; 0xd84 <UART_init+0x16>
     d82:	5a c0       	rjmp	.+180    	; 0xe38 <UART_init+0xca>
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	60 e0       	ldi	r22, 0x00	; 0
		baudrate_reg = (uint16)((F_CPU / (2.0 * uartConfig->baudrate)) - 1);
	}

	_UCSRB._TXEN = 1;	/*Receiver enabled*/
     d88:	53 9a       	sbi	0x0a, 3	; 10
	_UCSRB._RXEN = 1;	/*transmitter enabled*/
     d8a:	54 9a       	sbi	0x0a, 4	; 10

	_UCSRB._UCSZ2 = 0;	/*Character size will not be 9*/
     d8c:	52 98       	cbi	0x0a, 2	; 10

	_UCSRC._URSEL 	= 1;						/*this bit set to one to allow accessing to UCSRC */
     d8e:	80 b5       	in	r24, 0x20	; 32
     d90:	80 64       	ori	r24, 0x40	; 64
     d92:	80 bd       	out	0x20, r24	; 32
	_UCSRC._UMSEL 	= uartConfig->mode ;		/*configure the mode of UART*/
     d94:	11 70       	andi	r17, 0x01	; 1
     d96:	12 95       	swap	r17
     d98:	11 0f       	add	r17, r17
     d9a:	10 7e       	andi	r17, 0xE0	; 224
     d9c:	80 b5       	in	r24, 0x20	; 32
     d9e:	8f 7d       	andi	r24, 0xDF	; 223
     da0:	81 2b       	or	r24, r17
     da2:	80 bd       	out	0x20, r24	; 32
	_UCSRC._UPM 	= uartConfig->parity ;		/*configure the parity bits type */
     da4:	99 81       	ldd	r25, Y+1	; 0x01
     da6:	93 70       	andi	r25, 0x03	; 3
     da8:	99 0f       	add	r25, r25
     daa:	99 0f       	add	r25, r25
     dac:	99 0f       	add	r25, r25
     dae:	80 b5       	in	r24, 0x20	; 32
     db0:	87 7e       	andi	r24, 0xE7	; 231
     db2:	89 2b       	or	r24, r25
     db4:	80 bd       	out	0x20, r24	; 32
	_UCSRC._USBS 	= uartConfig->stop_num;		/*configure the number of stop bits*/
     db6:	9a 81       	ldd	r25, Y+2	; 0x02
     db8:	91 70       	andi	r25, 0x01	; 1
     dba:	99 0f       	add	r25, r25
     dbc:	99 0f       	add	r25, r25
     dbe:	80 b5       	in	r24, 0x20	; 32
     dc0:	8b 7f       	andi	r24, 0xFB	; 251
     dc2:	89 2b       	or	r24, r25
     dc4:	80 bd       	out	0x20, r24	; 32
	_UCSRC._UCSZ1_0 = uartConfig->char_size;	/*configure the character size*/
     dc6:	9b 81       	ldd	r25, Y+3	; 0x03
     dc8:	91 70       	andi	r25, 0x01	; 1
     dca:	99 0f       	add	r25, r25
     dcc:	80 b5       	in	r24, 0x20	; 32
     dce:	8d 7f       	andi	r24, 0xFD	; 253
     dd0:	89 2b       	or	r24, r25
     dd2:	80 bd       	out	0x20, r24	; 32
	_UCSRC._UCPOL 	= uartConfig->polarity ;	/*configure the polarity*/
     dd4:	9c 81       	ldd	r25, Y+4	; 0x04
     dd6:	91 70       	andi	r25, 0x01	; 1
     dd8:	80 b5       	in	r24, 0x20	; 32
     dda:	8e 7f       	andi	r24, 0xFE	; 254
     ddc:	89 2b       	or	r24, r25
     dde:	80 bd       	out	0x20, r24	; 32

	_UCSRB._RXCIE 	= 1;	/*enable receiving interrupt*/
     de0:	57 9a       	sbi	0x0a, 7	; 10

	_UCSRC._URSEL = 0;								/*this bit set to zero to allow accessing to UBRR */
     de2:	80 b5       	in	r24, 0x20	; 32
     de4:	8f 7b       	andi	r24, 0xBF	; 191
     de6:	80 bd       	out	0x20, r24	; 32
	_UBRRH._UBRR = (uint8)((baudrate_reg) >> 8);	/*configure the most 4 bits of UBRR*/
     de8:	7f 70       	andi	r23, 0x0F	; 15
     dea:	80 b5       	in	r24, 0x20	; 32
     dec:	80 7f       	andi	r24, 0xF0	; 240
     dee:	87 2b       	or	r24, r23
     df0:	80 bd       	out	0x20, r24	; 32
	_UBRRL = (uint8)baudrate_reg;					/*configure the least 8 bits of UBRR register*/
     df2:	69 b9       	out	0x09, r22	; 9


}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	08 95       	ret


void UART_init(uartConfig_t * uartConfig){
	uint16 baudrate_reg = 0;
	if(uartConfig->mode == asynchronous){
		baudrate_reg = (uint16)((F_CPU / (16.0 * uartConfig->baudrate)) - 1);
     dfc:	6d 81       	ldd	r22, Y+5	; 0x05
     dfe:	7e 81       	ldd	r23, Y+6	; 0x06
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	40 e8       	ldi	r20, 0x80	; 128
     e0e:	51 e4       	ldi	r21, 0x41	; 65
     e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
	}
	else if(uartConfig->mode == synchronous){
		baudrate_reg = (uint16)((F_CPU / (2.0 * uartConfig->baudrate)) - 1);
     e14:	9b 01       	movw	r18, r22
     e16:	ac 01       	movw	r20, r24
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	74 e2       	ldi	r23, 0x24	; 36
     e1c:	84 ef       	ldi	r24, 0xF4	; 244
     e1e:	9a e4       	ldi	r25, 0x4A	; 74
     e20:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e8       	ldi	r20, 0x80	; 128
     e2a:	5f e3       	ldi	r21, 0x3F	; 63
     e2c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e34:	7f 70       	andi	r23, 0x0F	; 15
     e36:	a8 cf       	rjmp	.-176    	; 0xd88 <UART_init+0x1a>
     e38:	6d 81       	ldd	r22, Y+5	; 0x05
     e3a:	7e 81       	ldd	r23, Y+6	; 0x06
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
     e44:	9b 01       	movw	r18, r22
     e46:	ac 01       	movw	r20, r24
     e48:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     e4c:	e3 cf       	rjmp	.-58     	; 0xe14 <UART_init+0xa6>

00000e4e <UART_transmit>:
	_UBRRL = (uint8)baudrate_reg;					/*configure the least 8 bits of UBRR register*/


}
void UART_transmit(uint8 data){
	while(!_UCSRA._UDRE);	/*wait until the the register is empty*/
     e4e:	5d 9b       	sbis	0x0b, 5	; 11
     e50:	fe cf       	rjmp	.-4      	; 0xe4e <UART_transmit>
//	while(BIT_IS_CLEAR(UCSRA , UDRE)) ;
	_UDR = data;			/*send the data*/
     e52:	8c b9       	out	0x0c, r24	; 12
}
     e54:	08 95       	ret

00000e56 <UART_receive>:
uint8 UART_receive(void){
//	while(!_UCSRA._RXC);	/*wait until the receiving operation completes*/
	while(BIT_IS_CLEAR(UCSRA ,RXC)) ;
     e56:	5f 9b       	sbis	0x0b, 7	; 11
     e58:	fe cf       	rjmp	.-4      	; 0xe56 <UART_receive>
	return _UDR;			/*return the received data*/
     e5a:	8c b1       	in	r24, 0x0c	; 12
}
     e5c:	08 95       	ret

00000e5e <UART_transmitString>:


void UART_transmitString(uint8* data , uint8 size){
     e5e:	48 2f       	mov	r20, r24
	uint8 i = 0;
	while(i<size){
     e60:	66 23       	and	r22, r22
     e62:	59 f0       	breq	.+22     	; 0xe7a <UART_transmitString+0x1c>
     e64:	9c 01       	movw	r18, r24
     e66:	f9 01       	movw	r30, r18
		UART_transmit(data[i]);
     e68:	80 81       	ld	r24, Z
	_UBRRL = (uint8)baudrate_reg;					/*configure the least 8 bits of UBRR register*/


}
void UART_transmit(uint8 data){
	while(!_UCSRA._UDRE);	/*wait until the the register is empty*/
     e6a:	5d 9b       	sbis	0x0b, 5	; 11
     e6c:	fe cf       	rjmp	.-4      	; 0xe6a <UART_transmitString+0xc>
//	while(BIT_IS_CLEAR(UCSRA , UDRE)) ;
	_UDR = data;			/*send the data*/
     e6e:	8c b9       	out	0x0c, r24	; 12
     e70:	31 96       	adiw	r30, 0x01	; 1
}


void UART_transmitString(uint8* data , uint8 size){
	uint8 i = 0;
	while(i<size){
     e72:	8e 2f       	mov	r24, r30
     e74:	84 1b       	sub	r24, r20
     e76:	86 17       	cp	r24, r22
     e78:	b8 f3       	brcs	.-18     	; 0xe68 <UART_transmitString+0xa>
     e7a:	08 95       	ret

00000e7c <UART_receiveString>:
		UART_transmit(data[i]);
		i++;
	}
}
void UART_receiveString(uint8 * rec_data , uint8 size){
     e7c:	48 2f       	mov	r20, r24
	uint8 i = 0;
	while(i<size){
     e7e:	66 23       	and	r22, r22
     e80:	51 f0       	breq	.+20     	; 0xe96 <UART_receiveString+0x1a>
     e82:	9c 01       	movw	r18, r24
     e84:	f9 01       	movw	r30, r18
//	while(BIT_IS_CLEAR(UCSRA , UDRE)) ;
	_UDR = data;			/*send the data*/
}
uint8 UART_receive(void){
//	while(!_UCSRA._RXC);	/*wait until the receiving operation completes*/
	while(BIT_IS_CLEAR(UCSRA ,RXC)) ;
     e86:	5f 9b       	sbis	0x0b, 7	; 11
     e88:	fe cf       	rjmp	.-4      	; 0xe86 <UART_receiveString+0xa>
	return _UDR;			/*return the received data*/
     e8a:	8c b1       	in	r24, 0x0c	; 12
	}
}
void UART_receiveString(uint8 * rec_data , uint8 size){
	uint8 i = 0;
	while(i<size){
		rec_data[i] = UART_receive();
     e8c:	81 93       	st	Z+, r24
		i++;
	}
}
void UART_receiveString(uint8 * rec_data , uint8 size){
	uint8 i = 0;
	while(i<size){
     e8e:	8e 2f       	mov	r24, r30
     e90:	84 1b       	sub	r24, r20
     e92:	86 17       	cp	r24, r22
     e94:	c0 f3       	brcs	.-16     	; 0xe86 <UART_receiveString+0xa>
     e96:	08 95       	ret

00000e98 <UART_setcallback>:
		i++;
	}
}

void UART_setcallback(void (*a_callback)(void)){
	g_callback = (volatile void *)a_callback;
     e98:	90 93 af 01 	sts	0x01AF, r25
     e9c:	80 93 ae 01 	sts	0x01AE, r24
}
     ea0:	08 95       	ret

00000ea2 <__vector_11>:

ISR(USART_RXC_vect){
     ea2:	1f 92       	push	r1
     ea4:	0f 92       	push	r0
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	2f 93       	push	r18
     eae:	3f 93       	push	r19
     eb0:	4f 93       	push	r20
     eb2:	5f 93       	push	r21
     eb4:	6f 93       	push	r22
     eb6:	7f 93       	push	r23
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	af 93       	push	r26
     ebe:	bf 93       	push	r27
     ec0:	ef 93       	push	r30
     ec2:	ff 93       	push	r31
	recieved_data = _UDR;
     ec4:	8c b1       	in	r24, 0x0c	; 12
     ec6:	80 93 cc 01 	sts	0x01CC, r24
	if(g_callback != NULL){
     eca:	e0 91 ae 01 	lds	r30, 0x01AE
     ece:	f0 91 af 01 	lds	r31, 0x01AF
     ed2:	30 97       	sbiw	r30, 0x00	; 0
     ed4:	09 f0       	breq	.+2      	; 0xed8 <__vector_11+0x36>
		(*g_callback)();
     ed6:	09 95       	icall
	}
}
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	7f 91       	pop	r23
     ee6:	6f 91       	pop	r22
     ee8:	5f 91       	pop	r21
     eea:	4f 91       	pop	r20
     eec:	3f 91       	pop	r19
     eee:	2f 91       	pop	r18
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	0f 90       	pop	r0
     ef6:	1f 90       	pop	r1
     ef8:	18 95       	reti

00000efa <TIMER_start>:
 * Description : this function responsible to configure the timer with it's prescaler , call back function
 * 					timer mode either compare or overflow and the compare value in case of compare mode
 * 					compare value dosent matter in case of ovdrflow mode
 * ---------------------------------------------------------------------------------------------------------------------*/

void TIMER_start(const timerConfig_t * timerConfig){
     efa:	fc 01       	movw	r30, r24
	switch(timerConfig->timerNUM){
     efc:	80 81       	ld	r24, Z
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	09 f4       	brne	.+2      	; 0xf04 <TIMER_start+0xa>
     f02:	44 c0       	rjmp	.+136    	; 0xf8c <TIMER_start+0x92>
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	58 f5       	brcc	.+86     	; 0xf5e <TIMER_start+0x64>
	/*-------------------------------------------------------------------------------------------------------------------
	 * 											timer 0 configuration
	 * -----------------------------------------------------------------------------------------------------------------*/
	case timer0:
		_TCCR0._FOC0 = 1;						/*this bit is set at non PWM mode*/
     f08:	83 b7       	in	r24, 0x33	; 51
     f0a:	80 68       	ori	r24, 0x80	; 128
     f0c:	83 bf       	out	0x33, r24	; 51
		_TCCR0._COM0 = 0;						/*disable output compare pin */
     f0e:	83 b7       	in	r24, 0x33	; 51
     f10:	8f 7c       	andi	r24, 0xCF	; 207
     f12:	83 bf       	out	0x33, r24	; 51
		_TCNT0 = 0;								/*clear timer 0 data register*/
     f14:	12 be       	out	0x32, r1	; 50
		if(timerConfig->timer_mode == overflow){
     f16:	81 81       	ldd	r24, Z+1	; 0x01
     f18:	88 23       	and	r24, r24
     f1a:	09 f0       	breq	.+2      	; 0xf1e <TIMER_start+0x24>
     f1c:	a3 c0       	rjmp	.+326    	; 0x1064 <TIMER_start+0x16a>
			_TCCR0._WGM01 = 0;							/*configure timer 0 to overflow mode*/
     f1e:	83 b7       	in	r24, 0x33	; 51
     f20:	87 7f       	andi	r24, 0xF7	; 247
     f22:	83 bf       	out	0x33, r24	; 51
			_TCCR0._WGM00 = 0;
     f24:	83 b7       	in	r24, 0x33	; 51
     f26:	8f 7b       	andi	r24, 0xBF	; 191
     f28:	83 bf       	out	0x33, r24	; 51
			_TIMSK._TOIE0 = 1;							/*enable timer 0 over flow interrupt request generation*/
     f2a:	89 b7       	in	r24, 0x39	; 57
     f2c:	81 60       	ori	r24, 0x01	; 1
     f2e:	89 bf       	out	0x39, r24	; 57
			_TIMSK._OCIE0 = 0;							/*disable timer 0 compare interrupt request generation*/
     f30:	89 b7       	in	r24, 0x39	; 57
     f32:	8d 7f       	andi	r24, 0xFD	; 253
     f34:	89 bf       	out	0x39, r24	; 57
			_TCNT0 = timerConfig->SCValue;				/*load timer counter register with the initial value*/
     f36:	83 81       	ldd	r24, Z+3	; 0x03
     f38:	94 81       	ldd	r25, Z+4	; 0x04
     f3a:	82 bf       	out	0x32, r24	; 50
			timer0_Reload = timerConfig->SCValue;		/*this value will be used later in ISR*/
     f3c:	90 93 bd 01 	sts	0x01BD, r25
     f40:	80 93 bc 01 	sts	0x01BC, r24
			g_timer0overflow = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;	/*configure the call back function address*/
     f44:	85 81       	ldd	r24, Z+5	; 0x05
     f46:	96 81       	ldd	r25, Z+6	; 0x06
     f48:	90 93 bb 01 	sts	0x01BB, r25
     f4c:	80 93 ba 01 	sts	0x01BA, r24
			_OCR0 = timerConfig->SCValue;		/*set the compare register to compare value*/
			_TIMSK._TOIE0 = 0;					/*disable timer 0 over flow interrupt request generation*/
			_TIMSK._OCIE0 = 1;					/*enable timer 0 compare interrupt request generation*/
			g_timer0compare = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
		}
		_TCCR0._CS0 = timerConfig->timer_prescaler; /*configure prescaler for timer 0 and start counting*/
     f50:	92 81       	ldd	r25, Z+2	; 0x02
     f52:	97 70       	andi	r25, 0x07	; 7
     f54:	83 b7       	in	r24, 0x33	; 51
     f56:	88 7f       	andi	r24, 0xF8	; 248
     f58:	89 2b       	or	r24, r25
     f5a:	83 bf       	out	0x33, r24	; 51
     f5c:	08 95       	ret
 * 					timer mode either compare or overflow and the compare value in case of compare mode
 * 					compare value dosent matter in case of ovdrflow mode
 * ---------------------------------------------------------------------------------------------------------------------*/

void TIMER_start(const timerConfig_t * timerConfig){
	switch(timerConfig->timerNUM){
     f5e:	82 30       	cpi	r24, 0x02	; 2
     f60:	09 f0       	breq	.+2      	; 0xf64 <TIMER_start+0x6a>
     f62:	08 95       	ret
		break;
	/*-------------------------------------------------------------------------------------------------------------------
	 * 											timer 2 configuration
	 * -----------------------------------------------------------------------------------------------------------------*/
	case timer2:
		_TCCR2._FOC2 = 1;						/*this bit is set at non PWM mode*/
     f64:	85 b5       	in	r24, 0x25	; 37
     f66:	80 68       	ori	r24, 0x80	; 128
     f68:	85 bd       	out	0x25, r24	; 37
		_TCCR2._COM2 = 0;
     f6a:	85 b5       	in	r24, 0x25	; 37
     f6c:	8f 7c       	andi	r24, 0xCF	; 207
     f6e:	85 bd       	out	0x25, r24	; 37
		if(timerConfig->timer_mode == overflow){
     f70:	81 81       	ldd	r24, Z+1	; 0x01
     f72:	88 23       	and	r24, r24
     f74:	09 f4       	brne	.+2      	; 0xf78 <TIMER_start+0x7e>
     f76:	5c c0       	rjmp	.+184    	; 0x1030 <TIMER_start+0x136>
			_TIMSK._OCIE2 = 0;					/*disable timer 0 compare interrupt request generation*/
			_TCNT2 = timerConfig->SCValue;
			timer2_Reload = timerConfig->SCValue;
			g_timer2overflow = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
		}
		else if(timerConfig->timer_mode == compare){
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	09 f4       	brne	.+2      	; 0xf7e <TIMER_start+0x84>
     f7c:	8c c0       	rjmp	.+280    	; 0x1096 <TIMER_start+0x19c>
			_OCR2 = timerConfig->SCValue;		/*set the compare register to compare value*/
			_TIMSK._TOIE2 = 0;					/*disable timer 0 over flow interrupt request generation*/
			_TIMSK._OCIE2 = 1;					/*enable timer 0 compare interrupt request generation*/
			g_timer2compare = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
		}
		_TCCR2._CS2 = timerConfig->timer_prescaler; /*configure prescaler for timer 0 and start counting*/
     f7e:	92 81       	ldd	r25, Z+2	; 0x02
     f80:	97 70       	andi	r25, 0x07	; 7
     f82:	85 b5       	in	r24, 0x25	; 37
     f84:	88 7f       	andi	r24, 0xF8	; 248
     f86:	89 2b       	or	r24, r25
     f88:	85 bd       	out	0x25, r24	; 37
     f8a:	08 95       	ret
		break;
		/*-------------------------------------------------------------------------------------------------------------------
		 * 											timer 1 configuration
		 * -----------------------------------------------------------------------------------------------------------------*/
	case timer1:
		_TCCR1A._COM1A = 0;
     f8c:	8f b5       	in	r24, 0x2f	; 47
     f8e:	8f 73       	andi	r24, 0x3F	; 63
     f90:	8f bd       	out	0x2f, r24	; 47
		_TCCR1A._COM1B = 0;
     f92:	8f b5       	in	r24, 0x2f	; 47
     f94:	8f 7c       	andi	r24, 0xCF	; 207
     f96:	8f bd       	out	0x2f, r24	; 47
		_TCCR1A._FOC1A = 1;
     f98:	8f b5       	in	r24, 0x2f	; 47
     f9a:	88 60       	ori	r24, 0x08	; 8
     f9c:	8f bd       	out	0x2f, r24	; 47
		_TCCR1A._FOC1B = 1;
     f9e:	8f b5       	in	r24, 0x2f	; 47
     fa0:	84 60       	ori	r24, 0x04	; 4
     fa2:	8f bd       	out	0x2f, r24	; 47
		_TCCR1B._ICES1 = 0;
     fa4:	8e b5       	in	r24, 0x2e	; 46
     fa6:	8f 7b       	andi	r24, 0xBF	; 191
     fa8:	8e bd       	out	0x2e, r24	; 46
		_TCCR1B._ICNC1 = 0;
     faa:	8e b5       	in	r24, 0x2e	; 46
     fac:	8f 77       	andi	r24, 0x7F	; 127
     fae:	8e bd       	out	0x2e, r24	; 46
		if(timerConfig->timer_mode == overflow){
     fb0:	81 81       	ldd	r24, Z+1	; 0x01
     fb2:	88 23       	and	r24, r24
     fb4:	09 f5       	brne	.+66     	; 0xff8 <TIMER_start+0xfe>
			_TCCR1A._WGM10_1 = 0;
     fb6:	8f b5       	in	r24, 0x2f	; 47
     fb8:	8c 7f       	andi	r24, 0xFC	; 252
     fba:	8f bd       	out	0x2f, r24	; 47
			_TCCR1B._WGM12_3 = 0;
     fbc:	8e b5       	in	r24, 0x2e	; 46
     fbe:	87 7e       	andi	r24, 0xE7	; 231
     fc0:	8e bd       	out	0x2e, r24	; 46
			_TIMSK._TOIE1 = 1;
     fc2:	89 b7       	in	r24, 0x39	; 57
     fc4:	84 60       	ori	r24, 0x04	; 4
     fc6:	89 bf       	out	0x39, r24	; 57
			_TIMSK._OCIE1A = 0;
     fc8:	89 b7       	in	r24, 0x39	; 57
     fca:	8f 7e       	andi	r24, 0xEF	; 239
     fcc:	89 bf       	out	0x39, r24	; 57
			_TCNT1 = timerConfig->SCValue;
     fce:	83 81       	ldd	r24, Z+3	; 0x03
     fd0:	94 81       	ldd	r25, Z+4	; 0x04
     fd2:	9d bd       	out	0x2d, r25	; 45
     fd4:	8c bd       	out	0x2c, r24	; 44
			timer1_Reload = timerConfig->SCValue;
     fd6:	90 93 bf 01 	sts	0x01BF, r25
     fda:	80 93 be 01 	sts	0x01BE, r24
			g_timer1overflow = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
     fde:	85 81       	ldd	r24, Z+5	; 0x05
     fe0:	96 81       	ldd	r25, Z+6	; 0x06
     fe2:	90 93 b7 01 	sts	0x01B7, r25
     fe6:	80 93 b6 01 	sts	0x01B6, r24
			_TIMSK._OCIE1A = 1;
			_TCNT1 = 0;
			_OCR1A = timerConfig->SCValue;
			g_timer1compare = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
		}
		_TCCR1B._CS1 = timerConfig->timer_prescaler;
     fea:	92 81       	ldd	r25, Z+2	; 0x02
     fec:	97 70       	andi	r25, 0x07	; 7
     fee:	8e b5       	in	r24, 0x2e	; 46
     ff0:	88 7f       	andi	r24, 0xF8	; 248
     ff2:	89 2b       	or	r24, r25
     ff4:	8e bd       	out	0x2e, r24	; 46
     ff6:	08 95       	ret
			_TIMSK._OCIE1A = 0;
			_TCNT1 = timerConfig->SCValue;
			timer1_Reload = timerConfig->SCValue;
			g_timer1overflow = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
		}
		else if(timerConfig->timer_mode == compare){
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	b9 f7       	brne	.-18     	; 0xfea <TIMER_start+0xf0>
			_TCCR1A._WGM10_1 =  0;
     ffc:	8f b5       	in	r24, 0x2f	; 47
     ffe:	8c 7f       	andi	r24, 0xFC	; 252
    1000:	8f bd       	out	0x2f, r24	; 47
			_TCCR1B._WGM12_3  = 1;
    1002:	8e b5       	in	r24, 0x2e	; 46
    1004:	87 7e       	andi	r24, 0xE7	; 231
    1006:	88 60       	ori	r24, 0x08	; 8
    1008:	8e bd       	out	0x2e, r24	; 46
			_TIMSK._TOIE1  = 0;
    100a:	89 b7       	in	r24, 0x39	; 57
    100c:	8b 7f       	andi	r24, 0xFB	; 251
    100e:	89 bf       	out	0x39, r24	; 57
			_TIMSK._OCIE1A = 1;
    1010:	89 b7       	in	r24, 0x39	; 57
    1012:	80 61       	ori	r24, 0x10	; 16
    1014:	89 bf       	out	0x39, r24	; 57
			_TCNT1 = 0;
    1016:	1d bc       	out	0x2d, r1	; 45
    1018:	1c bc       	out	0x2c, r1	; 44
			_OCR1A = timerConfig->SCValue;
    101a:	83 81       	ldd	r24, Z+3	; 0x03
    101c:	94 81       	ldd	r25, Z+4	; 0x04
    101e:	9b bd       	out	0x2b, r25	; 43
    1020:	8a bd       	out	0x2a, r24	; 42
			g_timer1compare = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
    1022:	85 81       	ldd	r24, Z+5	; 0x05
    1024:	96 81       	ldd	r25, Z+6	; 0x06
    1026:	90 93 b5 01 	sts	0x01B5, r25
    102a:	80 93 b4 01 	sts	0x01B4, r24
    102e:	dd cf       	rjmp	.-70     	; 0xfea <TIMER_start+0xf0>
	 * -----------------------------------------------------------------------------------------------------------------*/
	case timer2:
		_TCCR2._FOC2 = 1;						/*this bit is set at non PWM mode*/
		_TCCR2._COM2 = 0;
		if(timerConfig->timer_mode == overflow){
			_TCCR2._WGM21 = 0;					/*configure timer 0 to overflow mode*/
    1030:	85 b5       	in	r24, 0x25	; 37
    1032:	87 7f       	andi	r24, 0xF7	; 247
    1034:	85 bd       	out	0x25, r24	; 37
			_TCCR2._WGM20 = 0;
    1036:	85 b5       	in	r24, 0x25	; 37
    1038:	8f 7b       	andi	r24, 0xBF	; 191
    103a:	85 bd       	out	0x25, r24	; 37
			_TIMSK._TOIE2 = 1;					/*enable timer 0 over flow interrupt request generation*/
    103c:	89 b7       	in	r24, 0x39	; 57
    103e:	80 64       	ori	r24, 0x40	; 64
    1040:	89 bf       	out	0x39, r24	; 57
			_TIMSK._OCIE2 = 0;					/*disable timer 0 compare interrupt request generation*/
    1042:	89 b7       	in	r24, 0x39	; 57
    1044:	8f 77       	andi	r24, 0x7F	; 127
    1046:	89 bf       	out	0x39, r24	; 57
			_TCNT2 = timerConfig->SCValue;
    1048:	83 81       	ldd	r24, Z+3	; 0x03
    104a:	94 81       	ldd	r25, Z+4	; 0x04
    104c:	84 bd       	out	0x24, r24	; 36
			timer2_Reload = timerConfig->SCValue;
    104e:	90 93 c1 01 	sts	0x01C1, r25
    1052:	80 93 c0 01 	sts	0x01C0, r24
			g_timer2overflow = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
    1056:	85 81       	ldd	r24, Z+5	; 0x05
    1058:	96 81       	ldd	r25, Z+6	; 0x06
    105a:	90 93 b3 01 	sts	0x01B3, r25
    105e:	80 93 b2 01 	sts	0x01B2, r24
    1062:	8d cf       	rjmp	.-230    	; 0xf7e <TIMER_start+0x84>
			_TIMSK._OCIE0 = 0;							/*disable timer 0 compare interrupt request generation*/
			_TCNT0 = timerConfig->SCValue;				/*load timer counter register with the initial value*/
			timer0_Reload = timerConfig->SCValue;		/*this value will be used later in ISR*/
			g_timer0overflow = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;	/*configure the call back function address*/
		}
		else if(timerConfig->timer_mode == compare){
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	09 f0       	breq	.+2      	; 0x106a <TIMER_start+0x170>
    1068:	73 cf       	rjmp	.-282    	; 0xf50 <TIMER_start+0x56>
			_TCCR0._WGM01 = 1;					/*configure timer 0 to compare mode*/
    106a:	83 b7       	in	r24, 0x33	; 51
    106c:	88 60       	ori	r24, 0x08	; 8
    106e:	83 bf       	out	0x33, r24	; 51
			_TCCR0._WGM00 = 0;
    1070:	83 b7       	in	r24, 0x33	; 51
    1072:	8f 7b       	andi	r24, 0xBF	; 191
    1074:	83 bf       	out	0x33, r24	; 51
			_TCNT0 = 0;							/*clear timer 0 data register*/
    1076:	12 be       	out	0x32, r1	; 50
			_OCR0 = timerConfig->SCValue;		/*set the compare register to compare value*/
    1078:	83 81       	ldd	r24, Z+3	; 0x03
    107a:	8c bf       	out	0x3c, r24	; 60
			_TIMSK._TOIE0 = 0;					/*disable timer 0 over flow interrupt request generation*/
    107c:	89 b7       	in	r24, 0x39	; 57
    107e:	8e 7f       	andi	r24, 0xFE	; 254
    1080:	89 bf       	out	0x39, r24	; 57
			_TIMSK._OCIE0 = 1;					/*enable timer 0 compare interrupt request generation*/
    1082:	89 b7       	in	r24, 0x39	; 57
    1084:	82 60       	ori	r24, 0x02	; 2
    1086:	89 bf       	out	0x39, r24	; 57
			g_timer0compare = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
    1088:	85 81       	ldd	r24, Z+5	; 0x05
    108a:	96 81       	ldd	r25, Z+6	; 0x06
    108c:	90 93 b9 01 	sts	0x01B9, r25
    1090:	80 93 b8 01 	sts	0x01B8, r24
    1094:	5d cf       	rjmp	.-326    	; 0xf50 <TIMER_start+0x56>
			_TCNT2 = timerConfig->SCValue;
			timer2_Reload = timerConfig->SCValue;
			g_timer2overflow = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
		}
		else if(timerConfig->timer_mode == compare){
			_TCCR2._WGM21 = 1;					/*configure timer 0 to compare mode*/
    1096:	85 b5       	in	r24, 0x25	; 37
    1098:	88 60       	ori	r24, 0x08	; 8
    109a:	85 bd       	out	0x25, r24	; 37
			_TCCR2._WGM20 = 0;
    109c:	85 b5       	in	r24, 0x25	; 37
    109e:	8f 7b       	andi	r24, 0xBF	; 191
    10a0:	85 bd       	out	0x25, r24	; 37
			_TCNT2 = 0;							/*clear timer 0 data register*/
    10a2:	14 bc       	out	0x24, r1	; 36
			_OCR2 = timerConfig->SCValue;		/*set the compare register to compare value*/
    10a4:	83 81       	ldd	r24, Z+3	; 0x03
    10a6:	83 bd       	out	0x23, r24	; 35
			_TIMSK._TOIE2 = 0;					/*disable timer 0 over flow interrupt request generation*/
    10a8:	89 b7       	in	r24, 0x39	; 57
    10aa:	8f 7b       	andi	r24, 0xBF	; 191
    10ac:	89 bf       	out	0x39, r24	; 57
			_TIMSK._OCIE2 = 1;					/*enable timer 0 compare interrupt request generation*/
    10ae:	89 b7       	in	r24, 0x39	; 57
    10b0:	80 68       	ori	r24, 0x80	; 128
    10b2:	89 bf       	out	0x39, r24	; 57
			g_timer2compare = (volatile void(*)(void))timerConfig->CallbackfunctionPtr;
    10b4:	85 81       	ldd	r24, Z+5	; 0x05
    10b6:	96 81       	ldd	r25, Z+6	; 0x06
    10b8:	90 93 b1 01 	sts	0x01B1, r25
    10bc:	80 93 b0 01 	sts	0x01B0, r24
    10c0:	5e cf       	rjmp	.-324    	; 0xf7e <TIMER_start+0x84>

000010c2 <TIMER_stop>:
 * arguments : structure of type timerConfig_t contains
 * 				{timerNUM , timer_mode , timer_prescaler , compareValue , CallbackfunctionPtr}
 *
 * Description : this function responsible to stop the timer by disable it's clock
 * --------------------------------------------------------------------------------------------------------------*/
void TIMER_stop(const timerConfig_t * timerConfig){
    10c2:	fc 01       	movw	r30, r24
	switch(timerConfig->timerNUM){
    10c4:	e0 81       	ld	r30, Z
    10c6:	e1 30       	cpi	r30, 0x01	; 1
    10c8:	69 f0       	breq	.+26     	; 0x10e4 <TIMER_stop+0x22>
    10ca:	e1 30       	cpi	r30, 0x01	; 1
    10cc:	20 f4       	brcc	.+8      	; 0x10d6 <TIMER_stop+0x14>
	case timer0:
		_TCCR0._CS0 = 0; /*remove clock and disable timer */
    10ce:	83 b7       	in	r24, 0x33	; 51
    10d0:	88 7f       	andi	r24, 0xF8	; 248
    10d2:	83 bf       	out	0x33, r24	; 51
    10d4:	08 95       	ret
 * 				{timerNUM , timer_mode , timer_prescaler , compareValue , CallbackfunctionPtr}
 *
 * Description : this function responsible to stop the timer by disable it's clock
 * --------------------------------------------------------------------------------------------------------------*/
void TIMER_stop(const timerConfig_t * timerConfig){
	switch(timerConfig->timerNUM){
    10d6:	e2 30       	cpi	r30, 0x02	; 2
    10d8:	09 f0       	breq	.+2      	; 0x10dc <TIMER_stop+0x1a>
    10da:	08 95       	ret
		break;
	case timer1:
		_TCCR1B._CS1 = 0;/*remove clock and disable timer */
		break;
	case timer2:
		_TCCR2._CS2 = 0; /*remove clock and disable timer */
    10dc:	85 b5       	in	r24, 0x25	; 37
    10de:	88 7f       	andi	r24, 0xF8	; 248
    10e0:	85 bd       	out	0x25, r24	; 37
    10e2:	08 95       	ret
	switch(timerConfig->timerNUM){
	case timer0:
		_TCCR0._CS0 = 0; /*remove clock and disable timer */
		break;
	case timer1:
		_TCCR1B._CS1 = 0;/*remove clock and disable timer */
    10e4:	8e b5       	in	r24, 0x2e	; 46
    10e6:	88 7f       	andi	r24, 0xF8	; 248
    10e8:	8e bd       	out	0x2e, r24	; 46
    10ea:	08 95       	ret

000010ec <__vector_9>:
	}
}

/*----------------------------timer interrupt service routine -----------------------------*/

ISR(TIMER0_OVF_vect){
    10ec:	1f 92       	push	r1
    10ee:	0f 92       	push	r0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	0f 92       	push	r0
    10f4:	11 24       	eor	r1, r1
    10f6:	2f 93       	push	r18
    10f8:	3f 93       	push	r19
    10fa:	4f 93       	push	r20
    10fc:	5f 93       	push	r21
    10fe:	6f 93       	push	r22
    1100:	7f 93       	push	r23
    1102:	8f 93       	push	r24
    1104:	9f 93       	push	r25
    1106:	af 93       	push	r26
    1108:	bf 93       	push	r27
    110a:	ef 93       	push	r30
    110c:	ff 93       	push	r31
	_TCNT0 = timer0_Reload ;
    110e:	80 91 bc 01 	lds	r24, 0x01BC
    1112:	90 91 bd 01 	lds	r25, 0x01BD
    1116:	82 bf       	out	0x32, r24	; 50
	if(g_timer0overflow != NULL){
    1118:	e0 91 ba 01 	lds	r30, 0x01BA
    111c:	f0 91 bb 01 	lds	r31, 0x01BB
    1120:	30 97       	sbiw	r30, 0x00	; 0
    1122:	09 f0       	breq	.+2      	; 0x1126 <__vector_9+0x3a>
		(*g_timer0overflow)();
    1124:	09 95       	icall
	}
}
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	bf 91       	pop	r27
    112c:	af 91       	pop	r26
    112e:	9f 91       	pop	r25
    1130:	8f 91       	pop	r24
    1132:	7f 91       	pop	r23
    1134:	6f 91       	pop	r22
    1136:	5f 91       	pop	r21
    1138:	4f 91       	pop	r20
    113a:	3f 91       	pop	r19
    113c:	2f 91       	pop	r18
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <__vector_19>:

ISR(TIMER0_COMP_vect){
    1148:	1f 92       	push	r1
    114a:	0f 92       	push	r0
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	0f 92       	push	r0
    1150:	11 24       	eor	r1, r1
    1152:	2f 93       	push	r18
    1154:	3f 93       	push	r19
    1156:	4f 93       	push	r20
    1158:	5f 93       	push	r21
    115a:	6f 93       	push	r22
    115c:	7f 93       	push	r23
    115e:	8f 93       	push	r24
    1160:	9f 93       	push	r25
    1162:	af 93       	push	r26
    1164:	bf 93       	push	r27
    1166:	ef 93       	push	r30
    1168:	ff 93       	push	r31
	if(g_timer0compare != NULL){
    116a:	e0 91 b8 01 	lds	r30, 0x01B8
    116e:	f0 91 b9 01 	lds	r31, 0x01B9
    1172:	30 97       	sbiw	r30, 0x00	; 0
    1174:	09 f0       	breq	.+2      	; 0x1178 <__vector_19+0x30>
		(*g_timer0compare)();
    1176:	09 95       	icall
	}
}
    1178:	ff 91       	pop	r31
    117a:	ef 91       	pop	r30
    117c:	bf 91       	pop	r27
    117e:	af 91       	pop	r26
    1180:	9f 91       	pop	r25
    1182:	8f 91       	pop	r24
    1184:	7f 91       	pop	r23
    1186:	6f 91       	pop	r22
    1188:	5f 91       	pop	r21
    118a:	4f 91       	pop	r20
    118c:	3f 91       	pop	r19
    118e:	2f 91       	pop	r18
    1190:	0f 90       	pop	r0
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	0f 90       	pop	r0
    1196:	1f 90       	pop	r1
    1198:	18 95       	reti

0000119a <__vector_8>:


ISR(TIMER1_OVF_vect){
    119a:	1f 92       	push	r1
    119c:	0f 92       	push	r0
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	0f 92       	push	r0
    11a2:	11 24       	eor	r1, r1
    11a4:	2f 93       	push	r18
    11a6:	3f 93       	push	r19
    11a8:	4f 93       	push	r20
    11aa:	5f 93       	push	r21
    11ac:	6f 93       	push	r22
    11ae:	7f 93       	push	r23
    11b0:	8f 93       	push	r24
    11b2:	9f 93       	push	r25
    11b4:	af 93       	push	r26
    11b6:	bf 93       	push	r27
    11b8:	ef 93       	push	r30
    11ba:	ff 93       	push	r31
	_TCNT1 = timer1_Reload ;
    11bc:	80 91 be 01 	lds	r24, 0x01BE
    11c0:	90 91 bf 01 	lds	r25, 0x01BF
    11c4:	9d bd       	out	0x2d, r25	; 45
    11c6:	8c bd       	out	0x2c, r24	; 44
	if(g_timer1overflow != NULL){
    11c8:	e0 91 b6 01 	lds	r30, 0x01B6
    11cc:	f0 91 b7 01 	lds	r31, 0x01B7
    11d0:	30 97       	sbiw	r30, 0x00	; 0
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <__vector_8+0x3c>
		(*g_timer1overflow)();
    11d4:	09 95       	icall
	}
}
    11d6:	ff 91       	pop	r31
    11d8:	ef 91       	pop	r30
    11da:	bf 91       	pop	r27
    11dc:	af 91       	pop	r26
    11de:	9f 91       	pop	r25
    11e0:	8f 91       	pop	r24
    11e2:	7f 91       	pop	r23
    11e4:	6f 91       	pop	r22
    11e6:	5f 91       	pop	r21
    11e8:	4f 91       	pop	r20
    11ea:	3f 91       	pop	r19
    11ec:	2f 91       	pop	r18
    11ee:	0f 90       	pop	r0
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	0f 90       	pop	r0
    11f4:	1f 90       	pop	r1
    11f6:	18 95       	reti

000011f8 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    11f8:	1f 92       	push	r1
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	0f 92       	push	r0
    1200:	11 24       	eor	r1, r1
    1202:	2f 93       	push	r18
    1204:	3f 93       	push	r19
    1206:	4f 93       	push	r20
    1208:	5f 93       	push	r21
    120a:	6f 93       	push	r22
    120c:	7f 93       	push	r23
    120e:	8f 93       	push	r24
    1210:	9f 93       	push	r25
    1212:	af 93       	push	r26
    1214:	bf 93       	push	r27
    1216:	ef 93       	push	r30
    1218:	ff 93       	push	r31
	if(g_timer1compare != NULL){
    121a:	e0 91 b4 01 	lds	r30, 0x01B4
    121e:	f0 91 b5 01 	lds	r31, 0x01B5
    1222:	30 97       	sbiw	r30, 0x00	; 0
    1224:	09 f0       	breq	.+2      	; 0x1228 <__vector_6+0x30>
		(*g_timer1compare)();
    1226:	09 95       	icall
	}
}
    1228:	ff 91       	pop	r31
    122a:	ef 91       	pop	r30
    122c:	bf 91       	pop	r27
    122e:	af 91       	pop	r26
    1230:	9f 91       	pop	r25
    1232:	8f 91       	pop	r24
    1234:	7f 91       	pop	r23
    1236:	6f 91       	pop	r22
    1238:	5f 91       	pop	r21
    123a:	4f 91       	pop	r20
    123c:	3f 91       	pop	r19
    123e:	2f 91       	pop	r18
    1240:	0f 90       	pop	r0
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	0f 90       	pop	r0
    1246:	1f 90       	pop	r1
    1248:	18 95       	reti

0000124a <__vector_4>:

ISR(TIMER2_OVF_vect){
    124a:	1f 92       	push	r1
    124c:	0f 92       	push	r0
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	0f 92       	push	r0
    1252:	11 24       	eor	r1, r1
    1254:	2f 93       	push	r18
    1256:	3f 93       	push	r19
    1258:	4f 93       	push	r20
    125a:	5f 93       	push	r21
    125c:	6f 93       	push	r22
    125e:	7f 93       	push	r23
    1260:	8f 93       	push	r24
    1262:	9f 93       	push	r25
    1264:	af 93       	push	r26
    1266:	bf 93       	push	r27
    1268:	ef 93       	push	r30
    126a:	ff 93       	push	r31
	_TCNT2 = timer2_Reload ;
    126c:	80 91 c0 01 	lds	r24, 0x01C0
    1270:	90 91 c1 01 	lds	r25, 0x01C1
    1274:	84 bd       	out	0x24, r24	; 36
	if(g_timer2overflow != NULL){
    1276:	e0 91 b2 01 	lds	r30, 0x01B2
    127a:	f0 91 b3 01 	lds	r31, 0x01B3
    127e:	30 97       	sbiw	r30, 0x00	; 0
    1280:	09 f0       	breq	.+2      	; 0x1284 <__vector_4+0x3a>
		(*g_timer2overflow)();
    1282:	09 95       	icall
	}
}
    1284:	ff 91       	pop	r31
    1286:	ef 91       	pop	r30
    1288:	bf 91       	pop	r27
    128a:	af 91       	pop	r26
    128c:	9f 91       	pop	r25
    128e:	8f 91       	pop	r24
    1290:	7f 91       	pop	r23
    1292:	6f 91       	pop	r22
    1294:	5f 91       	pop	r21
    1296:	4f 91       	pop	r20
    1298:	3f 91       	pop	r19
    129a:	2f 91       	pop	r18
    129c:	0f 90       	pop	r0
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	0f 90       	pop	r0
    12a2:	1f 90       	pop	r1
    12a4:	18 95       	reti

000012a6 <__vector_3>:
ISR(TIMER2_COMP_vect){
    12a6:	1f 92       	push	r1
    12a8:	0f 92       	push	r0
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	0f 92       	push	r0
    12ae:	11 24       	eor	r1, r1
    12b0:	2f 93       	push	r18
    12b2:	3f 93       	push	r19
    12b4:	4f 93       	push	r20
    12b6:	5f 93       	push	r21
    12b8:	6f 93       	push	r22
    12ba:	7f 93       	push	r23
    12bc:	8f 93       	push	r24
    12be:	9f 93       	push	r25
    12c0:	af 93       	push	r26
    12c2:	bf 93       	push	r27
    12c4:	ef 93       	push	r30
    12c6:	ff 93       	push	r31
	if(g_timer2compare != NULL){
    12c8:	e0 91 b0 01 	lds	r30, 0x01B0
    12cc:	f0 91 b1 01 	lds	r31, 0x01B1
    12d0:	30 97       	sbiw	r30, 0x00	; 0
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <__vector_3+0x30>
		(*g_timer2compare)();
    12d4:	09 95       	icall
	}
}
    12d6:	ff 91       	pop	r31
    12d8:	ef 91       	pop	r30
    12da:	bf 91       	pop	r27
    12dc:	af 91       	pop	r26
    12de:	9f 91       	pop	r25
    12e0:	8f 91       	pop	r24
    12e2:	7f 91       	pop	r23
    12e4:	6f 91       	pop	r22
    12e6:	5f 91       	pop	r21
    12e8:	4f 91       	pop	r20
    12ea:	3f 91       	pop	r19
    12ec:	2f 91       	pop	r18
    12ee:	0f 90       	pop	r0
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	0f 90       	pop	r0
    12f4:	1f 90       	pop	r1
    12f6:	18 95       	reti

000012f8 <TWI_init>:
 *  Created on: Jan 22, 2020
 *      Author: SALAH
 */
#include "i2c.h"

void TWI_init(TWIconfig_t * TWIconfig){
    12f8:	fc 01       	movw	r30, r24
	 * 3	TWWC	-		write collision flag (HW flag)
	 * 2	TWEN	1		enables the TWI module
	 * 1	reserved
	 * 0	TWIE	0		TWI module interrupt enable (we will use polling)
	 */
	TWBR = TWIconfig->bitRate ;
    12fa:	80 81       	ld	r24, Z
    12fc:	80 b9       	out	0x00, r24	; 0
	TWCR = (1<<TWINT) | (1<<TWEN); /*clear the interrupt flag & enable the TWI module*/
    12fe:	84 e8       	ldi	r24, 0x84	; 132
    1300:	86 bf       	out	0x36, r24	; 54
	TWSR = (TWSR & 0xFC) | (TWIconfig->preScaller & 0x03); /*set the prescaler */
    1302:	91 b1       	in	r25, 0x01	; 1
    1304:	81 81       	ldd	r24, Z+1	; 0x01
    1306:	83 70       	andi	r24, 0x03	; 3
    1308:	9c 7f       	andi	r25, 0xFC	; 252
    130a:	89 2b       	or	r24, r25
    130c:	81 b9       	out	0x01, r24	; 1
	TWAR = (TWIconfig->deviceAddress)<<1;	/*set the slave address (shift is used because the 7 bit address 7-1)*/
    130e:	82 81       	ldd	r24, Z+2	; 0x02
    1310:	88 0f       	add	r24, r24
    1312:	82 b9       	out	0x02, r24	; 2
}
    1314:	08 95       	ret

00001316 <TWI_start>:
void TWI_start(void){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA); /*clear the interrupt flag & enable the TWI module & set the start bit condition*/
    1316:	84 ea       	ldi	r24, 0xA4	; 164
    1318:	86 bf       	out	0x36, r24	; 54
	while(BIT_IS_CLEAR(TWCR , TWINT));	/*busy loop until finishing sending the start bit*/
    131a:	06 b6       	in	r0, 0x36	; 54
    131c:	07 fe       	sbrs	r0, 7
    131e:	fd cf       	rjmp	.-6      	; 0x131a <TWI_start+0x4>
}
    1320:	08 95       	ret

00001322 <TWI_stop>:
void TWI_stop(void){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); /*clear the interrupt flag & enable the TWI module & set the stop bit condition*/
    1322:	84 e9       	ldi	r24, 0x94	; 148
    1324:	86 bf       	out	0x36, r24	; 54
}
    1326:	08 95       	ret

00001328 <TWI_write>:
void TWI_write(uint8 data){
	TWDR = data;
    1328:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT) | (1 << TWEN); /*clear the interrupt flag & enable the TWI module*/
    132a:	84 e8       	ldi	r24, 0x84	; 132
    132c:	86 bf       	out	0x36, r24	; 54
	while(BIT_IS_CLEAR(TWCR , TWINT));	/*busy loop until finishing sending data*/
    132e:	06 b6       	in	r0, 0x36	; 54
    1330:	07 fe       	sbrs	r0, 7
    1332:	fd cf       	rjmp	.-6      	; 0x132e <TWI_write+0x6>
}
    1334:	08 95       	ret

00001336 <TWI_readWithACK>:
uint8 TWI_readWithACK(void){
	TWCR = (1 << TWINT) | (1 << TWEN) | (1<<TWEA); /*clear the interrupt flag & enable the TWI module & enable replying with ACK*/
    1336:	84 ec       	ldi	r24, 0xC4	; 196
    1338:	86 bf       	out	0x36, r24	; 54
	while(BIT_IS_CLEAR(TWCR , TWINT));	/*busy loop until finishing receiving data*/
    133a:	06 b6       	in	r0, 0x36	; 54
    133c:	07 fe       	sbrs	r0, 7
    133e:	fd cf       	rjmp	.-6      	; 0x133a <TWI_readWithACK+0x4>
	return TWDR; /*read data*/
    1340:	83 b1       	in	r24, 0x03	; 3
}
    1342:	08 95       	ret

00001344 <TWI_readWithNACK>:
uint8 TWI_readWithNACK(void){
	TWCR = (1 << TWINT) | (1 << TWEN); /*clear the interrupt flag & enable the TWI module*/
    1344:	84 e8       	ldi	r24, 0x84	; 132
    1346:	86 bf       	out	0x36, r24	; 54
	while(BIT_IS_CLEAR(TWCR , TWINT));	/*busy loop until finishing recieving data*/
    1348:	06 b6       	in	r0, 0x36	; 54
    134a:	07 fe       	sbrs	r0, 7
    134c:	fd cf       	rjmp	.-6      	; 0x1348 <TWI_readWithNACK+0x4>
	return TWDR;
    134e:	83 b1       	in	r24, 0x03	; 3
}
    1350:	08 95       	ret

00001352 <TWI_getStatus>:
uint8 TWI_getStatus(void){
	return (TWSR & 0xF8); /*masking the most five bits that represents the TWI status*/
    1352:	81 b1       	in	r24, 0x01	; 1
}
    1354:	88 7f       	andi	r24, 0xF8	; 248
    1356:	08 95       	ret

00001358 <EINT_changeSenseControl>:
		_GICR._INT2 = 1;	/*enable INT0 request*/
		g_INT2_functionPtr = (volatile void(*)(void))EINT_config->INT_handler;
		break;
	}
}
void EINT_changeSenseControl(const EINT_t *EINT_config , senseControl_t EINT_SC){
    1358:	fc 01       	movw	r30, r24
	switch(EINT_config->ch){
    135a:	80 81       	ld	r24, Z
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	81 f0       	breq	.+32     	; 0x1380 <EINT_changeSenseControl+0x28>
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	38 f4       	brcc	.+14     	; 0x1372 <EINT_changeSenseControl+0x1a>
	case E_INT0:
		MCUCR  = (MCUCR & 0xFC) | (EINT_config->INT_SC & 0x03); 	/*set the interrupt sense control bits*/
    1364:	95 b7       	in	r25, 0x35	; 53
    1366:	81 81       	ldd	r24, Z+1	; 0x01
    1368:	83 70       	andi	r24, 0x03	; 3
    136a:	9c 7f       	andi	r25, 0xFC	; 252
    136c:	89 2b       	or	r24, r25
    136e:	85 bf       	out	0x35, r24	; 53
    1370:	08 95       	ret
		g_INT2_functionPtr = (volatile void(*)(void))EINT_config->INT_handler;
		break;
	}
}
void EINT_changeSenseControl(const EINT_t *EINT_config , senseControl_t EINT_SC){
	switch(EINT_config->ch){
    1372:	82 30       	cpi	r24, 0x02	; 2
    1374:	09 f0       	breq	.+2      	; 0x1378 <EINT_changeSenseControl+0x20>
    1376:	08 95       	ret
	case E_INT1:
		MCUCR  = (MCUCR & 0xF3) | (EINT_config->INT_SC & 0x03)<<2; 	/*set the interrupt sense control bits*/
		break;
	case E_INT2:
		if((EINT_config->INT_SC != falling) | (EINT_config->INT_SC != rising)){
			MCUCSR  = (MCUCSR & 0xBF) | (1<<ISC2); 	/*1=rising*/
    1378:	84 b7       	in	r24, 0x34	; 52
    137a:	80 64       	ori	r24, 0x40	; 64
    137c:	84 bf       	out	0x34, r24	; 52
    137e:	08 95       	ret
	switch(EINT_config->ch){
	case E_INT0:
		MCUCR  = (MCUCR & 0xFC) | (EINT_config->INT_SC & 0x03); 	/*set the interrupt sense control bits*/
		break;
	case E_INT1:
		MCUCR  = (MCUCR & 0xF3) | (EINT_config->INT_SC & 0x03)<<2; 	/*set the interrupt sense control bits*/
    1380:	25 b7       	in	r18, 0x35	; 53
    1382:	81 81       	ldd	r24, Z+1	; 0x01
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	83 70       	andi	r24, 0x03	; 3
    1388:	90 70       	andi	r25, 0x00	; 0
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	23 7f       	andi	r18, 0xF3	; 243
    1394:	28 2b       	or	r18, r24
    1396:	25 bf       	out	0x35, r18	; 53
    1398:	08 95       	ret

0000139a <__vector_1>:
		}
		break;
	}
}

ISR(INT0_vect){
    139a:	1f 92       	push	r1
    139c:	0f 92       	push	r0
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	0f 92       	push	r0
    13a2:	11 24       	eor	r1, r1
    13a4:	2f 93       	push	r18
    13a6:	3f 93       	push	r19
    13a8:	4f 93       	push	r20
    13aa:	5f 93       	push	r21
    13ac:	6f 93       	push	r22
    13ae:	7f 93       	push	r23
    13b0:	8f 93       	push	r24
    13b2:	9f 93       	push	r25
    13b4:	af 93       	push	r26
    13b6:	bf 93       	push	r27
    13b8:	ef 93       	push	r30
    13ba:	ff 93       	push	r31
	if(g_INT0_functionPtr != NULL){
    13bc:	e0 91 c6 01 	lds	r30, 0x01C6
    13c0:	f0 91 c7 01 	lds	r31, 0x01C7
    13c4:	30 97       	sbiw	r30, 0x00	; 0
    13c6:	09 f0       	breq	.+2      	; 0x13ca <__vector_1+0x30>
		(*g_INT0_functionPtr)();
    13c8:	09 95       	icall
	}
}
    13ca:	ff 91       	pop	r31
    13cc:	ef 91       	pop	r30
    13ce:	bf 91       	pop	r27
    13d0:	af 91       	pop	r26
    13d2:	9f 91       	pop	r25
    13d4:	8f 91       	pop	r24
    13d6:	7f 91       	pop	r23
    13d8:	6f 91       	pop	r22
    13da:	5f 91       	pop	r21
    13dc:	4f 91       	pop	r20
    13de:	3f 91       	pop	r19
    13e0:	2f 91       	pop	r18
    13e2:	0f 90       	pop	r0
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	0f 90       	pop	r0
    13e8:	1f 90       	pop	r1
    13ea:	18 95       	reti

000013ec <__vector_2>:
ISR(INT1_vect){
    13ec:	1f 92       	push	r1
    13ee:	0f 92       	push	r0
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	0f 92       	push	r0
    13f4:	11 24       	eor	r1, r1
    13f6:	2f 93       	push	r18
    13f8:	3f 93       	push	r19
    13fa:	4f 93       	push	r20
    13fc:	5f 93       	push	r21
    13fe:	6f 93       	push	r22
    1400:	7f 93       	push	r23
    1402:	8f 93       	push	r24
    1404:	9f 93       	push	r25
    1406:	af 93       	push	r26
    1408:	bf 93       	push	r27
    140a:	ef 93       	push	r30
    140c:	ff 93       	push	r31
	if(g_INT1_functionPtr != NULL){
    140e:	e0 91 c2 01 	lds	r30, 0x01C2
    1412:	f0 91 c3 01 	lds	r31, 0x01C3
    1416:	30 97       	sbiw	r30, 0x00	; 0
    1418:	09 f0       	breq	.+2      	; 0x141c <__vector_2+0x30>
		(*g_INT1_functionPtr)();
    141a:	09 95       	icall
	}
}
    141c:	ff 91       	pop	r31
    141e:	ef 91       	pop	r30
    1420:	bf 91       	pop	r27
    1422:	af 91       	pop	r26
    1424:	9f 91       	pop	r25
    1426:	8f 91       	pop	r24
    1428:	7f 91       	pop	r23
    142a:	6f 91       	pop	r22
    142c:	5f 91       	pop	r21
    142e:	4f 91       	pop	r20
    1430:	3f 91       	pop	r19
    1432:	2f 91       	pop	r18
    1434:	0f 90       	pop	r0
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	0f 90       	pop	r0
    143a:	1f 90       	pop	r1
    143c:	18 95       	reti

0000143e <__vector_18>:
ISR(INT2_vect){
    143e:	1f 92       	push	r1
    1440:	0f 92       	push	r0
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	0f 92       	push	r0
    1446:	11 24       	eor	r1, r1
    1448:	2f 93       	push	r18
    144a:	3f 93       	push	r19
    144c:	4f 93       	push	r20
    144e:	5f 93       	push	r21
    1450:	6f 93       	push	r22
    1452:	7f 93       	push	r23
    1454:	8f 93       	push	r24
    1456:	9f 93       	push	r25
    1458:	af 93       	push	r26
    145a:	bf 93       	push	r27
    145c:	ef 93       	push	r30
    145e:	ff 93       	push	r31
	if(g_INT1_functionPtr != NULL){
    1460:	80 91 c2 01 	lds	r24, 0x01C2
    1464:	90 91 c3 01 	lds	r25, 0x01C3
    1468:	89 2b       	or	r24, r25
    146a:	29 f0       	breq	.+10     	; 0x1476 <__vector_18+0x38>
		(*g_INT2_functionPtr)();
    146c:	e0 91 c4 01 	lds	r30, 0x01C4
    1470:	f0 91 c5 01 	lds	r31, 0x01C5
    1474:	09 95       	icall
	}
}
    1476:	ff 91       	pop	r31
    1478:	ef 91       	pop	r30
    147a:	bf 91       	pop	r27
    147c:	af 91       	pop	r26
    147e:	9f 91       	pop	r25
    1480:	8f 91       	pop	r24
    1482:	7f 91       	pop	r23
    1484:	6f 91       	pop	r22
    1486:	5f 91       	pop	r21
    1488:	4f 91       	pop	r20
    148a:	3f 91       	pop	r19
    148c:	2f 91       	pop	r18
    148e:	0f 90       	pop	r0
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	0f 90       	pop	r0
    1494:	1f 90       	pop	r1
    1496:	18 95       	reti

00001498 <EINT_init>:

volatile static void (*g_INT0_functionPtr) (void) = NULL;
volatile static void (*g_INT1_functionPtr) (void) = NULL;
volatile static void (*g_INT2_functionPtr) (void) = NULL;

void EINT_init(const EINT_t *EINT_config){
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	2c 97       	sbiw	r28, 0x0c	; 12
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	8c 01       	movw	r16, r24
	CHconfig_t EINT0_pin = {portD , pin2 , input , EINT_config->internal_resistor};
    14b2:	fc 01       	movw	r30, r24
    14b4:	92 81       	ldd	r25, Z+2	; 0x02
    14b6:	83 e0       	ldi	r24, 0x03	; 3
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	22 e0       	ldi	r18, 0x02	; 2
    14bc:	2a 83       	std	Y+2, r18	; 0x02
    14be:	1b 82       	std	Y+3, r1	; 0x03
    14c0:	9c 83       	std	Y+4, r25	; 0x04
	CHconfig_t EINT1_pin = {portD , pin3 , input , EINT_config->internal_resistor};
    14c2:	8d 83       	std	Y+5, r24	; 0x05
    14c4:	8e 83       	std	Y+6, r24	; 0x06
    14c6:	1f 82       	std	Y+7, r1	; 0x07
    14c8:	98 87       	std	Y+8, r25	; 0x08
	CHconfig_t EINT2_pin = {portB , pin2 , input , EINT_config->internal_resistor};
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	89 87       	std	Y+9, r24	; 0x09
    14ce:	2a 87       	std	Y+10, r18	; 0x0a
    14d0:	1b 86       	std	Y+11, r1	; 0x0b
    14d2:	9c 87       	std	Y+12, r25	; 0x0c
	switch(EINT_config->ch){
    14d4:	80 81       	ld	r24, Z
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	a9 f1       	breq	.+106    	; 0x1544 <EINT_init+0xac>
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	f0 f0       	brcs	.+60     	; 0x151a <EINT_init+0x82>
    14de:	82 30       	cpi	r24, 0x02	; 2
    14e0:	89 f4       	brne	.+34     	; 0x1504 <EINT_init+0x6c>
		_MCUCR._ISC1 = EINT_config->INT_SC;
		_GICR._INT1 = 1;
		g_INT1_functionPtr = (volatile void(*)(void))EINT_config->INT_handler;
		break;
	case E_INT2:
		DIO_initChannel(&EINT2_pin);	/*configure pin as input and configure pull up / pull down resistor*/
    14e2:	ce 01       	movw	r24, r28
    14e4:	09 96       	adiw	r24, 0x09	; 9
    14e6:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DIO_initChannel>
		if((EINT_config->INT_SC != falling) | (EINT_config->INT_SC != rising)){
			_MCUCSR._ISC2 = 1;	/*1=rising*/
    14ea:	84 b7       	in	r24, 0x34	; 52
    14ec:	80 64       	ori	r24, 0x40	; 64
    14ee:	84 bf       	out	0x34, r24	; 52
		}
		else{
			_MCUCSR._ISC2 = EINT_config->INT_SC-2; 	/*0=falling 1=rising*/
		}
		_GICR._INT2 = 1;	/*enable INT0 request*/
    14f0:	8b b7       	in	r24, 0x3b	; 59
    14f2:	80 62       	ori	r24, 0x20	; 32
    14f4:	8b bf       	out	0x3b, r24	; 59
		g_INT2_functionPtr = (volatile void(*)(void))EINT_config->INT_handler;
    14f6:	f8 01       	movw	r30, r16
    14f8:	83 81       	ldd	r24, Z+3	; 0x03
    14fa:	94 81       	ldd	r25, Z+4	; 0x04
    14fc:	90 93 c5 01 	sts	0x01C5, r25
    1500:	80 93 c4 01 	sts	0x01C4, r24
		break;
	}
}
    1504:	2c 96       	adiw	r28, 0x0c	; 12
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	08 95       	ret
	CHconfig_t EINT0_pin = {portD , pin2 , input , EINT_config->internal_resistor};
	CHconfig_t EINT1_pin = {portD , pin3 , input , EINT_config->internal_resistor};
	CHconfig_t EINT2_pin = {portB , pin2 , input , EINT_config->internal_resistor};
	switch(EINT_config->ch){
	case E_INT0:
		DIO_initChannel(&EINT0_pin);	/*configure pin as input and configure pull up / pull down resistor*/
    151a:	ce 01       	movw	r24, r28
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DIO_initChannel>
		_MCUCR._ISC0 = EINT_config->INT_SC;
    1522:	f8 01       	movw	r30, r16
    1524:	91 81       	ldd	r25, Z+1	; 0x01
    1526:	93 70       	andi	r25, 0x03	; 3
    1528:	85 b7       	in	r24, 0x35	; 53
    152a:	8c 7f       	andi	r24, 0xFC	; 252
    152c:	89 2b       	or	r24, r25
    152e:	85 bf       	out	0x35, r24	; 53
		_GICR._INT0 = 1;
    1530:	8b b7       	in	r24, 0x3b	; 59
    1532:	80 64       	ori	r24, 0x40	; 64
    1534:	8b bf       	out	0x3b, r24	; 59
		g_INT0_functionPtr = (volatile void(*)(void))EINT_config->INT_handler;
    1536:	83 81       	ldd	r24, Z+3	; 0x03
    1538:	94 81       	ldd	r25, Z+4	; 0x04
    153a:	90 93 c7 01 	sts	0x01C7, r25
    153e:	80 93 c6 01 	sts	0x01C6, r24
    1542:	e0 cf       	rjmp	.-64     	; 0x1504 <EINT_init+0x6c>
		break;
	case E_INT1:
		DIO_initChannel(&EINT1_pin);	/*configure pin as input and configure pull up / pull down resistor*/
    1544:	ce 01       	movw	r24, r28
    1546:	05 96       	adiw	r24, 0x05	; 5
    1548:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DIO_initChannel>
		_MCUCR._ISC1 = EINT_config->INT_SC;
    154c:	f8 01       	movw	r30, r16
    154e:	91 81       	ldd	r25, Z+1	; 0x01
    1550:	93 70       	andi	r25, 0x03	; 3
    1552:	99 0f       	add	r25, r25
    1554:	99 0f       	add	r25, r25
    1556:	85 b7       	in	r24, 0x35	; 53
    1558:	83 7f       	andi	r24, 0xF3	; 243
    155a:	89 2b       	or	r24, r25
    155c:	85 bf       	out	0x35, r24	; 53
		_GICR._INT1 = 1;
    155e:	8b b7       	in	r24, 0x3b	; 59
    1560:	80 68       	ori	r24, 0x80	; 128
    1562:	8b bf       	out	0x3b, r24	; 59
		g_INT1_functionPtr = (volatile void(*)(void))EINT_config->INT_handler;
    1564:	83 81       	ldd	r24, Z+3	; 0x03
    1566:	94 81       	ldd	r25, Z+4	; 0x04
    1568:	90 93 c3 01 	sts	0x01C3, r25
    156c:	80 93 c2 01 	sts	0x01C2, r24
    1570:	c9 cf       	rjmp	.-110    	; 0x1504 <EINT_init+0x6c>

00001572 <DIO_initChannel>:
 *      Author: SALAH
 */

#include "dio.h"

void  DIO_initChannel(const CHconfig_t * pin_config){
    1572:	fc 01       	movw	r30, r24
	switch (pin_config->PORT){
    1574:	80 81       	ld	r24, Z
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	09 f4       	brne	.+2      	; 0x157c <DIO_initChannel+0xa>
    157a:	4c c0       	rjmp	.+152    	; 0x1614 <DIO_initChannel+0xa2>
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	30 f0       	brcs	.+12     	; 0x158c <DIO_initChannel+0x1a>
    1580:	82 30       	cpi	r24, 0x02	; 2
    1582:	09 f4       	brne	.+2      	; 0x1586 <DIO_initChannel+0x14>
    1584:	69 c0       	rjmp	.+210    	; 0x1658 <DIO_initChannel+0xe6>
    1586:	83 30       	cpi	r24, 0x03	; 3
    1588:	19 f1       	breq	.+70     	; 0x15d0 <DIO_initChannel+0x5e>
    158a:	08 95       	ret
	case portA:			/*configure pin in port A*/
		WRITE_BIT(DDRA , pin_config->channel_num , pin_config->direction); 				/*configure direction of pin either input or output*/
    158c:	4a b3       	in	r20, 0x1a	; 26
    158e:	51 81       	ldd	r21, Z+1	; 0x01
    1590:	21 e0       	ldi	r18, 0x01	; 1
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	05 2e       	mov	r0, r21
    1596:	02 c0       	rjmp	.+4      	; 0x159c <DIO_initChannel+0x2a>
    1598:	22 0f       	add	r18, r18
    159a:	33 1f       	adc	r19, r19
    159c:	0a 94       	dec	r0
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <DIO_initChannel+0x26>
    15a0:	20 95       	com	r18
    15a2:	42 23       	and	r20, r18
    15a4:	82 81       	ldd	r24, Z+2	; 0x02
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	05 2e       	mov	r0, r21
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <DIO_initChannel+0x3e>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	0a 94       	dec	r0
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <DIO_initChannel+0x3a>
    15b4:	48 2b       	or	r20, r24
    15b6:	4a bb       	out	0x1a, r20	; 26
		WRITE_BIT(PORTA , pin_config->channel_num , pin_config->internal_resistor);		/*configure the internal resistor connection [none , internal_pullup]*/
    15b8:	8b b3       	in	r24, 0x1b	; 27
    15ba:	28 23       	and	r18, r24
    15bc:	83 81       	ldd	r24, Z+3	; 0x03
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <DIO_initChannel+0x54>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	5a 95       	dec	r21
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <DIO_initChannel+0x50>
    15ca:	28 2b       	or	r18, r24
    15cc:	2b bb       	out	0x1b, r18	; 27
    15ce:	08 95       	ret
	case portC:
		WRITE_BIT(DDRC , pin_config->channel_num , pin_config->direction);
		WRITE_BIT(PORTC , pin_config->channel_num , pin_config->internal_resistor);
		break;
	case portD:
		WRITE_BIT(DDRD , pin_config->channel_num , pin_config->direction);
    15d0:	41 b3       	in	r20, 0x11	; 17
    15d2:	51 81       	ldd	r21, Z+1	; 0x01
    15d4:	21 e0       	ldi	r18, 0x01	; 1
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	05 2e       	mov	r0, r21
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <DIO_initChannel+0x6e>
    15dc:	22 0f       	add	r18, r18
    15de:	33 1f       	adc	r19, r19
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <DIO_initChannel+0x6a>
    15e4:	20 95       	com	r18
    15e6:	42 23       	and	r20, r18
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	05 2e       	mov	r0, r21
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_initChannel+0x82>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_initChannel+0x7e>
    15f8:	48 2b       	or	r20, r24
    15fa:	41 bb       	out	0x11, r20	; 17
		WRITE_BIT(PORTD , pin_config->channel_num , pin_config->internal_resistor);
    15fc:	82 b3       	in	r24, 0x12	; 18
    15fe:	28 23       	and	r18, r24
    1600:	83 81       	ldd	r24, Z+3	; 0x03
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 c0       	rjmp	.+4      	; 0x160a <DIO_initChannel+0x98>
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	5a 95       	dec	r21
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <DIO_initChannel+0x94>
    160e:	28 2b       	or	r18, r24
    1610:	22 bb       	out	0x12, r18	; 18
    1612:	08 95       	ret
	case portA:			/*configure pin in port A*/
		WRITE_BIT(DDRA , pin_config->channel_num , pin_config->direction); 				/*configure direction of pin either input or output*/
		WRITE_BIT(PORTA , pin_config->channel_num , pin_config->internal_resistor);		/*configure the internal resistor connection [none , internal_pullup]*/
		break;
	case portB:
		WRITE_BIT(DDRB , pin_config->channel_num , pin_config->direction);
    1614:	47 b3       	in	r20, 0x17	; 23
    1616:	51 81       	ldd	r21, Z+1	; 0x01
    1618:	21 e0       	ldi	r18, 0x01	; 1
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	05 2e       	mov	r0, r21
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <DIO_initChannel+0xb2>
    1620:	22 0f       	add	r18, r18
    1622:	33 1f       	adc	r19, r19
    1624:	0a 94       	dec	r0
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <DIO_initChannel+0xae>
    1628:	20 95       	com	r18
    162a:	42 23       	and	r20, r18
    162c:	82 81       	ldd	r24, Z+2	; 0x02
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	05 2e       	mov	r0, r21
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <DIO_initChannel+0xc6>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <DIO_initChannel+0xc2>
    163c:	48 2b       	or	r20, r24
    163e:	47 bb       	out	0x17, r20	; 23
		WRITE_BIT(PORTB , pin_config->channel_num , pin_config->internal_resistor);
    1640:	88 b3       	in	r24, 0x18	; 24
    1642:	28 23       	and	r18, r24
    1644:	83 81       	ldd	r24, Z+3	; 0x03
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 c0       	rjmp	.+4      	; 0x164e <DIO_initChannel+0xdc>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	5a 95       	dec	r21
    1650:	e2 f7       	brpl	.-8      	; 0x164a <DIO_initChannel+0xd8>
    1652:	28 2b       	or	r18, r24
    1654:	28 bb       	out	0x18, r18	; 24
    1656:	08 95       	ret
		break;
	case portC:
		WRITE_BIT(DDRC , pin_config->channel_num , pin_config->direction);
    1658:	44 b3       	in	r20, 0x14	; 20
    165a:	51 81       	ldd	r21, Z+1	; 0x01
    165c:	21 e0       	ldi	r18, 0x01	; 1
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	05 2e       	mov	r0, r21
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <DIO_initChannel+0xf6>
    1664:	22 0f       	add	r18, r18
    1666:	33 1f       	adc	r19, r19
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <DIO_initChannel+0xf2>
    166c:	20 95       	com	r18
    166e:	42 23       	and	r20, r18
    1670:	82 81       	ldd	r24, Z+2	; 0x02
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	05 2e       	mov	r0, r21
    1676:	02 c0       	rjmp	.+4      	; 0x167c <DIO_initChannel+0x10a>
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	0a 94       	dec	r0
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <DIO_initChannel+0x106>
    1680:	48 2b       	or	r20, r24
    1682:	44 bb       	out	0x14, r20	; 20
		WRITE_BIT(PORTC , pin_config->channel_num , pin_config->internal_resistor);
    1684:	85 b3       	in	r24, 0x15	; 21
    1686:	28 23       	and	r18, r24
    1688:	83 81       	ldd	r24, Z+3	; 0x03
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <DIO_initChannel+0x120>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	5a 95       	dec	r21
    1694:	e2 f7       	brpl	.-8      	; 0x168e <DIO_initChannel+0x11c>
    1696:	28 2b       	or	r18, r24
    1698:	25 bb       	out	0x15, r18	; 21
    169a:	08 95       	ret

0000169c <DIO_writeChannel>:
	default:
		return;
		break;
	}
}
void  DIO_writeChannel(const CHconfig_t * pin_config , uint8 value){
    169c:	fc 01       	movw	r30, r24
	if(pin_config->direction == input){
    169e:	82 81       	ldd	r24, Z+2	; 0x02
    16a0:	88 23       	and	r24, r24
    16a2:	51 f0       	breq	.+20     	; 0x16b8 <DIO_writeChannel+0x1c>
		return ;
	}
	switch (pin_config->PORT){
    16a4:	80 81       	ld	r24, Z
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	f1 f0       	breq	.+60     	; 0x16e6 <DIO_writeChannel+0x4a>
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	30 f0       	brcs	.+12     	; 0x16ba <DIO_writeChannel+0x1e>
    16ae:	82 30       	cpi	r24, 0x02	; 2
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <DIO_writeChannel+0x18>
    16b2:	45 c0       	rjmp	.+138    	; 0x173e <DIO_writeChannel+0xa2>
    16b4:	83 30       	cpi	r24, 0x03	; 3
    16b6:	69 f1       	breq	.+90     	; 0x1712 <DIO_writeChannel+0x76>
    16b8:	08 95       	ret
	case portA:
		WRITE_BIT(PORTA , pin_config->channel_num , value);
    16ba:	5b b3       	in	r21, 0x1b	; 27
    16bc:	41 81       	ldd	r20, Z+1	; 0x01
    16be:	26 2f       	mov	r18, r22
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	04 2e       	mov	r0, r20
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <DIO_writeChannel+0x2e>
    16c6:	22 0f       	add	r18, r18
    16c8:	33 1f       	adc	r19, r19
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <DIO_writeChannel+0x2a>
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_writeChannel+0x3c>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	4a 95       	dec	r20
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_writeChannel+0x38>
    16dc:	80 95       	com	r24
    16de:	85 23       	and	r24, r21
    16e0:	82 2b       	or	r24, r18
    16e2:	8b bb       	out	0x1b, r24	; 27
    16e4:	08 95       	ret
		break;
	case portB:
		WRITE_BIT(PORTB , pin_config->channel_num , value);
    16e6:	58 b3       	in	r21, 0x18	; 24
    16e8:	41 81       	ldd	r20, Z+1	; 0x01
    16ea:	26 2f       	mov	r18, r22
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	04 2e       	mov	r0, r20
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_writeChannel+0x5a>
    16f2:	22 0f       	add	r18, r18
    16f4:	33 1f       	adc	r19, r19
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_writeChannel+0x56>
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_writeChannel+0x68>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	4a 95       	dec	r20
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_writeChannel+0x64>
    1708:	80 95       	com	r24
    170a:	85 23       	and	r24, r21
    170c:	82 2b       	or	r24, r18
    170e:	88 bb       	out	0x18, r24	; 24
    1710:	08 95       	ret
		break;
	case portC:
		WRITE_BIT(PORTC , pin_config->channel_num , value);
		break;
	case portD:
		WRITE_BIT(PORTD , pin_config->channel_num , value);
    1712:	52 b3       	in	r21, 0x12	; 18
    1714:	41 81       	ldd	r20, Z+1	; 0x01
    1716:	26 2f       	mov	r18, r22
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	04 2e       	mov	r0, r20
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <DIO_writeChannel+0x86>
    171e:	22 0f       	add	r18, r18
    1720:	33 1f       	adc	r19, r19
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <DIO_writeChannel+0x82>
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_writeChannel+0x94>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	4a 95       	dec	r20
    1732:	e2 f7       	brpl	.-8      	; 0x172c <DIO_writeChannel+0x90>
    1734:	80 95       	com	r24
    1736:	85 23       	and	r24, r21
    1738:	82 2b       	or	r24, r18
    173a:	82 bb       	out	0x12, r24	; 18
    173c:	08 95       	ret
		break;
	case portB:
		WRITE_BIT(PORTB , pin_config->channel_num , value);
		break;
	case portC:
		WRITE_BIT(PORTC , pin_config->channel_num , value);
    173e:	55 b3       	in	r21, 0x15	; 21
    1740:	41 81       	ldd	r20, Z+1	; 0x01
    1742:	26 2f       	mov	r18, r22
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	04 2e       	mov	r0, r20
    1748:	02 c0       	rjmp	.+4      	; 0x174e <DIO_writeChannel+0xb2>
    174a:	22 0f       	add	r18, r18
    174c:	33 1f       	adc	r19, r19
    174e:	0a 94       	dec	r0
    1750:	e2 f7       	brpl	.-8      	; 0x174a <DIO_writeChannel+0xae>
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 c0       	rjmp	.+4      	; 0x175c <DIO_writeChannel+0xc0>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	4a 95       	dec	r20
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <DIO_writeChannel+0xbc>
    1760:	80 95       	com	r24
    1762:	85 23       	and	r24, r21
    1764:	82 2b       	or	r24, r18
    1766:	85 bb       	out	0x15, r24	; 21
    1768:	08 95       	ret

0000176a <DIO_readChannel>:
	case portD:
		WRITE_BIT(PORTD , pin_config->channel_num , value);
		break;
	}
}
uint8 DIO_readChannel(const CHconfig_t * pin_config){
    176a:	fc 01       	movw	r30, r24
	switch (pin_config->PORT){
    176c:	80 81       	ld	r24, Z
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	81 f1       	breq	.+96     	; 0x17d2 <DIO_readChannel+0x68>
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	a0 f4       	brcc	.+40     	; 0x179e <DIO_readChannel+0x34>
	case portA:
		return READ_BIT(PINA , pin_config->channel_num );
    1776:	89 b3       	in	r24, 0x19	; 25
		break;
	case portB:
		return READ_BIT(PINB , pin_config->channel_num );
		break;
	case portC:
		return READ_BIT(PINC , pin_config->channel_num );
    1778:	41 81       	ldd	r20, Z+1	; 0x01
    177a:	21 e0       	ldi	r18, 0x01	; 1
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	04 2e       	mov	r0, r20
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <DIO_readChannel+0x1c>
    1782:	22 0f       	add	r18, r18
    1784:	33 1f       	adc	r19, r19
    1786:	0a 94       	dec	r0
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <DIO_readChannel+0x18>
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	28 23       	and	r18, r24
    178e:	39 23       	and	r19, r25
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <DIO_readChannel+0x2c>
    1792:	35 95       	asr	r19
    1794:	27 95       	ror	r18
    1796:	4a 95       	dec	r20
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <DIO_readChannel+0x28>
    179a:	82 2f       	mov	r24, r18
    179c:	08 95       	ret
		WRITE_BIT(PORTD , pin_config->channel_num , value);
		break;
	}
}
uint8 DIO_readChannel(const CHconfig_t * pin_config){
	switch (pin_config->PORT){
    179e:	82 30       	cpi	r24, 0x02	; 2
    17a0:	d1 f0       	breq	.+52     	; 0x17d6 <DIO_readChannel+0x6c>
    17a2:	83 30       	cpi	r24, 0x03	; 3
    17a4:	11 f0       	breq	.+4      	; 0x17aa <DIO_readChannel+0x40>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	08 95       	ret
		break;
	case portC:
		return READ_BIT(PINC , pin_config->channel_num );
		break;
	case portD:
		return READ_BIT(PIND , pin_config->channel_num );
    17aa:	80 b3       	in	r24, 0x10	; 16
    17ac:	41 81       	ldd	r20, Z+1	; 0x01
    17ae:	21 e0       	ldi	r18, 0x01	; 1
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	04 2e       	mov	r0, r20
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <DIO_readChannel+0x50>
    17b6:	22 0f       	add	r18, r18
    17b8:	33 1f       	adc	r19, r19
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <DIO_readChannel+0x4c>
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	28 23       	and	r18, r24
    17c2:	39 23       	and	r19, r25
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <DIO_readChannel+0x60>
    17c6:	35 95       	asr	r19
    17c8:	27 95       	ror	r18
    17ca:	4a 95       	dec	r20
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <DIO_readChannel+0x5c>
    17ce:	82 2f       	mov	r24, r18
		break;
	}
	return 0;
}
    17d0:	08 95       	ret
	switch (pin_config->PORT){
	case portA:
		return READ_BIT(PINA , pin_config->channel_num );
		break;
	case portB:
		return READ_BIT(PINB , pin_config->channel_num );
    17d2:	86 b3       	in	r24, 0x16	; 22
    17d4:	d1 cf       	rjmp	.-94     	; 0x1778 <DIO_readChannel+0xe>
		break;
	case portC:
		return READ_BIT(PINC , pin_config->channel_num );
    17d6:	83 b3       	in	r24, 0x13	; 19
    17d8:	cf cf       	rjmp	.-98     	; 0x1778 <DIO_readChannel+0xe>

000017da <DIO_initPort>:
	return 0;
}



void  DIO_initPort(const PORTconfig_t * port_config){
    17da:	fc 01       	movw	r30, r24
	switch (port_config->PORT){
    17dc:	80 81       	ld	r24, Z
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	b1 f1       	breq	.+108    	; 0x184e <DIO_initPort+0x74>
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	30 f0       	brcs	.+12     	; 0x17f2 <DIO_initPort+0x18>
    17e6:	82 30       	cpi	r24, 0x02	; 2
    17e8:	09 f4       	brne	.+2      	; 0x17ec <DIO_initPort+0x12>
    17ea:	48 c0       	rjmp	.+144    	; 0x187c <DIO_initPort+0xa2>
    17ec:	83 30       	cpi	r24, 0x03	; 3
    17ee:	c1 f0       	breq	.+48     	; 0x1820 <DIO_initPort+0x46>
    17f0:	08 95       	ret
	case portA:
		DDRA  = (DDRA & ~(port_config->mask)) | ((port_config->direction * 255)         & port_config->mask);
    17f2:	3a b3       	in	r19, 0x1a	; 26
    17f4:	21 81       	ldd	r18, Z+1	; 0x01
    17f6:	42 2f       	mov	r20, r18
    17f8:	40 95       	com	r20
    17fa:	82 81       	ldd	r24, Z+2	; 0x02
    17fc:	5f ef       	ldi	r21, 0xFF	; 255
    17fe:	85 9f       	mul	r24, r21
    1800:	c0 01       	movw	r24, r0
    1802:	11 24       	eor	r1, r1
    1804:	82 23       	and	r24, r18
    1806:	34 23       	and	r19, r20
    1808:	83 2b       	or	r24, r19
    180a:	8a bb       	out	0x1a, r24	; 26
		PORTA = (PORTA & ~(port_config->mask)) | ((port_config->internal_resistor * 255) & port_config->mask);
    180c:	3b b3       	in	r19, 0x1b	; 27
    180e:	83 81       	ldd	r24, Z+3	; 0x03
    1810:	85 9f       	mul	r24, r21
    1812:	c0 01       	movw	r24, r0
    1814:	11 24       	eor	r1, r1
    1816:	28 23       	and	r18, r24
    1818:	43 23       	and	r20, r19
    181a:	24 2b       	or	r18, r20
    181c:	2b bb       	out	0x1b, r18	; 27
    181e:	08 95       	ret
	case portC:
		DDRC  = (DDRC & ~(port_config->mask)) | ((port_config->direction * 255)         & port_config->mask);
		PORTC = (PORTC & ~(port_config->mask)) | ((port_config->internal_resistor * 255) & port_config->mask);
		break;
	case portD:
		DDRD  = (DDRD & ~(port_config->mask)) | ((port_config->direction * 255)         & port_config->mask);
    1820:	31 b3       	in	r19, 0x11	; 17
    1822:	21 81       	ldd	r18, Z+1	; 0x01
    1824:	42 2f       	mov	r20, r18
    1826:	40 95       	com	r20
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	5f ef       	ldi	r21, 0xFF	; 255
    182c:	85 9f       	mul	r24, r21
    182e:	c0 01       	movw	r24, r0
    1830:	11 24       	eor	r1, r1
    1832:	82 23       	and	r24, r18
    1834:	34 23       	and	r19, r20
    1836:	83 2b       	or	r24, r19
    1838:	81 bb       	out	0x11, r24	; 17
		PORTD = (PORTD & ~(port_config->mask)) | ((port_config->internal_resistor * 255) & port_config->mask);
    183a:	32 b3       	in	r19, 0x12	; 18
    183c:	83 81       	ldd	r24, Z+3	; 0x03
    183e:	85 9f       	mul	r24, r21
    1840:	c0 01       	movw	r24, r0
    1842:	11 24       	eor	r1, r1
    1844:	28 23       	and	r18, r24
    1846:	43 23       	and	r20, r19
    1848:	24 2b       	or	r18, r20
    184a:	22 bb       	out	0x12, r18	; 18
    184c:	08 95       	ret
	case portA:
		DDRA  = (DDRA & ~(port_config->mask)) | ((port_config->direction * 255)         & port_config->mask);
		PORTA = (PORTA & ~(port_config->mask)) | ((port_config->internal_resistor * 255) & port_config->mask);
		break;
	case portB:
		DDRB  = (DDRB & ~(port_config->mask)) | ((port_config->direction * 255)         & port_config->mask);
    184e:	37 b3       	in	r19, 0x17	; 23
    1850:	21 81       	ldd	r18, Z+1	; 0x01
    1852:	42 2f       	mov	r20, r18
    1854:	40 95       	com	r20
    1856:	82 81       	ldd	r24, Z+2	; 0x02
    1858:	5f ef       	ldi	r21, 0xFF	; 255
    185a:	85 9f       	mul	r24, r21
    185c:	c0 01       	movw	r24, r0
    185e:	11 24       	eor	r1, r1
    1860:	82 23       	and	r24, r18
    1862:	34 23       	and	r19, r20
    1864:	83 2b       	or	r24, r19
    1866:	87 bb       	out	0x17, r24	; 23
		PORTB = (PORTB & ~(port_config->mask)) | ((port_config->internal_resistor * 255) & port_config->mask);
    1868:	38 b3       	in	r19, 0x18	; 24
    186a:	83 81       	ldd	r24, Z+3	; 0x03
    186c:	85 9f       	mul	r24, r21
    186e:	c0 01       	movw	r24, r0
    1870:	11 24       	eor	r1, r1
    1872:	28 23       	and	r18, r24
    1874:	43 23       	and	r20, r19
    1876:	24 2b       	or	r18, r20
    1878:	28 bb       	out	0x18, r18	; 24
    187a:	08 95       	ret
		break;
	case portC:
		DDRC  = (DDRC & ~(port_config->mask)) | ((port_config->direction * 255)         & port_config->mask);
    187c:	34 b3       	in	r19, 0x14	; 20
    187e:	21 81       	ldd	r18, Z+1	; 0x01
    1880:	42 2f       	mov	r20, r18
    1882:	40 95       	com	r20
    1884:	82 81       	ldd	r24, Z+2	; 0x02
    1886:	5f ef       	ldi	r21, 0xFF	; 255
    1888:	85 9f       	mul	r24, r21
    188a:	c0 01       	movw	r24, r0
    188c:	11 24       	eor	r1, r1
    188e:	82 23       	and	r24, r18
    1890:	34 23       	and	r19, r20
    1892:	83 2b       	or	r24, r19
    1894:	84 bb       	out	0x14, r24	; 20
		PORTC = (PORTC & ~(port_config->mask)) | ((port_config->internal_resistor * 255) & port_config->mask);
    1896:	35 b3       	in	r19, 0x15	; 21
    1898:	83 81       	ldd	r24, Z+3	; 0x03
    189a:	85 9f       	mul	r24, r21
    189c:	c0 01       	movw	r24, r0
    189e:	11 24       	eor	r1, r1
    18a0:	28 23       	and	r18, r24
    18a2:	43 23       	and	r20, r19
    18a4:	24 2b       	or	r18, r20
    18a6:	25 bb       	out	0x15, r18	; 21
    18a8:	08 95       	ret

000018aa <DIO_writePort>:
		DDRD  = (DDRD & ~(port_config->mask)) | ((port_config->direction * 255)         & port_config->mask);
		PORTD = (PORTD & ~(port_config->mask)) | ((port_config->internal_resistor * 255) & port_config->mask);
		break;
	}
}
void DIO_writePort(const PORTconfig_t * port_config , uint8 value){
    18aa:	fc 01       	movw	r30, r24
	switch (port_config->PORT){
    18ac:	80 81       	ld	r24, Z
    18ae:	81 30       	cpi	r24, 0x01	; 1
    18b0:	b9 f0       	breq	.+46     	; 0x18e0 <DIO_writePort+0x36>
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	28 f0       	brcs	.+10     	; 0x18c0 <DIO_writePort+0x16>
    18b6:	82 30       	cpi	r24, 0x02	; 2
    18b8:	d9 f0       	breq	.+54     	; 0x18f0 <DIO_writePort+0x46>
    18ba:	83 30       	cpi	r24, 0x03	; 3
    18bc:	49 f0       	breq	.+18     	; 0x18d0 <DIO_writePort+0x26>
    18be:	08 95       	ret
	case portA:
		PORTA = (PORTA & ~(port_config->mask)) | ((value) & port_config->mask);
    18c0:	9b b3       	in	r25, 0x1b	; 27
    18c2:	81 81       	ldd	r24, Z+1	; 0x01
    18c4:	68 23       	and	r22, r24
    18c6:	80 95       	com	r24
    18c8:	89 23       	and	r24, r25
    18ca:	86 2b       	or	r24, r22
    18cc:	8b bb       	out	0x1b, r24	; 27
    18ce:	08 95       	ret
		break;
	case portC:
		PORTC = (PORTC & ~(port_config->mask)) | ((value) & port_config->mask);
		break;
	case portD:
		PORTD = (PORTD & ~(port_config->mask)) | ((value) & port_config->mask);
    18d0:	92 b3       	in	r25, 0x12	; 18
    18d2:	81 81       	ldd	r24, Z+1	; 0x01
    18d4:	68 23       	and	r22, r24
    18d6:	80 95       	com	r24
    18d8:	89 23       	and	r24, r25
    18da:	86 2b       	or	r24, r22
    18dc:	82 bb       	out	0x12, r24	; 18
    18de:	08 95       	ret
	switch (port_config->PORT){
	case portA:
		PORTA = (PORTA & ~(port_config->mask)) | ((value) & port_config->mask);
		break;
	case portB:
		PORTB = (PORTB & ~(port_config->mask)) | ((value) & port_config->mask);
    18e0:	98 b3       	in	r25, 0x18	; 24
    18e2:	81 81       	ldd	r24, Z+1	; 0x01
    18e4:	68 23       	and	r22, r24
    18e6:	80 95       	com	r24
    18e8:	89 23       	and	r24, r25
    18ea:	86 2b       	or	r24, r22
    18ec:	88 bb       	out	0x18, r24	; 24
    18ee:	08 95       	ret
		break;
	case portC:
		PORTC = (PORTC & ~(port_config->mask)) | ((value) & port_config->mask);
    18f0:	95 b3       	in	r25, 0x15	; 21
    18f2:	81 81       	ldd	r24, Z+1	; 0x01
    18f4:	68 23       	and	r22, r24
    18f6:	80 95       	com	r24
    18f8:	89 23       	and	r24, r25
    18fa:	86 2b       	or	r24, r22
    18fc:	85 bb       	out	0x15, r24	; 21
    18fe:	08 95       	ret

00001900 <DIO_PORTDirection>:
		PORTD = (PORTD & ~(port_config->mask)) | ((value) & port_config->mask);
		break;
	}
}

void DIO_PORTDirection(const PORTconfig_t * port_config , uint8 direction){
    1900:	fc 01       	movw	r30, r24
	switch (port_config->PORT){
    1902:	80 81       	ld	r24, Z
    1904:	81 30       	cpi	r24, 0x01	; 1
    1906:	b9 f0       	breq	.+46     	; 0x1936 <DIO_PORTDirection+0x36>
    1908:	81 30       	cpi	r24, 0x01	; 1
    190a:	28 f0       	brcs	.+10     	; 0x1916 <DIO_PORTDirection+0x16>
    190c:	82 30       	cpi	r24, 0x02	; 2
    190e:	d9 f0       	breq	.+54     	; 0x1946 <DIO_PORTDirection+0x46>
    1910:	83 30       	cpi	r24, 0x03	; 3
    1912:	49 f0       	breq	.+18     	; 0x1926 <DIO_PORTDirection+0x26>
    1914:	08 95       	ret
	case portA:
		DDRA = (DDRA & ~(port_config->mask)) | ((direction) & port_config->mask);
    1916:	9a b3       	in	r25, 0x1a	; 26
    1918:	81 81       	ldd	r24, Z+1	; 0x01
    191a:	68 23       	and	r22, r24
    191c:	80 95       	com	r24
    191e:	89 23       	and	r24, r25
    1920:	86 2b       	or	r24, r22
    1922:	8a bb       	out	0x1a, r24	; 26
    1924:	08 95       	ret
		break;
	case portC:
		DDRC = (DDRC & ~(port_config->mask)) | ((direction) & port_config->mask);
		break;
	case portD:
		DDRD = (DDRD & ~(port_config->mask)) | ((direction) & port_config->mask);
    1926:	91 b3       	in	r25, 0x11	; 17
    1928:	81 81       	ldd	r24, Z+1	; 0x01
    192a:	68 23       	and	r22, r24
    192c:	80 95       	com	r24
    192e:	89 23       	and	r24, r25
    1930:	86 2b       	or	r24, r22
    1932:	81 bb       	out	0x11, r24	; 17
    1934:	08 95       	ret
	switch (port_config->PORT){
	case portA:
		DDRA = (DDRA & ~(port_config->mask)) | ((direction) & port_config->mask);
		break;
	case portB:
		DDRB = (DDRB & ~(port_config->mask)) | ((direction) & port_config->mask);
    1936:	97 b3       	in	r25, 0x17	; 23
    1938:	81 81       	ldd	r24, Z+1	; 0x01
    193a:	68 23       	and	r22, r24
    193c:	80 95       	com	r24
    193e:	89 23       	and	r24, r25
    1940:	86 2b       	or	r24, r22
    1942:	87 bb       	out	0x17, r24	; 23
    1944:	08 95       	ret
		break;
	case portC:
		DDRC = (DDRC & ~(port_config->mask)) | ((direction) & port_config->mask);
    1946:	94 b3       	in	r25, 0x14	; 20
    1948:	81 81       	ldd	r24, Z+1	; 0x01
    194a:	68 23       	and	r22, r24
    194c:	80 95       	com	r24
    194e:	89 23       	and	r24, r25
    1950:	86 2b       	or	r24, r22
    1952:	84 bb       	out	0x14, r24	; 20
    1954:	08 95       	ret

00001956 <DIO_readPort>:
		DDRD = (DDRD & ~(port_config->mask)) | ((direction) & port_config->mask);
		break;
	}
}

uint8 DIO_readPort(const PORTconfig_t * port_config){
    1956:	fc 01       	movw	r30, r24
	switch (port_config->PORT){
    1958:	80 81       	ld	r24, Z
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	99 f0       	breq	.+38     	; 0x1984 <DIO_readPort+0x2e>
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	28 f4       	brcc	.+10     	; 0x196c <DIO_readPort+0x16>
	case portA:
		return PINA & port_config->mask;
    1962:	29 b3       	in	r18, 0x19	; 25
    1964:	81 81       	ldd	r24, Z+1	; 0x01
    1966:	28 23       	and	r18, r24
	case portD:
		return PIND & port_config->mask;
		break;
	}
	return 0;
}
    1968:	82 2f       	mov	r24, r18
    196a:	08 95       	ret
		break;
	}
}

uint8 DIO_readPort(const PORTconfig_t * port_config){
	switch (port_config->PORT){
    196c:	82 30       	cpi	r24, 0x02	; 2
    196e:	79 f0       	breq	.+30     	; 0x198e <DIO_readPort+0x38>
    1970:	83 30       	cpi	r24, 0x03	; 3
    1972:	19 f0       	breq	.+6      	; 0x197a <DIO_readPort+0x24>
    1974:	20 e0       	ldi	r18, 0x00	; 0
	case portD:
		return PIND & port_config->mask;
		break;
	}
	return 0;
}
    1976:	82 2f       	mov	r24, r18
    1978:	08 95       	ret
		break;
	case portC:
		return PINC & port_config->mask;
		break;
	case portD:
		return PIND & port_config->mask;
    197a:	20 b3       	in	r18, 0x10	; 16
    197c:	81 81       	ldd	r24, Z+1	; 0x01
    197e:	28 23       	and	r18, r24
		break;
	}
	return 0;
}
    1980:	82 2f       	mov	r24, r18
    1982:	08 95       	ret
	switch (port_config->PORT){
	case portA:
		return PINA & port_config->mask;
		break;
	case portB:
		return PINB & port_config->mask;
    1984:	26 b3       	in	r18, 0x16	; 22
    1986:	81 81       	ldd	r24, Z+1	; 0x01
    1988:	28 23       	and	r18, r24
	case portD:
		return PIND & port_config->mask;
		break;
	}
	return 0;
}
    198a:	82 2f       	mov	r24, r18
    198c:	08 95       	ret
		break;
	case portB:
		return PINB & port_config->mask;
		break;
	case portC:
		return PINC & port_config->mask;
    198e:	23 b3       	in	r18, 0x13	; 19
    1990:	81 81       	ldd	r24, Z+1	; 0x01
    1992:	28 23       	and	r18, r24
	case portD:
		return PIND & port_config->mask;
		break;
	}
	return 0;
}
    1994:	82 2f       	mov	r24, r18
    1996:	08 95       	ret

00001998 <PWM_start>:

#include "pwm.h"
/*
 * responsible for start a PWM signal with the specified frequency and duty cycle
 * */
void PWM_start(s_pwmConfig * a_pwm_config){
    1998:	fc 01       	movw	r30, r24
	if(a_pwm_config->pwm_port == OC0){
    199a:	80 81       	ld	r24, Z
    199c:	88 23       	and	r24, r24
    199e:	49 f0       	breq	.+18     	; 0x19b2 <PWM_start+0x1a>
		 * */
		TCCR0 = (1<<WGM00) | (1<<WGM01); /*configure timer1 to PWM mode*/
		TCCR0 = (TCCR0 & 0xCF) | ((a_pwm_config->pwm_mode & 0x03)<<4);
		TCCR0 = (TCCR0 & 0xF8) | (a_pwm_config->pwm_prescaler & 0x07);
	}
	else if(a_pwm_config->pwm_port == OC1A){
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	11 f1       	breq	.+68     	; 0x19e8 <PWM_start+0x50>
		CLEAR_BIT(TCCR1A , WGM10);
		SET_BIT(TCCR1B , WGM12);
		SET_BIT(TCCR1B , WGM13);
		TCCR1B = (TCCR1B & 0xF8) | (a_pwm_config->pwm_prescaler & 0x07);
	}
	else if(a_pwm_config->pwm_port == OC1B){
    19a4:	82 30       	cpi	r24, 0x02	; 2
    19a6:	09 f4       	brne	.+2      	; 0x19aa <PWM_start+0x12>
    19a8:	62 c0       	rjmp	.+196    	; 0x1a6e <PWM_start+0xd6>
		CLEAR_BIT(TCCR1A , WGM10);
		SET_BIT(TCCR1B , WGM12);
		SET_BIT(TCCR1B , WGM13);
		TCCR1B = (TCCR1B & 0xF8) | (a_pwm_config->pwm_prescaler & 0x07);
	}
	else if(a_pwm_config->pwm_port == OC2){
    19aa:	83 30       	cpi	r24, 0x03	; 3
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <PWM_start+0x18>
    19ae:	44 c0       	rjmp	.+136    	; 0x1a38 <PWM_start+0xa0>
    19b0:	08 95       	ret
/*
 * responsible for start a PWM signal with the specified frequency and duty cycle
 * */
void PWM_start(s_pwmConfig * a_pwm_config){
	if(a_pwm_config->pwm_port == OC0){
		SET_BIT(DDRB , PB3); /*configure OC0 as output pin*/
    19b2:	bb 9a       	sbi	0x17, 3	; 23
		TCNT0 = 0; /*clear timer 0 counter register*/
    19b4:	12 be       	out	0x32, r1	; 50
		OCR0  = a_pwm_config->duty; /*set the duty cycle*/
    19b6:	84 81       	ldd	r24, Z+4	; 0x04
    19b8:	8c bf       	out	0x3c, r24	; 60
		 * 3- WGM01	1
		 * 2- CS02  	(CS02~0 = a_pwm_config -> pwm_prescaler)
		 * 1- CS01
		 * 0- CS00
		 * */
		TCCR0 = (1<<WGM00) | (1<<WGM01); /*configure timer1 to PWM mode*/
    19ba:	88 e4       	ldi	r24, 0x48	; 72
    19bc:	83 bf       	out	0x33, r24	; 51
		TCCR0 = (TCCR0 & 0xCF) | ((a_pwm_config->pwm_mode & 0x03)<<4);
    19be:	23 b7       	in	r18, 0x33	; 51
    19c0:	86 81       	ldd	r24, Z+6	; 0x06
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	83 70       	andi	r24, 0x03	; 3
    19c6:	90 70       	andi	r25, 0x00	; 0
    19c8:	82 95       	swap	r24
    19ca:	92 95       	swap	r25
    19cc:	90 7f       	andi	r25, 0xF0	; 240
    19ce:	98 27       	eor	r25, r24
    19d0:	80 7f       	andi	r24, 0xF0	; 240
    19d2:	98 27       	eor	r25, r24
    19d4:	2f 7c       	andi	r18, 0xCF	; 207
    19d6:	28 2b       	or	r18, r24
    19d8:	23 bf       	out	0x33, r18	; 51
		TCCR0 = (TCCR0 & 0xF8) | (a_pwm_config->pwm_prescaler & 0x07);
    19da:	93 b7       	in	r25, 0x33	; 51
    19dc:	81 81       	ldd	r24, Z+1	; 0x01
    19de:	87 70       	andi	r24, 0x07	; 7
    19e0:	98 7f       	andi	r25, 0xF8	; 248
    19e2:	89 2b       	or	r24, r25
    19e4:	83 bf       	out	0x33, r24	; 51
    19e6:	08 95       	ret
	}
	else if(a_pwm_config->pwm_port == OC1A){
		SET_BIT(DDRD , PD5); /*configure OC1A as output pin*/
    19e8:	8d 9a       	sbi	0x11, 5	; 17
		ICR1  = a_pwm_config->freq;
    19ea:	82 81       	ldd	r24, Z+2	; 0x02
    19ec:	93 81       	ldd	r25, Z+3	; 0x03
    19ee:	97 bd       	out	0x27, r25	; 39
    19f0:	86 bd       	out	0x26, r24	; 38
		OCR1A = a_pwm_config->duty;
    19f2:	84 81       	ldd	r24, Z+4	; 0x04
    19f4:	95 81       	ldd	r25, Z+5	; 0x05
    19f6:	9b bd       	out	0x2b, r25	; 43
    19f8:	8a bd       	out	0x2a, r24	; 42
		/*set the compare mode for OC1A inverting / non */
		TCCR1A = (TCCR1A & 0x3F) | ((a_pwm_config->pwm_mode & 0x03)<<6);
    19fa:	9f b5       	in	r25, 0x2f	; 47
    19fc:	86 81       	ldd	r24, Z+6	; 0x06
    19fe:	82 95       	swap	r24
    1a00:	88 0f       	add	r24, r24
    1a02:	88 0f       	add	r24, r24
    1a04:	80 7c       	andi	r24, 0xC0	; 192
    1a06:	9f 73       	andi	r25, 0x3F	; 63
    1a08:	89 2b       	or	r24, r25
    1a0a:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TCCR1A,FOC1A);
    1a0c:	8f b5       	in	r24, 0x2f	; 47
    1a0e:	87 7f       	andi	r24, 0xF7	; 247
		SET_BIT(DDRD , PD4); /*configure OC1B as output pin*/
		ICR1  = a_pwm_config->freq;
		OCR1B = a_pwm_config->duty;
		/*set the compare mode for OC1A inverting / non */
		TCCR1A = (TCCR1A & 0xCF) | ((a_pwm_config->pwm_mode & 0x03)<<4);
		CLEAR_BIT(TCCR1A,FOC1B);
    1a10:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1A , WGM11);
    1a12:	8f b5       	in	r24, 0x2f	; 47
    1a14:	82 60       	ori	r24, 0x02	; 2
    1a16:	8f bd       	out	0x2f, r24	; 47
		CLEAR_BIT(TCCR1A , WGM10);
    1a18:	8f b5       	in	r24, 0x2f	; 47
    1a1a:	8e 7f       	andi	r24, 0xFE	; 254
    1a1c:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1B , WGM12);
    1a1e:	8e b5       	in	r24, 0x2e	; 46
    1a20:	88 60       	ori	r24, 0x08	; 8
    1a22:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B , WGM13);
    1a24:	8e b5       	in	r24, 0x2e	; 46
    1a26:	80 61       	ori	r24, 0x10	; 16
    1a28:	8e bd       	out	0x2e, r24	; 46
		TCCR1B = (TCCR1B & 0xF8) | (a_pwm_config->pwm_prescaler & 0x07);
    1a2a:	9e b5       	in	r25, 0x2e	; 46
    1a2c:	81 81       	ldd	r24, Z+1	; 0x01
    1a2e:	87 70       	andi	r24, 0x07	; 7
    1a30:	98 7f       	andi	r25, 0xF8	; 248
    1a32:	89 2b       	or	r24, r25
    1a34:	8e bd       	out	0x2e, r24	; 46
    1a36:	08 95       	ret
	}
	else if(a_pwm_config->pwm_port == OC2){
		SET_BIT(DDRD , PD7); 	/*configure OC2 as output pin*/
    1a38:	8f 9a       	sbi	0x11, 7	; 17
		TCNT2 = 0; 				/*clear timer 0 counter register*/
    1a3a:	14 bc       	out	0x24, r1	; 36
		OCR2  = a_pwm_config->duty; 		/*set the duty cycle*/
    1a3c:	84 81       	ldd	r24, Z+4	; 0x04
    1a3e:	83 bd       	out	0x23, r24	; 35
		TCCR2 = (1<<WGM20) | (1<<WGM21); 	/*configure timer1 to PWM mode*/
    1a40:	88 e4       	ldi	r24, 0x48	; 72
    1a42:	85 bd       	out	0x25, r24	; 37
		TCCR2 = (TCCR2 & 0xCF) | ((a_pwm_config->pwm_mode & 0x03)<<4);
    1a44:	25 b5       	in	r18, 0x25	; 37
    1a46:	86 81       	ldd	r24, Z+6	; 0x06
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	83 70       	andi	r24, 0x03	; 3
    1a4c:	90 70       	andi	r25, 0x00	; 0
    1a4e:	82 95       	swap	r24
    1a50:	92 95       	swap	r25
    1a52:	90 7f       	andi	r25, 0xF0	; 240
    1a54:	98 27       	eor	r25, r24
    1a56:	80 7f       	andi	r24, 0xF0	; 240
    1a58:	98 27       	eor	r25, r24
    1a5a:	2f 7c       	andi	r18, 0xCF	; 207
    1a5c:	28 2b       	or	r18, r24
    1a5e:	25 bd       	out	0x25, r18	; 37
		TCCR2 = (TCCR2 & 0xF8) | (a_pwm_config->pwm_prescaler & 0x07);
    1a60:	95 b5       	in	r25, 0x25	; 37
    1a62:	81 81       	ldd	r24, Z+1	; 0x01
    1a64:	87 70       	andi	r24, 0x07	; 7
    1a66:	98 7f       	andi	r25, 0xF8	; 248
    1a68:	89 2b       	or	r24, r25
    1a6a:	85 bd       	out	0x25, r24	; 37
    1a6c:	08 95       	ret
		SET_BIT(TCCR1B , WGM12);
		SET_BIT(TCCR1B , WGM13);
		TCCR1B = (TCCR1B & 0xF8) | (a_pwm_config->pwm_prescaler & 0x07);
	}
	else if(a_pwm_config->pwm_port == OC1B){
		SET_BIT(DDRD , PD4); /*configure OC1B as output pin*/
    1a6e:	8c 9a       	sbi	0x11, 4	; 17
		ICR1  = a_pwm_config->freq;
    1a70:	82 81       	ldd	r24, Z+2	; 0x02
    1a72:	93 81       	ldd	r25, Z+3	; 0x03
    1a74:	97 bd       	out	0x27, r25	; 39
    1a76:	86 bd       	out	0x26, r24	; 38
		OCR1B = a_pwm_config->duty;
    1a78:	84 81       	ldd	r24, Z+4	; 0x04
    1a7a:	95 81       	ldd	r25, Z+5	; 0x05
    1a7c:	99 bd       	out	0x29, r25	; 41
    1a7e:	88 bd       	out	0x28, r24	; 40
		/*set the compare mode for OC1A inverting / non */
		TCCR1A = (TCCR1A & 0xCF) | ((a_pwm_config->pwm_mode & 0x03)<<4);
    1a80:	2f b5       	in	r18, 0x2f	; 47
    1a82:	86 81       	ldd	r24, Z+6	; 0x06
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	83 70       	andi	r24, 0x03	; 3
    1a88:	90 70       	andi	r25, 0x00	; 0
    1a8a:	82 95       	swap	r24
    1a8c:	92 95       	swap	r25
    1a8e:	90 7f       	andi	r25, 0xF0	; 240
    1a90:	98 27       	eor	r25, r24
    1a92:	80 7f       	andi	r24, 0xF0	; 240
    1a94:	98 27       	eor	r25, r24
    1a96:	2f 7c       	andi	r18, 0xCF	; 207
    1a98:	28 2b       	or	r18, r24
    1a9a:	2f bd       	out	0x2f, r18	; 47
		CLEAR_BIT(TCCR1A,FOC1B);
    1a9c:	8f b5       	in	r24, 0x2f	; 47
    1a9e:	8b 7f       	andi	r24, 0xFB	; 251
    1aa0:	b7 cf       	rjmp	.-146    	; 0x1a10 <PWM_start+0x78>

00001aa2 <PWM_stop>:
}
/*
 * stop the timer1 PWM
 * */
void PWM_stop(e_pwmChannel ch){
	switch(ch){
    1aa2:	83 30       	cpi	r24, 0x03	; 3
    1aa4:	30 f4       	brcc	.+12     	; 0x1ab2 <PWM_stop+0x10>
    1aa6:	81 30       	cpi	r24, 0x01	; 1
    1aa8:	38 f0       	brcs	.+14     	; 0x1ab8 <PWM_stop+0x16>
	case OC0:
		TCCR0 = (TCCR0 & 0xF8) | (0x00);
		break;
	case OC1A:
	case OC1B:
		TCCR1B = (TCCR1B & 0xF8) | (0x00);
    1aaa:	8e b5       	in	r24, 0x2e	; 46
    1aac:	88 7f       	andi	r24, 0xF8	; 248
    1aae:	8e bd       	out	0x2e, r24	; 46
    1ab0:	08 95       	ret
}
/*
 * stop the timer1 PWM
 * */
void PWM_stop(e_pwmChannel ch){
	switch(ch){
    1ab2:	83 30       	cpi	r24, 0x03	; 3
    1ab4:	29 f0       	breq	.+10     	; 0x1ac0 <PWM_stop+0x1e>
    1ab6:	08 95       	ret
	case OC0:
		TCCR0 = (TCCR0 & 0xF8) | (0x00);
    1ab8:	83 b7       	in	r24, 0x33	; 51
    1aba:	88 7f       	andi	r24, 0xF8	; 248
    1abc:	83 bf       	out	0x33, r24	; 51
    1abe:	08 95       	ret
	case OC1A:
	case OC1B:
		TCCR1B = (TCCR1B & 0xF8) | (0x00);
		break;
	case OC2:
		TCCR2 =0x00;
    1ac0:	15 bc       	out	0x25, r1	; 37
    1ac2:	08 95       	ret

00001ac4 <PWM_change_DutyCycle>:
		break;
	}
}

void PWM_change_DutyCycle(e_pwmChannel ch , uint16 duty){
	switch(ch){
    1ac4:	81 30       	cpi	r24, 0x01	; 1
    1ac6:	59 f0       	breq	.+22     	; 0x1ade <PWM_change_DutyCycle+0x1a>
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	28 f0       	brcs	.+10     	; 0x1ad6 <PWM_change_DutyCycle+0x12>
    1acc:	82 30       	cpi	r24, 0x02	; 2
    1ace:	51 f0       	breq	.+20     	; 0x1ae4 <PWM_change_DutyCycle+0x20>
    1ad0:	83 30       	cpi	r24, 0x03	; 3
    1ad2:	19 f0       	breq	.+6      	; 0x1ada <PWM_change_DutyCycle+0x16>
    1ad4:	08 95       	ret
	case OC0:
		OCR0  = duty; /*set the duty cycle*/
    1ad6:	6c bf       	out	0x3c, r22	; 60
    1ad8:	08 95       	ret
		break;
	case OC1B:
		OCR1B = duty;
		break;
	case OC2:
		OCR2 = duty;
    1ada:	63 bd       	out	0x23, r22	; 35
    1adc:	08 95       	ret
	switch(ch){
	case OC0:
		OCR0  = duty; /*set the duty cycle*/
		break;
	case OC1A:
		OCR1A = duty;
    1ade:	7b bd       	out	0x2b, r23	; 43
    1ae0:	6a bd       	out	0x2a, r22	; 42
    1ae2:	08 95       	ret
		break;
	case OC1B:
		OCR1B = duty;
    1ae4:	79 bd       	out	0x29, r23	; 41
    1ae6:	68 bd       	out	0x28, r22	; 40
    1ae8:	08 95       	ret

00001aea <MOTOR_changeDirection>:
	PWM_stop(motorConfig->enablePIN);
}



void MOTOR_changeDirection(motorConfig_t * motorConfig , motorDir direction){
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	ec 01       	movw	r28, r24
	if(direction == CW){
    1af0:	66 23       	and	r22, r22
    1af2:	29 f0       	breq	.+10     	; 0x1afe <MOTOR_changeDirection+0x14>
		DIO_writeChannel(&motorConfig->motorPIN0 , 1);
		DIO_writeChannel(&motorConfig->motorPIN1 , 0);
	}
	else if(direction == CCW){
    1af4:	61 30       	cpi	r22, 0x01	; 1
    1af6:	71 f0       	breq	.+28     	; 0x1b14 <MOTOR_changeDirection+0x2a>
		DIO_writeChannel(&motorConfig->motorPIN0 , 0);
		DIO_writeChannel(&motorConfig->motorPIN1 , 1);

	}
}
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	08 95       	ret



void MOTOR_changeDirection(motorConfig_t * motorConfig , motorDir direction){
	if(direction == CW){
		DIO_writeChannel(&motorConfig->motorPIN0 , 1);
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
		DIO_writeChannel(&motorConfig->motorPIN1 , 0);
    1b04:	ce 01       	movw	r24, r28
    1b06:	04 96       	adiw	r24, 0x04	; 4
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
	else if(direction == CCW){
		DIO_writeChannel(&motorConfig->motorPIN0 , 0);
		DIO_writeChannel(&motorConfig->motorPIN1 , 1);

	}
}
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	08 95       	ret
	if(direction == CW){
		DIO_writeChannel(&motorConfig->motorPIN0 , 1);
		DIO_writeChannel(&motorConfig->motorPIN1 , 0);
	}
	else if(direction == CCW){
		DIO_writeChannel(&motorConfig->motorPIN0 , 0);
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
		DIO_writeChannel(&motorConfig->motorPIN1 , 1);
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	04 96       	adiw	r24, 0x04	; 4
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>

	}
}
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	08 95       	ret

00001b2a <MOTOR_stop>:
	s_pwmConfig motor = {motorConfig->enablePIN , CLK_8 , 255 , speed , non_inverting};
	PWM_start(&motor);
}

void MOTOR_stop(motorConfig_t * motorConfig){
	PWM_stop(motorConfig->enablePIN);
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	80 85       	ldd	r24, Z+8	; 0x08
    1b2e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <PWM_stop>
}
    1b32:	08 95       	ret

00001b34 <MOTOR_start>:

	}
}


void MOTOR_start(motorConfig_t * motorConfig , uint8 speed){
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	27 97       	sbiw	r28, 0x07	; 7
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
	s_pwmConfig motor = {motorConfig->enablePIN , CLK_8 , 255 , speed , non_inverting};
    1b48:	fc 01       	movw	r30, r24
    1b4a:	80 85       	ldd	r24, Z+8	; 0x08
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	22 e0       	ldi	r18, 0x02	; 2
    1b50:	2a 83       	std	Y+2, r18	; 0x02
    1b52:	8f ef       	ldi	r24, 0xFF	; 255
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9c 83       	std	Y+4, r25	; 0x04
    1b58:	8b 83       	std	Y+3, r24	; 0x03
    1b5a:	6d 83       	std	Y+5, r22	; 0x05
    1b5c:	1e 82       	std	Y+6, r1	; 0x06
    1b5e:	2f 83       	std	Y+7, r18	; 0x07
	PWM_start(&motor);
    1b60:	ce 01       	movw	r24, r28
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	0e 94 cc 0c 	call	0x1998	; 0x1998 <PWM_start>
}
    1b68:	27 96       	adiw	r28, 0x07	; 7
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <MOTOR_init>:
#include "../../MCAL/dio_module/dio.h"
#include "l293D.h"



void MOTOR_init(motorConfig_t * motorConfig){
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	ec 01       	movw	r28, r24
	DIO_initChannel(&motorConfig->motorPIN0);
    1b84:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DIO_initChannel>
	DIO_initChannel(&motorConfig->motorPIN1);
    1b88:	8e 01       	movw	r16, r28
    1b8a:	0c 5f       	subi	r16, 0xFC	; 252
    1b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8e:	c8 01       	movw	r24, r16
    1b90:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DIO_initChannel>
	if(motorConfig->direction == CW){
    1b94:	89 85       	ldd	r24, Y+9	; 0x09
    1b96:	88 23       	and	r24, r24
    1b98:	39 f0       	breq	.+14     	; 0x1ba8 <MOTOR_init+0x2e>
		DIO_writeChannel(&motorConfig->motorPIN0 , 1);
		DIO_writeChannel(&motorConfig->motorPIN1 , 0);
	}
	else if(motorConfig->direction == CCW){
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	91 f0       	breq	.+36     	; 0x1bc2 <MOTOR_init+0x48>
		DIO_writeChannel(&motorConfig->motorPIN0 , 0);
		DIO_writeChannel(&motorConfig->motorPIN1 , 1);

	}
}
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	08 95       	ret

void MOTOR_init(motorConfig_t * motorConfig){
	DIO_initChannel(&motorConfig->motorPIN0);
	DIO_initChannel(&motorConfig->motorPIN1);
	if(motorConfig->direction == CW){
		DIO_writeChannel(&motorConfig->motorPIN0 , 1);
    1ba8:	ce 01       	movw	r24, r28
    1baa:	61 e0       	ldi	r22, 0x01	; 1
    1bac:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
		DIO_writeChannel(&motorConfig->motorPIN1 , 0);
    1bb0:	c8 01       	movw	r24, r16
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
	else if(motorConfig->direction == CCW){
		DIO_writeChannel(&motorConfig->motorPIN0 , 0);
		DIO_writeChannel(&motorConfig->motorPIN1 , 1);

	}
}
    1bb8:	df 91       	pop	r29
    1bba:	cf 91       	pop	r28
    1bbc:	1f 91       	pop	r17
    1bbe:	0f 91       	pop	r16
    1bc0:	08 95       	ret
	if(motorConfig->direction == CW){
		DIO_writeChannel(&motorConfig->motorPIN0 , 1);
		DIO_writeChannel(&motorConfig->motorPIN1 , 0);
	}
	else if(motorConfig->direction == CCW){
		DIO_writeChannel(&motorConfig->motorPIN0 , 0);
    1bc2:	ce 01       	movw	r24, r28
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
		DIO_writeChannel(&motorConfig->motorPIN1 , 1);
    1bca:	c8 01       	movw	r24, r16
    1bcc:	61 e0       	ldi	r22, 0x01	; 1
    1bce:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>

	}
}
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	08 95       	ret

00001bdc <LCD_characterDisplay>:
}

/*
 * send character (ascii of character) to be displayed on the LCD
 * */
void LCD_characterDisplay(uint8 a_character){
    1bdc:	af 92       	push	r10
    1bde:	bf 92       	push	r11
    1be0:	cf 92       	push	r12
    1be2:	df 92       	push	r13
    1be4:	ef 92       	push	r14
    1be6:	ff 92       	push	r15
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	e8 2e       	mov	r14, r24
	DIO_writeChannel(&RS , 1);		/*RS = 1 to data*/
    1bee:	8c e6       	ldi	r24, 0x6C	; 108
    1bf0:	91 e0       	ldi	r25, 0x01	; 1
    1bf2:	61 e0       	ldi	r22, 0x01	; 1
    1bf4:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    1bf8:	80 e7       	ldi	r24, 0x70	; 112
    1bfa:	91 e0       	ldi	r25, 0x01	; 1
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c02:	00 ed       	ldi	r16, 0xD0	; 208
    1c04:	17 e0       	ldi	r17, 0x07	; 7
    1c06:	c8 01       	movw	r24, r16
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD_characterDisplay+0x2c>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1c0c:	24 e7       	ldi	r18, 0x74	; 116
    1c0e:	c2 2e       	mov	r12, r18
    1c10:	21 e0       	ldi	r18, 0x01	; 1
    1c12:	d2 2e       	mov	r13, r18
    1c14:	c6 01       	movw	r24, r12
    1c16:	61 e0       	ldi	r22, 0x01	; 1
    1c18:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1c1c:	c8 01       	movw	r24, r16
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_characterDisplay+0x42>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_character & 0xf0));	/*write upper 4 bit of command*/
    1c22:	98 e6       	ldi	r25, 0x68	; 104
    1c24:	a9 2e       	mov	r10, r25
    1c26:	91 e0       	ldi	r25, 0x01	; 1
    1c28:	b9 2e       	mov	r11, r25
    1c2a:	6e 2d       	mov	r22, r14
    1c2c:	60 7f       	andi	r22, 0xF0	; 240
    1c2e:	c5 01       	movw	r24, r10
    1c30:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    1c34:	c8 01       	movw	r24, r16
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <LCD_characterDisplay+0x5a>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1c3a:	c6 01       	movw	r24, r12
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1c42:	c8 01       	movw	r24, r16
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_characterDisplay+0x68>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1c48:	c6 01       	movw	r24, r12
    1c4a:	61 e0       	ldi	r22, 0x01	; 1
    1c4c:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1c50:	c8 01       	movw	r24, r16
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <LCD_characterDisplay+0x76>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_character & 0x0f)<<4));	/*write lower 4 bit of command*/
    1c56:	ff 24       	eor	r15, r15
    1c58:	e2 94       	swap	r14
    1c5a:	f2 94       	swap	r15
    1c5c:	80 ef       	ldi	r24, 0xF0	; 240
    1c5e:	f8 22       	and	r15, r24
    1c60:	fe 24       	eor	r15, r14
    1c62:	e8 22       	and	r14, r24
    1c64:	fe 24       	eor	r15, r14
    1c66:	c5 01       	movw	r24, r10
    1c68:	6e 2d       	mov	r22, r14
    1c6a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    1c6e:	c8 01       	movw	r24, r16
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <LCD_characterDisplay+0x94>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1c74:	c6 01       	movw	r24, r12
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0);  	/*enable pin = 0*/
#endif
#endif

}
    1c7c:	1f 91       	pop	r17
    1c7e:	0f 91       	pop	r16
    1c80:	ff 90       	pop	r15
    1c82:	ef 90       	pop	r14
    1c84:	df 90       	pop	r13
    1c86:	cf 90       	pop	r12
    1c88:	bf 90       	pop	r11
    1c8a:	af 90       	pop	r10
    1c8c:	08 95       	ret

00001c8e <LCD_sendCommand>:
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);	/*turn on the LCD and display cursor*/
}
/*
 * send 8 bit command to LCD (read LCD command section in lcd.h)
 * */
void LCD_sendCommand(uint8 a_command){
    1c8e:	af 92       	push	r10
    1c90:	bf 92       	push	r11
    1c92:	cf 92       	push	r12
    1c94:	df 92       	push	r13
    1c96:	ef 92       	push	r14
    1c98:	ff 92       	push	r15
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	e8 2e       	mov	r14, r24
	DIO_writeChannel(&RS , 0);		/*RS = 0 to command*/
    1ca0:	8c e6       	ldi	r24, 0x6C	; 108
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    1caa:	80 e7       	ldi	r24, 0x70	; 112
    1cac:	91 e0       	ldi	r25, 0x01	; 1
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1cb4:	00 ed       	ldi	r16, 0xD0	; 208
    1cb6:	17 e0       	ldi	r17, 0x07	; 7
    1cb8:	c8 01       	movw	r24, r16
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <LCD_sendCommand+0x2c>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1cbe:	54 e7       	ldi	r21, 0x74	; 116
    1cc0:	c5 2e       	mov	r12, r21
    1cc2:	51 e0       	ldi	r21, 0x01	; 1
    1cc4:	d5 2e       	mov	r13, r21
    1cc6:	c6 01       	movw	r24, r12
    1cc8:	61 e0       	ldi	r22, 0x01	; 1
    1cca:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1cce:	c8 01       	movw	r24, r16
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <LCD_sendCommand+0x42>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_command & 0xf0));	/*write upper 4 bit of command*/
    1cd4:	48 e6       	ldi	r20, 0x68	; 104
    1cd6:	a4 2e       	mov	r10, r20
    1cd8:	41 e0       	ldi	r20, 0x01	; 1
    1cda:	b4 2e       	mov	r11, r20
    1cdc:	6e 2d       	mov	r22, r14
    1cde:	60 7f       	andi	r22, 0xF0	; 240
    1ce0:	c5 01       	movw	r24, r10
    1ce2:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    1ce6:	c8 01       	movw	r24, r16
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <LCD_sendCommand+0x5a>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1cec:	c6 01       	movw	r24, r12
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1cf4:	c8 01       	movw	r24, r16
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <LCD_sendCommand+0x68>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1cfa:	c6 01       	movw	r24, r12
    1cfc:	61 e0       	ldi	r22, 0x01	; 1
    1cfe:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1d02:	c8 01       	movw	r24, r16
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <LCD_sendCommand+0x76>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_command & 0x0f)<<4));	/*write lower 4 bit of command*/
    1d08:	ff 24       	eor	r15, r15
    1d0a:	e2 94       	swap	r14
    1d0c:	f2 94       	swap	r15
    1d0e:	30 ef       	ldi	r19, 0xF0	; 240
    1d10:	f3 22       	and	r15, r19
    1d12:	fe 24       	eor	r15, r14
    1d14:	e3 22       	and	r14, r19
    1d16:	fe 24       	eor	r15, r14
    1d18:	c5 01       	movw	r24, r10
    1d1a:	6e 2d       	mov	r22, r14
    1d1c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    1d20:	c8 01       	movw	r24, r16
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <LCD_sendCommand+0x94>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1d26:	c6 01       	movw	r24, r12
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0);  	/*enable pin = 0*/
#endif
#endif

}
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	ff 90       	pop	r15
    1d34:	ef 90       	pop	r14
    1d36:	df 90       	pop	r13
    1d38:	cf 90       	pop	r12
    1d3a:	bf 90       	pop	r11
    1d3c:	af 90       	pop	r10
    1d3e:	08 95       	ret

00001d40 <LCD_displayString>:
#endif
#endif

}

void LCD_displayString(const uint8 *a_string){
    1d40:	ff 92       	push	r15
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	8c 01       	movw	r16, r24
	while(*a_string != '\0'){
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	f0 80       	ld	r15, Z
    1d50:	ff 20       	and	r15, r15
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <LCD_displayString+0x16>
    1d54:	4b c0       	rjmp	.+150    	; 0x1dec <LCD_displayString+0xac>
    1d56:	c0 ed       	ldi	r28, 0xD0	; 208
    1d58:	d7 e0       	ldi	r29, 0x07	; 7

/*
 * send character (ascii of character) to be displayed on the LCD
 * */
void LCD_characterDisplay(uint8 a_character){
	DIO_writeChannel(&RS , 1);		/*RS = 1 to data*/
    1d5a:	8c e6       	ldi	r24, 0x6C	; 108
    1d5c:	91 e0       	ldi	r25, 0x01	; 1
    1d5e:	61 e0       	ldi	r22, 0x01	; 1
    1d60:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    1d64:	80 e7       	ldi	r24, 0x70	; 112
    1d66:	91 e0       	ldi	r25, 0x01	; 1
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1d6e:	ce 01       	movw	r24, r28
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <LCD_displayString+0x30>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1d74:	84 e7       	ldi	r24, 0x74	; 116
    1d76:	91 e0       	ldi	r25, 0x01	; 1
    1d78:	61 e0       	ldi	r22, 0x01	; 1
    1d7a:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1d7e:	ce 01       	movw	r24, r28
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <LCD_displayString+0x40>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_character & 0xf0));	/*write upper 4 bit of command*/
    1d84:	6f 2d       	mov	r22, r15
    1d86:	60 7f       	andi	r22, 0xF0	; 240
    1d88:	88 e6       	ldi	r24, 0x68	; 104
    1d8a:	91 e0       	ldi	r25, 0x01	; 1
    1d8c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    1d90:	ce 01       	movw	r24, r28
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_displayString+0x52>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1d96:	84 e7       	ldi	r24, 0x74	; 116
    1d98:	91 e0       	ldi	r25, 0x01	; 1
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1da0:	ce 01       	movw	r24, r28
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <LCD_displayString+0x62>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1da6:	84 e7       	ldi	r24, 0x74	; 116
    1da8:	91 e0       	ldi	r25, 0x01	; 1
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1db0:	ce 01       	movw	r24, r28
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <LCD_displayString+0x72>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_character & 0x0f)<<4));	/*write lower 4 bit of command*/
    1db6:	6f 2d       	mov	r22, r15
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	62 95       	swap	r22
    1dbc:	72 95       	swap	r23
    1dbe:	70 7f       	andi	r23, 0xF0	; 240
    1dc0:	76 27       	eor	r23, r22
    1dc2:	60 7f       	andi	r22, 0xF0	; 240
    1dc4:	76 27       	eor	r23, r22
    1dc6:	88 e6       	ldi	r24, 0x68	; 104
    1dc8:	91 e0       	ldi	r25, 0x01	; 1
    1dca:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    1dce:	ce 01       	movw	r24, r28
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <LCD_displayString+0x90>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1dd4:	84 e7       	ldi	r24, 0x74	; 116
    1dd6:	91 e0       	ldi	r25, 0x01	; 1
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
}

void LCD_displayString(const uint8 *a_string){
	while(*a_string != '\0'){
		LCD_characterDisplay(*a_string);
		a_string ++;
    1dde:	0f 5f       	subi	r16, 0xFF	; 255
    1de0:	1f 4f       	sbci	r17, 0xFF	; 255
#endif

}

void LCD_displayString(const uint8 *a_string){
	while(*a_string != '\0'){
    1de2:	f8 01       	movw	r30, r16
    1de4:	f0 80       	ld	r15, Z
    1de6:	ff 20       	and	r15, r15
    1de8:	09 f0       	breq	.+2      	; 0x1dec <LCD_displayString+0xac>
    1dea:	b7 cf       	rjmp	.-146    	; 0x1d5a <LCD_displayString+0x1a>
		LCD_characterDisplay(*a_string);
		a_string ++;
	}
}
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	ff 90       	pop	r15
    1df6:	08 95       	ret

00001df8 <LCD_clearScreen>:


void LCD_clearScreen(void){
    1df8:	cf 92       	push	r12
    1dfa:	df 92       	push	r13
    1dfc:	ef 92       	push	r14
    1dfe:	ff 92       	push	r15
    1e00:	0f 93       	push	r16
    1e02:	1f 93       	push	r17
}
/*
 * send 8 bit command to LCD (read LCD command section in lcd.h)
 * */
void LCD_sendCommand(uint8 a_command){
	DIO_writeChannel(&RS , 0);		/*RS = 0 to command*/
    1e04:	8c e6       	ldi	r24, 0x6C	; 108
    1e06:	91 e0       	ldi	r25, 0x01	; 1
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    1e0e:	80 e7       	ldi	r24, 0x70	; 112
    1e10:	91 e0       	ldi	r25, 0x01	; 1
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1e18:	00 ed       	ldi	r16, 0xD0	; 208
    1e1a:	17 e0       	ldi	r17, 0x07	; 7
    1e1c:	c8 01       	movw	r24, r16
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD_clearScreen+0x26>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1e22:	a4 e7       	ldi	r26, 0x74	; 116
    1e24:	ea 2e       	mov	r14, r26
    1e26:	a1 e0       	ldi	r26, 0x01	; 1
    1e28:	fa 2e       	mov	r15, r26
    1e2a:	c7 01       	movw	r24, r14
    1e2c:	61 e0       	ldi	r22, 0x01	; 1
    1e2e:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1e32:	c8 01       	movw	r24, r16
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <LCD_clearScreen+0x3c>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_command & 0xf0));	/*write upper 4 bit of command*/
    1e38:	f8 e6       	ldi	r31, 0x68	; 104
    1e3a:	cf 2e       	mov	r12, r31
    1e3c:	f1 e0       	ldi	r31, 0x01	; 1
    1e3e:	df 2e       	mov	r13, r31
    1e40:	c6 01       	movw	r24, r12
    1e42:	60 e0       	ldi	r22, 0x00	; 0
    1e44:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    1e48:	c8 01       	movw	r24, r16
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <LCD_clearScreen+0x52>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1e4e:	c7 01       	movw	r24, r14
    1e50:	60 e0       	ldi	r22, 0x00	; 0
    1e52:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1e56:	c8 01       	movw	r24, r16
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <LCD_clearScreen+0x60>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1e5c:	c7 01       	movw	r24, r14
    1e5e:	61 e0       	ldi	r22, 0x01	; 1
    1e60:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1e64:	c8 01       	movw	r24, r16
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <LCD_clearScreen+0x6e>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_command & 0x0f)<<4));	/*write lower 4 bit of command*/
    1e6a:	c6 01       	movw	r24, r12
    1e6c:	60 e1       	ldi	r22, 0x10	; 16
    1e6e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    1e72:	c8 01       	movw	r24, r16
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <LCD_clearScreen+0x7c>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1e78:	c7 01       	movw	r24, r14
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
}


void LCD_clearScreen(void){
	LCD_sendCommand(CLEAR_DISPLAY_SCREEN);
}
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	ff 90       	pop	r15
    1e86:	ef 90       	pop	r14
    1e88:	df 90       	pop	r13
    1e8a:	cf 90       	pop	r12
    1e8c:	08 95       	ret

00001e8e <LCD_goTo>:
	}
	LCD_displayString(num_string);
}


void LCD_goTo(uint8 a_row , uint8 a_col){
    1e8e:	ff 92       	push	r15
    1e90:	0f 93       	push	r16
    1e92:	1f 93       	push	r17
	uint8 address;
	switch(a_row){
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <LCD_goTo+0xc>
    1e98:	57 c0       	rjmp	.+174    	; 0x1f48 <LCD_goTo+0xba>
    1e9a:	81 30       	cpi	r24, 0x01	; 1
    1e9c:	08 f0       	brcs	.+2      	; 0x1ea0 <LCD_goTo+0x12>
    1e9e:	4b c0       	rjmp	.+150    	; 0x1f36 <LCD_goTo+0xa8>
	case 0:
		address = 128 + a_col;
    1ea0:	90 e8       	ldi	r25, 0x80	; 128
    1ea2:	f9 2e       	mov	r15, r25
    1ea4:	f6 0e       	add	r15, r22
}
/*
 * send 8 bit command to LCD (read LCD command section in lcd.h)
 * */
void LCD_sendCommand(uint8 a_command){
	DIO_writeChannel(&RS , 0);		/*RS = 0 to command*/
    1ea6:	8c e6       	ldi	r24, 0x6C	; 108
    1ea8:	91 e0       	ldi	r25, 0x01	; 1
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    1eb0:	80 e7       	ldi	r24, 0x70	; 112
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	60 e0       	ldi	r22, 0x00	; 0
    1eb6:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1eba:	00 ed       	ldi	r16, 0xD0	; 208
    1ebc:	17 e0       	ldi	r17, 0x07	; 7
    1ebe:	c8 01       	movw	r24, r16
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <LCD_goTo+0x32>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1ec4:	84 e7       	ldi	r24, 0x74	; 116
    1ec6:	91 e0       	ldi	r25, 0x01	; 1
    1ec8:	61 e0       	ldi	r22, 0x01	; 1
    1eca:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1ece:	c8 01       	movw	r24, r16
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <LCD_goTo+0x42>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_command & 0xf0));	/*write upper 4 bit of command*/
    1ed4:	6f 2d       	mov	r22, r15
    1ed6:	60 7f       	andi	r22, 0xF0	; 240
    1ed8:	88 e6       	ldi	r24, 0x68	; 104
    1eda:	91 e0       	ldi	r25, 0x01	; 1
    1edc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    1ee0:	c8 01       	movw	r24, r16
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <LCD_goTo+0x54>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1ee6:	84 e7       	ldi	r24, 0x74	; 116
    1ee8:	91 e0       	ldi	r25, 0x01	; 1
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1ef0:	c8 01       	movw	r24, r16
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <LCD_goTo+0x64>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1ef6:	84 e7       	ldi	r24, 0x74	; 116
    1ef8:	91 e0       	ldi	r25, 0x01	; 1
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1f00:	c8 01       	movw	r24, r16
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_goTo+0x74>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_command & 0x0f)<<4));	/*write lower 4 bit of command*/
    1f06:	6f 2d       	mov	r22, r15
    1f08:	70 e0       	ldi	r23, 0x00	; 0
    1f0a:	62 95       	swap	r22
    1f0c:	72 95       	swap	r23
    1f0e:	70 7f       	andi	r23, 0xF0	; 240
    1f10:	76 27       	eor	r23, r22
    1f12:	60 7f       	andi	r22, 0xF0	; 240
    1f14:	76 27       	eor	r23, r22
    1f16:	88 e6       	ldi	r24, 0x68	; 104
    1f18:	91 e0       	ldi	r25, 0x01	; 1
    1f1a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    1f1e:	c8 01       	movw	r24, r16
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <LCD_goTo+0x92>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1f24:	84 e7       	ldi	r24, 0x74	; 116
    1f26:	91 e0       	ldi	r25, 0x01	; 1
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
#endif
	default :
		break;
	}
	LCD_sendCommand(address);
}
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	ff 90       	pop	r15
    1f34:	08 95       	ret
}


void LCD_goTo(uint8 a_row , uint8 a_col){
	uint8 address;
	switch(a_row){
    1f36:	82 30       	cpi	r24, 0x02	; 2
    1f38:	59 f0       	breq	.+22     	; 0x1f50 <LCD_goTo+0xc2>
    1f3a:	83 30       	cpi	r24, 0x03	; 3
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <LCD_goTo+0xb2>
    1f3e:	b3 cf       	rjmp	.-154    	; 0x1ea6 <LCD_goTo+0x18>
#if (LCD_ROW_NUM == 4)
	case 2:
		address = 128 + a_col + 0x10;
		break;
	case 3:
		address = 128 + a_col + 0x50;
    1f40:	10 ed       	ldi	r17, 0xD0	; 208
    1f42:	f1 2e       	mov	r15, r17
    1f44:	f6 0e       	add	r15, r22
    1f46:	af cf       	rjmp	.-162    	; 0x1ea6 <LCD_goTo+0x18>
	switch(a_row){
	case 0:
		address = 128 + a_col;
		break;
	case 1:
		address = 128 + a_col + 0x40;
    1f48:	80 ec       	ldi	r24, 0xC0	; 192
    1f4a:	f8 2e       	mov	r15, r24
    1f4c:	f6 0e       	add	r15, r22
    1f4e:	ab cf       	rjmp	.-170    	; 0x1ea6 <LCD_goTo+0x18>
		break;
#if (LCD_ROW_NUM == 4)
	case 2:
		address = 128 + a_col + 0x10;
    1f50:	00 e9       	ldi	r16, 0x90	; 144
    1f52:	f0 2e       	mov	r15, r16
    1f54:	f6 0e       	add	r15, r22
    1f56:	a7 cf       	rjmp	.-178    	; 0x1ea6 <LCD_goTo+0x18>

00001f58 <LCD_init>:
CHconfig_t RS     = RS_PIN;
CHconfig_t RW     = RW_PIN;
CHconfig_t E      = E_PIN;
CHconfig_t V0     = V0_PIN;

void LCD_init(void){
    1f58:	8f 92       	push	r8
    1f5a:	9f 92       	push	r9
    1f5c:	af 92       	push	r10
    1f5e:	bf 92       	push	r11
    1f60:	cf 92       	push	r12
    1f62:	df 92       	push	r13
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
	/*set the pins connected to LCD to output port*/
	DIO_initChannel(&RS);
    1f6c:	5c e6       	ldi	r21, 0x6C	; 108
    1f6e:	a5 2e       	mov	r10, r21
    1f70:	51 e0       	ldi	r21, 0x01	; 1
    1f72:	b5 2e       	mov	r11, r21
    1f74:	c5 01       	movw	r24, r10
    1f76:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DIO_initChannel>
	DIO_initChannel(&RW);
    1f7a:	40 e7       	ldi	r20, 0x70	; 112
    1f7c:	84 2e       	mov	r8, r20
    1f7e:	41 e0       	ldi	r20, 0x01	; 1
    1f80:	94 2e       	mov	r9, r20
    1f82:	c4 01       	movw	r24, r8
    1f84:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DIO_initChannel>
	DIO_initChannel(&E);
    1f88:	34 e7       	ldi	r19, 0x74	; 116
    1f8a:	e3 2e       	mov	r14, r19
    1f8c:	31 e0       	ldi	r19, 0x01	; 1
    1f8e:	f3 2e       	mov	r15, r19
    1f90:	c7 01       	movw	r24, r14
    1f92:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DIO_initChannel>
	DIO_initPort(&data);
    1f96:	28 e6       	ldi	r18, 0x68	; 104
    1f98:	c2 2e       	mov	r12, r18
    1f9a:	21 e0       	ldi	r18, 0x01	; 1
    1f9c:	d2 2e       	mov	r13, r18
    1f9e:	c6 01       	movw	r24, r12
    1fa0:	0e 94 ed 0b 	call	0x17da	; 0x17da <DIO_initPort>
}
/*
 * send 8 bit command to LCD (read LCD command section in lcd.h)
 * */
void LCD_sendCommand(uint8 a_command){
	DIO_writeChannel(&RS , 0);		/*RS = 0 to command*/
    1fa4:	c5 01       	movw	r24, r10
    1fa6:	60 e0       	ldi	r22, 0x00	; 0
    1fa8:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    1fac:	c4 01       	movw	r24, r8
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1fb4:	00 ed       	ldi	r16, 0xD0	; 208
    1fb6:	17 e0       	ldi	r17, 0x07	; 7
    1fb8:	c8 01       	movw	r24, r16
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <LCD_init+0x62>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1fbe:	c7 01       	movw	r24, r14
    1fc0:	61 e0       	ldi	r22, 0x01	; 1
    1fc2:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1fc6:	c8 01       	movw	r24, r16
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <LCD_init+0x70>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_command & 0xf0));	/*write upper 4 bit of command*/
    1fcc:	c6 01       	movw	r24, r12
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    1fd4:	c8 01       	movw	r24, r16
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <LCD_init+0x7e>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    1fda:	c7 01       	movw	r24, r14
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1fe2:	c8 01       	movw	r24, r16
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <LCD_init+0x8c>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    1fe8:	c7 01       	movw	r24, r14
    1fea:	61 e0       	ldi	r22, 0x01	; 1
    1fec:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    1ff0:	c8 01       	movw	r24, r16
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <LCD_init+0x9a>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_command & 0x0f)<<4));	/*write lower 4 bit of command*/
    1ff6:	c6 01       	movw	r24, r12
    1ff8:	60 e2       	ldi	r22, 0x20	; 32
    1ffa:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    1ffe:	c8 01       	movw	r24, r16
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_init+0xa8>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    2004:	c7 01       	movw	r24, r14
    2006:	60 e0       	ldi	r22, 0x00	; 0
    2008:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
}
/*
 * send 8 bit command to LCD (read LCD command section in lcd.h)
 * */
void LCD_sendCommand(uint8 a_command){
	DIO_writeChannel(&RS , 0);		/*RS = 0 to command*/
    200c:	c5 01       	movw	r24, r10
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    2014:	c4 01       	movw	r24, r8
    2016:	60 e0       	ldi	r22, 0x00	; 0
    2018:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    201c:	c8 01       	movw	r24, r16
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <LCD_init+0xc6>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    2022:	c7 01       	movw	r24, r14
    2024:	61 e0       	ldi	r22, 0x01	; 1
    2026:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    202a:	c8 01       	movw	r24, r16
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <LCD_init+0xd4>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_command & 0xf0));	/*write upper 4 bit of command*/
    2030:	c6 01       	movw	r24, r12
    2032:	60 e2       	ldi	r22, 0x20	; 32
    2034:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    2038:	c8 01       	movw	r24, r16
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	f1 f7       	brne	.-4      	; 0x203a <LCD_init+0xe2>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    203e:	c7 01       	movw	r24, r14
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    2046:	c8 01       	movw	r24, r16
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <LCD_init+0xf0>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    204c:	c7 01       	movw	r24, r14
    204e:	61 e0       	ldi	r22, 0x01	; 1
    2050:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    2054:	c8 01       	movw	r24, r16
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <LCD_init+0xfe>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_command & 0x0f)<<4));	/*write lower 4 bit of command*/
    205a:	c6 01       	movw	r24, r12
    205c:	60 e8       	ldi	r22, 0x80	; 128
    205e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    2062:	c8 01       	movw	r24, r16
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <LCD_init+0x10c>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    2068:	c7 01       	movw	r24, r14
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
}
/*
 * send 8 bit command to LCD (read LCD command section in lcd.h)
 * */
void LCD_sendCommand(uint8 a_command){
	DIO_writeChannel(&RS , 0);		/*RS = 0 to command*/
    2070:	c5 01       	movw	r24, r10
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    2078:	c4 01       	movw	r24, r8
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    2080:	c8 01       	movw	r24, r16
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <LCD_init+0x12a>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    2086:	c7 01       	movw	r24, r14
    2088:	61 e0       	ldi	r22, 0x01	; 1
    208a:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    208e:	c8 01       	movw	r24, r16
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_init+0x138>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_command & 0xf0));	/*write upper 4 bit of command*/
    2094:	c6 01       	movw	r24, r12
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    209c:	c8 01       	movw	r24, r16
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_init+0x146>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    20a2:	c7 01       	movw	r24, r14
    20a4:	60 e0       	ldi	r22, 0x00	; 0
    20a6:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    20aa:	c8 01       	movw	r24, r16
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <LCD_init+0x154>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    20b0:	c7 01       	movw	r24, r14
    20b2:	61 e0       	ldi	r22, 0x01	; 1
    20b4:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    20b8:	c8 01       	movw	r24, r16
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <LCD_init+0x162>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_command & 0x0f)<<4));	/*write lower 4 bit of command*/
    20be:	c6 01       	movw	r24, r12
    20c0:	60 ec       	ldi	r22, 0xC0	; 192
    20c2:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    20c6:	c8 01       	movw	r24, r16
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <LCD_init+0x170>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    20cc:	c7 01       	movw	r24, r14
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
#ifndef LCD_4BIT_MODE_UPPER_PORT
	LCD_sendCommand(_4BIT_2LINES);	/*set LCD to 8bit 2lines mode*/
#endif
#endif
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);	/*turn on the LCD and display cursor*/
}
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	ff 90       	pop	r15
    20da:	ef 90       	pop	r14
    20dc:	df 90       	pop	r13
    20de:	cf 90       	pop	r12
    20e0:	bf 90       	pop	r11
    20e2:	af 90       	pop	r10
    20e4:	9f 90       	pop	r9
    20e6:	8f 90       	pop	r8
    20e8:	08 95       	ret

000020ea <LCD_displayNumber>:
	LCD_sendCommand(CLEAR_DISPLAY_SCREEN);
}



void LCD_displayNumber(uint16 a_num){
    20ea:	cf 92       	push	r12
    20ec:	df 92       	push	r13
    20ee:	ef 92       	push	r14
    20f0:	ff 92       	push	r15
    20f2:	0f 93       	push	r16
    20f4:	1f 93       	push	r17
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	60 97       	sbiw	r28, 0x10	; 16
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	cd bf       	out	0x3d, r28	; 61
    210a:	8c 01       	movw	r16, r24
	if(a_num == 0){
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	79 f1       	breq	.+94     	; 0x216e <LCD_displayNumber+0x84>
		LCD_characterDisplay('0');
	}
	uint8 num_string[16] = {'\0'};
    2110:	7e 01       	movw	r14, r28
    2112:	08 94       	sec
    2114:	e1 1c       	adc	r14, r1
    2116:	f1 1c       	adc	r15, r1
    2118:	80 e1       	ldi	r24, 0x10	; 16
    211a:	f7 01       	movw	r30, r14
    211c:	11 92       	st	Z+, r1
    211e:	8a 95       	dec	r24
    2120:	e9 f7       	brne	.-6      	; 0x211c <LCD_displayNumber+0x32>
    2122:	41 e0       	ldi	r20, 0x01	; 1
	uint8 shift = 1;
	while(a_num > 0){
		int i=shift;
		for( ; i>=0 ; i--){
    2124:	fe ef       	ldi	r31, 0xFE	; 254
    2126:	cf 2e       	mov	r12, r31
    2128:	ff ef       	ldi	r31, 0xFF	; 255
    212a:	df 2e       	mov	r13, r31

void LCD_displayNumber(uint16 a_num){
	if(a_num == 0){
		LCD_characterDisplay('0');
	}
	uint8 num_string[16] = {'\0'};
    212c:	e4 2f       	mov	r30, r20
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	31 97       	sbiw	r30, 0x01	; 1
    2132:	ee 0d       	add	r30, r14
    2134:	ff 1d       	adc	r31, r15
	uint8 shift = 1;
	while(a_num > 0){
		int i=shift;
		for( ; i>=0 ; i--){
    2136:	97 01       	movw	r18, r14
    2138:	2c 0d       	add	r18, r12
    213a:	3d 1d       	adc	r19, r13
			num_string[i] = num_string[i-1];
    213c:	80 81       	ld	r24, Z
    213e:	81 83       	std	Z+1, r24	; 0x01
    2140:	31 97       	sbiw	r30, 0x01	; 1
	}
	uint8 num_string[16] = {'\0'};
	uint8 shift = 1;
	while(a_num > 0){
		int i=shift;
		for( ; i>=0 ; i--){
    2142:	e2 17       	cp	r30, r18
    2144:	f3 07       	cpc	r31, r19
    2146:	d1 f7       	brne	.-12     	; 0x213c <LCD_displayNumber+0x52>
			num_string[i] = num_string[i-1];
		}
		num_string[0] = (a_num % 10) + 48;
    2148:	c8 01       	movw	r24, r16
    214a:	6a e0       	ldi	r22, 0x0A	; 10
    214c:	70 e0       	ldi	r23, 0x00	; 0
    214e:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__udivmodhi4>
    2152:	80 5d       	subi	r24, 0xD0	; 208
    2154:	89 83       	std	Y+1, r24	; 0x01
		a_num /= 10;
    2156:	c8 01       	movw	r24, r16
    2158:	6a e0       	ldi	r22, 0x0A	; 10
    215a:	70 e0       	ldi	r23, 0x00	; 0
    215c:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__udivmodhi4>
    2160:	8b 01       	movw	r16, r22
	if(a_num == 0){
		LCD_characterDisplay('0');
	}
	uint8 num_string[16] = {'\0'};
	uint8 shift = 1;
	while(a_num > 0){
    2162:	61 15       	cp	r22, r1
    2164:	71 05       	cpc	r23, r1
    2166:	09 f4       	brne	.+2      	; 0x216a <LCD_displayNumber+0x80>
    2168:	47 c0       	rjmp	.+142    	; 0x21f8 <LCD_displayNumber+0x10e>
		for( ; i>=0 ; i--){
			num_string[i] = num_string[i-1];
		}
		num_string[0] = (a_num % 10) + 48;
		a_num /= 10;
		shift++;
    216a:	4f 5f       	subi	r20, 0xFF	; 255
    216c:	df cf       	rjmp	.-66     	; 0x212c <LCD_displayNumber+0x42>

/*
 * send character (ascii of character) to be displayed on the LCD
 * */
void LCD_characterDisplay(uint8 a_character){
	DIO_writeChannel(&RS , 1);		/*RS = 1 to data*/
    216e:	8c e6       	ldi	r24, 0x6C	; 108
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	61 e0       	ldi	r22, 0x01	; 1
    2174:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    2178:	80 e7       	ldi	r24, 0x70	; 112
    217a:	91 e0       	ldi	r25, 0x01	; 1
    217c:	60 e0       	ldi	r22, 0x00	; 0
    217e:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    2182:	00 ed       	ldi	r16, 0xD0	; 208
    2184:	17 e0       	ldi	r17, 0x07	; 7
    2186:	c8 01       	movw	r24, r16
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <LCD_displayNumber+0x9e>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    218c:	84 e7       	ldi	r24, 0x74	; 116
    218e:	91 e0       	ldi	r25, 0x01	; 1
    2190:	61 e0       	ldi	r22, 0x01	; 1
    2192:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    2196:	c8 01       	movw	r24, r16
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <LCD_displayNumber+0xae>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_character & 0xf0));	/*write upper 4 bit of command*/
    219c:	88 e6       	ldi	r24, 0x68	; 104
    219e:	91 e0       	ldi	r25, 0x01	; 1
    21a0:	60 e3       	ldi	r22, 0x30	; 48
    21a2:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    21a6:	c8 01       	movw	r24, r16
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <LCD_displayNumber+0xbe>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    21ac:	84 e7       	ldi	r24, 0x74	; 116
    21ae:	91 e0       	ldi	r25, 0x01	; 1
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    21b6:	c8 01       	movw	r24, r16
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <LCD_displayNumber+0xce>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    21bc:	84 e7       	ldi	r24, 0x74	; 116
    21be:	91 e0       	ldi	r25, 0x01	; 1
    21c0:	61 e0       	ldi	r22, 0x01	; 1
    21c2:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    21c6:	c8 01       	movw	r24, r16
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <LCD_displayNumber+0xde>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_character & 0x0f)<<4));	/*write lower 4 bit of command*/
    21cc:	88 e6       	ldi	r24, 0x68	; 104
    21ce:	91 e0       	ldi	r25, 0x01	; 1
    21d0:	60 e0       	ldi	r22, 0x00	; 0
    21d2:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    21d6:	c8 01       	movw	r24, r16
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <LCD_displayNumber+0xee>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    21dc:	84 e7       	ldi	r24, 0x74	; 116
    21de:	91 e0       	ldi	r25, 0x01	; 1
    21e0:	60 e0       	ldi	r22, 0x00	; 0
    21e2:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>

void LCD_displayNumber(uint16 a_num){
	if(a_num == 0){
		LCD_characterDisplay('0');
	}
	uint8 num_string[16] = {'\0'};
    21e6:	7e 01       	movw	r14, r28
    21e8:	08 94       	sec
    21ea:	e1 1c       	adc	r14, r1
    21ec:	f1 1c       	adc	r15, r1
    21ee:	80 e1       	ldi	r24, 0x10	; 16
    21f0:	f7 01       	movw	r30, r14
    21f2:	11 92       	st	Z+, r1
    21f4:	8a 95       	dec	r24
    21f6:	e9 f7       	brne	.-6      	; 0x21f2 <LCD_displayNumber+0x108>
#endif

}

void LCD_displayString(const uint8 *a_string){
	while(*a_string != '\0'){
    21f8:	d9 80       	ldd	r13, Y+1	; 0x01
    21fa:	dd 20       	and	r13, r13
    21fc:	09 f4       	brne	.+2      	; 0x2200 <LCD_displayNumber+0x116>
    21fe:	4c c0       	rjmp	.+152    	; 0x2298 <LCD_displayNumber+0x1ae>
    2200:	00 ed       	ldi	r16, 0xD0	; 208
    2202:	17 e0       	ldi	r17, 0x07	; 7

/*
 * send character (ascii of character) to be displayed on the LCD
 * */
void LCD_characterDisplay(uint8 a_character){
	DIO_writeChannel(&RS , 1);		/*RS = 1 to data*/
    2204:	8c e6       	ldi	r24, 0x6C	; 108
    2206:	91 e0       	ldi	r25, 0x01	; 1
    2208:	61 e0       	ldi	r22, 0x01	; 1
    220a:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
	DIO_writeChannel(&RW , 0);		/* RW = 0 to write*/
    220e:	80 e7       	ldi	r24, 0x70	; 112
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	60 e0       	ldi	r22, 0x00	; 0
    2214:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    2218:	c8 01       	movw	r24, r16
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_displayNumber+0x130>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 	/*enable pin = 0*/
#elif (LCD_MODE == 4)
#if (MASK == 0xF0)
	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    221e:	84 e7       	ldi	r24, 0x74	; 116
    2220:	91 e0       	ldi	r25, 0x01	; 1
    2222:	61 e0       	ldi	r22, 0x01	; 1
    2224:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    2228:	c8 01       	movw	r24, r16
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	f1 f7       	brne	.-4      	; 0x222a <LCD_displayNumber+0x140>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , (a_character & 0xf0));	/*write upper 4 bit of command*/
    222e:	6d 2d       	mov	r22, r13
    2230:	60 7f       	andi	r22, 0xF0	; 240
    2232:	88 e6       	ldi	r24, 0x68	; 104
    2234:	91 e0       	ldi	r25, 0x01	; 1
    2236:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    223a:	c8 01       	movw	r24, r16
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <LCD_displayNumber+0x152>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    2240:	84 e7       	ldi	r24, 0x74	; 116
    2242:	91 e0       	ldi	r25, 0x01	; 1
    2244:	60 e0       	ldi	r22, 0x00	; 0
    2246:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    224a:	c8 01       	movw	r24, r16
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <LCD_displayNumber+0x162>

	_delay_ms(1); 					/*delay tas (50 ~ ns)*/
	DIO_writeChannel(&E , 1); 		/*enable pin = 1*/
    2250:	84 e7       	ldi	r24, 0x74	; 116
    2252:	91 e0       	ldi	r25, 0x01	; 1
    2254:	61 e0       	ldi	r22, 0x01	; 1
    2256:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    225a:	c8 01       	movw	r24, r16
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <LCD_displayNumber+0x172>
	_delay_ms(1); 					/*delay tpw - tdsw (290~_ - 100~_ ns = 190~_ns)*/
	DIO_writePort(&data , ((a_character & 0x0f)<<4));	/*write lower 4 bit of command*/
    2260:	6d 2d       	mov	r22, r13
    2262:	70 e0       	ldi	r23, 0x00	; 0
    2264:	62 95       	swap	r22
    2266:	72 95       	swap	r23
    2268:	70 7f       	andi	r23, 0xF0	; 240
    226a:	76 27       	eor	r23, r22
    226c:	60 7f       	andi	r22, 0xF0	; 240
    226e:	76 27       	eor	r23, r22
    2270:	88 e6       	ldi	r24, 0x68	; 104
    2272:	91 e0       	ldi	r25, 0x01	; 1
    2274:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
    2278:	c8 01       	movw	r24, r16
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <LCD_displayNumber+0x190>
	_delay_ms(1); 					/*delay tdsw	(100~_ns)*/
	DIO_writeChannel(&E , 0); 		/*disable*/
    227e:	84 e7       	ldi	r24, 0x74	; 116
    2280:	91 e0       	ldi	r25, 0x01	; 1
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
}

void LCD_displayString(const uint8 *a_string){
	while(*a_string != '\0'){
		LCD_characterDisplay(*a_string);
		a_string ++;
    2288:	08 94       	sec
    228a:	e1 1c       	adc	r14, r1
    228c:	f1 1c       	adc	r15, r1
#endif

}

void LCD_displayString(const uint8 *a_string){
	while(*a_string != '\0'){
    228e:	f7 01       	movw	r30, r14
    2290:	d0 80       	ld	r13, Z
    2292:	dd 20       	and	r13, r13
    2294:	09 f0       	breq	.+2      	; 0x2298 <LCD_displayNumber+0x1ae>
    2296:	b6 cf       	rjmp	.-148    	; 0x2204 <LCD_displayNumber+0x11a>
		num_string[0] = (a_num % 10) + 48;
		a_num /= 10;
		shift++;
	}
	LCD_displayString(num_string);
}
    2298:	60 96       	adiw	r28, 0x10	; 16
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	ff 90       	pop	r15
    22ae:	ef 90       	pop	r14
    22b0:	df 90       	pop	r13
    22b2:	cf 90       	pop	r12
    22b4:	08 95       	ret

000022b6 <KEYPAD_keyRelaesed>:
		}
	}
}


uint8 KEYPAD_keyRelaesed(void){
    22b6:	ef 92       	push	r14
    22b8:	ff 92       	push	r15
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	c0 e0       	ldi	r28, 0x00	; 0
    22c4:	d0 e0       	ldi	r29, 0x00	; 0
	uint8 col , row;	/*to loop through the rows and columns*/
	for(row=0 ; row<KEYPAD_ROW ; row++){
		DIO_PORTDirection(&keypad , (1<<row));
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	e8 2e       	mov	r14, r24
    22ca:	f1 2c       	mov	r15, r1
    22cc:	87 01       	movw	r16, r14
    22ce:	0c 2e       	mov	r0, r28
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <KEYPAD_keyRelaesed+0x20>
    22d2:	00 0f       	add	r16, r16
    22d4:	11 1f       	adc	r17, r17
    22d6:	0a 94       	dec	r0
    22d8:	e2 f7       	brpl	.-8      	; 0x22d2 <KEYPAD_keyRelaesed+0x1c>
    22da:	8c e7       	ldi	r24, 0x7C	; 124
    22dc:	91 e0       	ldi	r25, 0x01	; 1
    22de:	60 2f       	mov	r22, r16
    22e0:	0e 94 80 0c 	call	0x1900	; 0x1900 <DIO_PORTDirection>
		DIO_writePort(&keypad , (~(1<<row)));
    22e4:	00 95       	com	r16
    22e6:	8c e7       	ldi	r24, 0x7C	; 124
    22e8:	91 e0       	ldi	r25, 0x01	; 1
    22ea:	60 2f       	mov	r22, r16
    22ec:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
		for(col=0 ; col<KEYPAD_COL ; col++){
			if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    22f0:	8c e7       	ldi	r24, 0x7C	; 124
    22f2:	91 e0       	ldi	r25, 0x01	; 1
    22f4:	0e 94 ab 0c 	call	0x1956	; 0x1956 <DIO_readPort>
    22f8:	84 ff       	sbrs	r24, 4
    22fa:	1e c0       	rjmp	.+60     	; 0x2338 <KEYPAD_keyRelaesed+0x82>
    22fc:	8c e7       	ldi	r24, 0x7C	; 124
    22fe:	91 e0       	ldi	r25, 0x01	; 1
    2300:	0e 94 ab 0c 	call	0x1956	; 0x1956 <DIO_readPort>
    2304:	85 ff       	sbrs	r24, 5
    2306:	18 c0       	rjmp	.+48     	; 0x2338 <KEYPAD_keyRelaesed+0x82>
    2308:	8c e7       	ldi	r24, 0x7C	; 124
    230a:	91 e0       	ldi	r25, 0x01	; 1
    230c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <DIO_readPort>
    2310:	86 ff       	sbrs	r24, 6
    2312:	12 c0       	rjmp	.+36     	; 0x2338 <KEYPAD_keyRelaesed+0x82>
    2314:	8c e7       	ldi	r24, 0x7C	; 124
    2316:	91 e0       	ldi	r25, 0x01	; 1
    2318:	0e 94 ab 0c 	call	0x1956	; 0x1956 <DIO_readPort>
    231c:	87 ff       	sbrs	r24, 7
    231e:	0c c0       	rjmp	.+24     	; 0x2338 <KEYPAD_keyRelaesed+0x82>
    2320:	21 96       	adiw	r28, 0x01	; 1
}


uint8 KEYPAD_keyRelaesed(void){
	uint8 col , row;	/*to loop through the rows and columns*/
	for(row=0 ; row<KEYPAD_ROW ; row++){
    2322:	c4 30       	cpi	r28, 0x04	; 4
    2324:	d1 05       	cpc	r29, r1
    2326:	91 f6       	brne	.-92     	; 0x22cc <KEYPAD_keyRelaesed+0x16>
    2328:	81 e0       	ldi	r24, 0x01	; 1
				return 0;
			}
		}
	}
	return 1;
}
    232a:	df 91       	pop	r29
    232c:	cf 91       	pop	r28
    232e:	1f 91       	pop	r17
    2330:	0f 91       	pop	r16
    2332:	ff 90       	pop	r15
    2334:	ef 90       	pop	r14
    2336:	08 95       	ret
}


uint8 KEYPAD_keyRelaesed(void){
	uint8 col , row;	/*to loop through the rows and columns*/
	for(row=0 ; row<KEYPAD_ROW ; row++){
    2338:	80 e0       	ldi	r24, 0x00	; 0
				return 0;
			}
		}
	}
	return 1;
}
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	1f 91       	pop	r17
    2340:	0f 91       	pop	r16
    2342:	ff 90       	pop	r15
    2344:	ef 90       	pop	r14
    2346:	08 95       	ret

00002348 <KEYPAD_pressPosition>:


PORTconfig_t keypad  = KEYPAD_PORT;


uint8 KEYPAD_pressPosition(void){
    2348:	cf 92       	push	r12
    234a:	df 92       	push	r13
    234c:	ff 92       	push	r15
    234e:	0f 93       	push	r16
    2350:	1f 93       	push	r17
    2352:	cf 93       	push	r28
    2354:	df 93       	push	r29
    2356:	ff 24       	eor	r15, r15
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
			DIO_PORTDirection(&keypad , (1<<row));
    2358:	21 e0       	ldi	r18, 0x01	; 1
    235a:	c2 2e       	mov	r12, r18
    235c:	d1 2c       	mov	r13, r1
    235e:	cf 2d       	mov	r28, r15
    2360:	d0 e0       	ldi	r29, 0x00	; 0
    2362:	86 01       	movw	r16, r12
    2364:	0f 2c       	mov	r0, r15
    2366:	02 c0       	rjmp	.+4      	; 0x236c <KEYPAD_pressPosition+0x24>
    2368:	00 0f       	add	r16, r16
    236a:	11 1f       	adc	r17, r17
    236c:	0a 94       	dec	r0
    236e:	e2 f7       	brpl	.-8      	; 0x2368 <KEYPAD_pressPosition+0x20>
    2370:	8c e7       	ldi	r24, 0x7C	; 124
    2372:	91 e0       	ldi	r25, 0x01	; 1
    2374:	60 2f       	mov	r22, r16
    2376:	0e 94 80 0c 	call	0x1900	; 0x1900 <DIO_PORTDirection>
			DIO_writePort(&keypad , (~(1<<row)));
    237a:	00 95       	com	r16
    237c:	8c e7       	ldi	r24, 0x7C	; 124
    237e:	91 e0       	ldi	r25, 0x01	; 1
    2380:	60 2f       	mov	r22, r16
    2382:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    2386:	8c e7       	ldi	r24, 0x7C	; 124
    2388:	91 e0       	ldi	r25, 0x01	; 1
    238a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <DIO_readPort>
    238e:	84 ff       	sbrs	r24, 4
    2390:	18 c0       	rjmp	.+48     	; 0x23c2 <KEYPAD_pressPosition+0x7a>
    2392:	8c e7       	ldi	r24, 0x7C	; 124
    2394:	91 e0       	ldi	r25, 0x01	; 1
    2396:	0e 94 ab 0c 	call	0x1956	; 0x1956 <DIO_readPort>
    239a:	85 ff       	sbrs	r24, 5
    239c:	20 c0       	rjmp	.+64     	; 0x23de <KEYPAD_pressPosition+0x96>
    239e:	8c e7       	ldi	r24, 0x7C	; 124
    23a0:	91 e0       	ldi	r25, 0x01	; 1
    23a2:	0e 94 ab 0c 	call	0x1956	; 0x1956 <DIO_readPort>
    23a6:	86 ff       	sbrs	r24, 6
    23a8:	1c c0       	rjmp	.+56     	; 0x23e2 <KEYPAD_pressPosition+0x9a>
    23aa:	8c e7       	ldi	r24, 0x7C	; 124
    23ac:	91 e0       	ldi	r25, 0x01	; 1
    23ae:	0e 94 ab 0c 	call	0x1956	; 0x1956 <DIO_readPort>
    23b2:	87 ff       	sbrs	r24, 7
    23b4:	18 c0       	rjmp	.+48     	; 0x23e6 <KEYPAD_pressPosition+0x9e>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    23b6:	f3 94       	inc	r15
    23b8:	83 e0       	ldi	r24, 0x03	; 3
    23ba:	8f 15       	cp	r24, r15
    23bc:	80 f6       	brcc	.-96     	; 0x235e <KEYPAD_pressPosition+0x16>
    23be:	ff 24       	eor	r15, r15
    23c0:	ce cf       	rjmp	.-100    	; 0x235e <KEYPAD_pressPosition+0x16>
			DIO_PORTDirection(&keypad , (1<<row));
			DIO_writePort(&keypad , (~(1<<row)));
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	cc 0f       	add	r28, r28
    23c6:	dd 1f       	adc	r29, r29
    23c8:	cc 0f       	add	r28, r28
    23ca:	dd 1f       	adc	r29, r29
					return ((KEYPAD_COL * row) + col);
				}
			}
		}
	}
}
    23cc:	8c 0f       	add	r24, r28
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	1f 91       	pop	r17
    23d4:	0f 91       	pop	r16
    23d6:	ff 90       	pop	r15
    23d8:	df 90       	pop	r13
    23da:	cf 90       	pop	r12
    23dc:	08 95       	ret
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
			DIO_PORTDirection(&keypad , (1<<row));
			DIO_writePort(&keypad , (~(1<<row)));
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	f1 cf       	rjmp	.-30     	; 0x23c4 <KEYPAD_pressPosition+0x7c>
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	ef cf       	rjmp	.-34     	; 0x23c4 <KEYPAD_pressPosition+0x7c>
    23e6:	83 e0       	ldi	r24, 0x03	; 3
    23e8:	ed cf       	rjmp	.-38     	; 0x23c4 <KEYPAD_pressPosition+0x7c>

000023ea <KEYPAD_getCharacter>:
	}
	return 1;
}


uint8 KEYPAD_getCharacter(void){
    23ea:	cf 92       	push	r12
    23ec:	df 92       	push	r13
    23ee:	ff 92       	push	r15
    23f0:	0f 93       	push	r16
    23f2:	1f 93       	push	r17
    23f4:	cf 93       	push	r28
    23f6:	df 93       	push	r29
    23f8:	ff 24       	eor	r15, r15
uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
			DIO_PORTDirection(&keypad , (1<<row));
    23fa:	41 e0       	ldi	r20, 0x01	; 1
    23fc:	c4 2e       	mov	r12, r20
    23fe:	d1 2c       	mov	r13, r1
    2400:	cf 2d       	mov	r28, r15
    2402:	d0 e0       	ldi	r29, 0x00	; 0
    2404:	86 01       	movw	r16, r12
    2406:	0f 2c       	mov	r0, r15
    2408:	02 c0       	rjmp	.+4      	; 0x240e <KEYPAD_getCharacter+0x24>
    240a:	00 0f       	add	r16, r16
    240c:	11 1f       	adc	r17, r17
    240e:	0a 94       	dec	r0
    2410:	e2 f7       	brpl	.-8      	; 0x240a <KEYPAD_getCharacter+0x20>
    2412:	8c e7       	ldi	r24, 0x7C	; 124
    2414:	91 e0       	ldi	r25, 0x01	; 1
    2416:	60 2f       	mov	r22, r16
    2418:	0e 94 80 0c 	call	0x1900	; 0x1900 <DIO_PORTDirection>
			DIO_writePort(&keypad , (~(1<<row)));
    241c:	00 95       	com	r16
    241e:	8c e7       	ldi	r24, 0x7C	; 124
    2420:	91 e0       	ldi	r25, 0x01	; 1
    2422:	60 2f       	mov	r22, r16
    2424:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    2428:	8c e7       	ldi	r24, 0x7C	; 124
    242a:	91 e0       	ldi	r25, 0x01	; 1
    242c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <DIO_readPort>
    2430:	84 ff       	sbrs	r24, 4
    2432:	18 c0       	rjmp	.+48     	; 0x2464 <KEYPAD_getCharacter+0x7a>
    2434:	8c e7       	ldi	r24, 0x7C	; 124
    2436:	91 e0       	ldi	r25, 0x01	; 1
    2438:	0e 94 ab 0c 	call	0x1956	; 0x1956 <DIO_readPort>
    243c:	85 ff       	sbrs	r24, 5
    243e:	3c c0       	rjmp	.+120    	; 0x24b8 <KEYPAD_getCharacter+0xce>
    2440:	8c e7       	ldi	r24, 0x7C	; 124
    2442:	91 e0       	ldi	r25, 0x01	; 1
    2444:	0e 94 ab 0c 	call	0x1956	; 0x1956 <DIO_readPort>
    2448:	86 ff       	sbrs	r24, 6
    244a:	40 c0       	rjmp	.+128    	; 0x24cc <KEYPAD_getCharacter+0xe2>
    244c:	8c e7       	ldi	r24, 0x7C	; 124
    244e:	91 e0       	ldi	r25, 0x01	; 1
    2450:	0e 94 ab 0c 	call	0x1956	; 0x1956 <DIO_readPort>
    2454:	87 ff       	sbrs	r24, 7
    2456:	3c c0       	rjmp	.+120    	; 0x24d0 <KEYPAD_getCharacter+0xe6>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    2458:	f3 94       	inc	r15
    245a:	83 e0       	ldi	r24, 0x03	; 3
    245c:	8f 15       	cp	r24, r15
    245e:	80 f6       	brcc	.-96     	; 0x2400 <KEYPAD_getCharacter+0x16>
    2460:	ff 24       	eor	r15, r15
    2462:	ce cf       	rjmp	.-100    	; 0x2400 <KEYPAD_getCharacter+0x16>
			DIO_PORTDirection(&keypad , (1<<row));
			DIO_writePort(&keypad , (~(1<<row)));
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    2464:	80 e0       	ldi	r24, 0x00	; 0
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    2466:	cc 0f       	add	r28, r28
    2468:	dd 1f       	adc	r29, r29
    246a:	cc 0f       	add	r28, r28
    246c:	dd 1f       	adc	r29, r29
    246e:	8c 0f       	add	r24, r28
    2470:	87 30       	cpi	r24, 0x07	; 7
    2472:	51 f1       	breq	.+84     	; 0x24c8 <KEYPAD_getCharacter+0xde>
    2474:	88 30       	cpi	r24, 0x08	; 8
    2476:	98 f4       	brcc	.+38     	; 0x249e <KEYPAD_getCharacter+0xb4>
    2478:	83 30       	cpi	r24, 0x03	; 3
    247a:	09 f4       	brne	.+2      	; 0x247e <KEYPAD_getCharacter+0x94>
    247c:	41 c0       	rjmp	.+130    	; 0x2500 <KEYPAD_getCharacter+0x116>
    247e:	84 30       	cpi	r24, 0x04	; 4
    2480:	78 f1       	brcs	.+94     	; 0x24e0 <KEYPAD_getCharacter+0xf6>
    2482:	85 30       	cpi	r24, 0x05	; 5
    2484:	09 f4       	brne	.+2      	; 0x2488 <KEYPAD_getCharacter+0x9e>
    2486:	42 c0       	rjmp	.+132    	; 0x250c <KEYPAD_getCharacter+0x122>
    2488:	86 30       	cpi	r24, 0x06	; 6
    248a:	80 f5       	brcc	.+96     	; 0x24ec <KEYPAD_getCharacter+0x102>
		break;
	case 2:
		return ROW0_COL2;
		break;
	case 3:
		return ROW0_COL3;
    248c:	84 e3       	ldi	r24, 0x34	; 52
	default :
		break;
}
#endif

}
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	1f 91       	pop	r17
    2494:	0f 91       	pop	r16
    2496:	ff 90       	pop	r15
    2498:	df 90       	pop	r13
    249a:	cf 90       	pop	r12
    249c:	08 95       	ret
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    249e:	8b 30       	cpi	r24, 0x0B	; 11
    24a0:	89 f1       	breq	.+98     	; 0x2504 <KEYPAD_getCharacter+0x11a>
    24a2:	8c 30       	cpi	r24, 0x0C	; 12
    24a4:	b8 f0       	brcs	.+46     	; 0x24d4 <KEYPAD_getCharacter+0xea>
    24a6:	8d 30       	cpi	r24, 0x0D	; 13
    24a8:	49 f1       	breq	.+82     	; 0x24fc <KEYPAD_getCharacter+0x112>
    24aa:	8d 30       	cpi	r24, 0x0D	; 13
    24ac:	28 f1       	brcs	.+74     	; 0x24f8 <KEYPAD_getCharacter+0x10e>
    24ae:	8e 30       	cpi	r24, 0x0E	; 14
    24b0:	89 f1       	breq	.+98     	; 0x2514 <KEYPAD_getCharacter+0x12a>
    24b2:	8f 30       	cpi	r24, 0x0F	; 15
    24b4:	89 f1       	breq	.+98     	; 0x2518 <KEYPAD_getCharacter+0x12e>
    24b6:	eb cf       	rjmp	.-42     	; 0x248e <KEYPAD_getCharacter+0xa4>
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
			DIO_PORTDirection(&keypad , (1<<row));
			DIO_writePort(&keypad , (~(1<<row)));
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    24b8:	81 e0       	ldi	r24, 0x01	; 1
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    24ba:	cc 0f       	add	r28, r28
    24bc:	dd 1f       	adc	r29, r29
    24be:	cc 0f       	add	r28, r28
    24c0:	dd 1f       	adc	r29, r29
    24c2:	8c 0f       	add	r24, r28
    24c4:	87 30       	cpi	r24, 0x07	; 7
    24c6:	b1 f6       	brne	.-84     	; 0x2474 <KEYPAD_getCharacter+0x8a>
		break;
	case 5:
		return ROW1_COL1;
		break;
	case 6:
		return ROW1_COL2;
    24c8:	8a e2       	ldi	r24, 0x2A	; 42
    24ca:	e1 cf       	rjmp	.-62     	; 0x248e <KEYPAD_getCharacter+0xa4>
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
			DIO_PORTDirection(&keypad , (1<<row));
			DIO_writePort(&keypad , (~(1<<row)));
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    24cc:	82 e0       	ldi	r24, 0x02	; 2
    24ce:	cb cf       	rjmp	.-106    	; 0x2466 <KEYPAD_getCharacter+0x7c>
    24d0:	83 e0       	ldi	r24, 0x03	; 3
    24d2:	c9 cf       	rjmp	.-110    	; 0x2466 <KEYPAD_getCharacter+0x7c>
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    24d4:	89 30       	cpi	r24, 0x09	; 9
    24d6:	c1 f0       	breq	.+48     	; 0x2508 <KEYPAD_getCharacter+0x11e>
    24d8:	8a 30       	cpi	r24, 0x0A	; 10
    24da:	60 f0       	brcs	.+24     	; 0x24f4 <KEYPAD_getCharacter+0x10a>
		break;
	case 8:
		return ROW2_COL0;
		break;
	case 9:
		return ROW2_COL1;
    24dc:	83 e3       	ldi	r24, 0x33	; 51
    24de:	d7 cf       	rjmp	.-82     	; 0x248e <KEYPAD_getCharacter+0xa4>
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    24e0:	81 30       	cpi	r24, 0x01	; 1
    24e2:	b1 f0       	breq	.+44     	; 0x2510 <KEYPAD_getCharacter+0x126>
    24e4:	82 30       	cpi	r24, 0x02	; 2
    24e6:	20 f0       	brcs	.+8      	; 0x24f0 <KEYPAD_getCharacter+0x106>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    24e8:	89 e3       	ldi	r24, 0x39	; 57
    24ea:	d1 cf       	rjmp	.-94     	; 0x248e <KEYPAD_getCharacter+0xa4>
		break;
	case 4:
		return ROW1_COL0;
		break;
	case 5:
		return ROW1_COL1;
    24ec:	86 e3       	ldi	r24, 0x36	; 54
    24ee:	cf cf       	rjmp	.-98     	; 0x248e <KEYPAD_getCharacter+0xa4>
	default :
		break;
}
#endif

}
    24f0:	87 e3       	ldi	r24, 0x37	; 55
    24f2:	cd cf       	rjmp	.-102    	; 0x248e <KEYPAD_getCharacter+0xa4>
		break;
	case 6:
		return ROW1_COL2;
		break;
	case 7:
		return ROW1_COL3;
    24f4:	81 e3       	ldi	r24, 0x31	; 49
    24f6:	cb cf       	rjmp	.-106    	; 0x248e <KEYPAD_getCharacter+0xa4>
		break;
	case 10:
		return ROW2_COL2;
		break;
	case 11:
		return ROW2_COL3;
    24f8:	8d e0       	ldi	r24, 0x0D	; 13
    24fa:	c9 cf       	rjmp	.-110    	; 0x248e <KEYPAD_getCharacter+0xa4>
		break;
	case 12:
		return ROW3_COL0;
    24fc:	80 e3       	ldi	r24, 0x30	; 48
    24fe:	c7 cf       	rjmp	.-114    	; 0x248e <KEYPAD_getCharacter+0xa4>
		break;
	case 1:
		return ROW0_COL1;
		break;
	case 2:
		return ROW0_COL2;
    2500:	8f e2       	ldi	r24, 0x2F	; 47
    2502:	c5 cf       	rjmp	.-118    	; 0x248e <KEYPAD_getCharacter+0xa4>
		break;
	case 9:
		return ROW2_COL1;
		break;
	case 10:
		return ROW2_COL2;
    2504:	8d e2       	ldi	r24, 0x2D	; 45
    2506:	c3 cf       	rjmp	.-122    	; 0x248e <KEYPAD_getCharacter+0xa4>
		break;
	case 7:
		return ROW1_COL3;
		break;
	case 8:
		return ROW2_COL0;
    2508:	82 e3       	ldi	r24, 0x32	; 50
    250a:	c1 cf       	rjmp	.-126    	; 0x248e <KEYPAD_getCharacter+0xa4>
		break;
	case 3:
		return ROW0_COL3;
		break;
	case 4:
		return ROW1_COL0;
    250c:	85 e3       	ldi	r24, 0x35	; 53
    250e:	bf cf       	rjmp	.-130    	; 0x248e <KEYPAD_getCharacter+0xa4>
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    2510:	88 e3       	ldi	r24, 0x38	; 56
    2512:	bd cf       	rjmp	.-134    	; 0x248e <KEYPAD_getCharacter+0xa4>
		break;
	case 12:
		return ROW3_COL0;
		break;
	case 13:
		return ROW3_COL1;
    2514:	8d e3       	ldi	r24, 0x3D	; 61
    2516:	bb cf       	rjmp	.-138    	; 0x248e <KEYPAD_getCharacter+0xa4>
		break;
	case 14:
		return ROW3_COL2;
    2518:	8b e2       	ldi	r24, 0x2B	; 43
    251a:	b9 cf       	rjmp	.-142    	; 0x248e <KEYPAD_getCharacter+0xa4>

0000251c <KEYPAD_getNumber>:
		break;
}
#endif

}
uint8 KEYPAD_getNumber(void){
    251c:	cf 92       	push	r12
    251e:	df 92       	push	r13
    2520:	ff 92       	push	r15
    2522:	0f 93       	push	r16
    2524:	1f 93       	push	r17
    2526:	cf 93       	push	r28
    2528:	df 93       	push	r29
    252a:	ff 24       	eor	r15, r15
uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
			DIO_PORTDirection(&keypad , (1<<row));
    252c:	61 e0       	ldi	r22, 0x01	; 1
    252e:	c6 2e       	mov	r12, r22
    2530:	d1 2c       	mov	r13, r1
    2532:	cf 2d       	mov	r28, r15
    2534:	d0 e0       	ldi	r29, 0x00	; 0
    2536:	86 01       	movw	r16, r12
    2538:	0f 2c       	mov	r0, r15
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <KEYPAD_getNumber+0x24>
    253c:	00 0f       	add	r16, r16
    253e:	11 1f       	adc	r17, r17
    2540:	0a 94       	dec	r0
    2542:	e2 f7       	brpl	.-8      	; 0x253c <KEYPAD_getNumber+0x20>
    2544:	8c e7       	ldi	r24, 0x7C	; 124
    2546:	91 e0       	ldi	r25, 0x01	; 1
    2548:	60 2f       	mov	r22, r16
    254a:	0e 94 80 0c 	call	0x1900	; 0x1900 <DIO_PORTDirection>
			DIO_writePort(&keypad , (~(1<<row)));
    254e:	00 95       	com	r16
    2550:	8c e7       	ldi	r24, 0x7C	; 124
    2552:	91 e0       	ldi	r25, 0x01	; 1
    2554:	60 2f       	mov	r22, r16
    2556:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_writePort>
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    255a:	8c e7       	ldi	r24, 0x7C	; 124
    255c:	91 e0       	ldi	r25, 0x01	; 1
    255e:	0e 94 ab 0c 	call	0x1956	; 0x1956 <DIO_readPort>
    2562:	84 ff       	sbrs	r24, 4
    2564:	18 c0       	rjmp	.+48     	; 0x2596 <KEYPAD_getNumber+0x7a>
    2566:	8c e7       	ldi	r24, 0x7C	; 124
    2568:	91 e0       	ldi	r25, 0x01	; 1
    256a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <DIO_readPort>
    256e:	85 ff       	sbrs	r24, 5
    2570:	40 c0       	rjmp	.+128    	; 0x25f2 <KEYPAD_getNumber+0xd6>
    2572:	8c e7       	ldi	r24, 0x7C	; 124
    2574:	91 e0       	ldi	r25, 0x01	; 1
    2576:	0e 94 ab 0c 	call	0x1956	; 0x1956 <DIO_readPort>
    257a:	86 ff       	sbrs	r24, 6
    257c:	44 c0       	rjmp	.+136    	; 0x2606 <KEYPAD_getNumber+0xea>
    257e:	8c e7       	ldi	r24, 0x7C	; 124
    2580:	91 e0       	ldi	r25, 0x01	; 1
    2582:	0e 94 ab 0c 	call	0x1956	; 0x1956 <DIO_readPort>
    2586:	87 ff       	sbrs	r24, 7
    2588:	40 c0       	rjmp	.+128    	; 0x260a <KEYPAD_getNumber+0xee>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    258a:	f3 94       	inc	r15
    258c:	83 e0       	ldi	r24, 0x03	; 3
    258e:	8f 15       	cp	r24, r15
    2590:	80 f6       	brcc	.-96     	; 0x2532 <KEYPAD_getNumber+0x16>
    2592:	ff 24       	eor	r15, r15
    2594:	ce cf       	rjmp	.-100    	; 0x2532 <KEYPAD_getNumber+0x16>
			DIO_PORTDirection(&keypad , (1<<row));
			DIO_writePort(&keypad , (~(1<<row)));
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    2596:	80 e0       	ldi	r24, 0x00	; 0
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    2598:	cc 0f       	add	r28, r28
    259a:	dd 1f       	adc	r29, r29
    259c:	cc 0f       	add	r28, r28
    259e:	dd 1f       	adc	r29, r29
    25a0:	8c 0f       	add	r24, r28
    25a2:	87 30       	cpi	r24, 0x07	; 7
    25a4:	71 f1       	breq	.+92     	; 0x2602 <KEYPAD_getNumber+0xe6>
    25a6:	88 30       	cpi	r24, 0x08	; 8
    25a8:	b0 f4       	brcc	.+44     	; 0x25d6 <KEYPAD_getNumber+0xba>
    25aa:	83 30       	cpi	r24, 0x03	; 3
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <KEYPAD_getNumber+0x94>
    25ae:	45 c0       	rjmp	.+138    	; 0x263a <KEYPAD_getNumber+0x11e>
    25b0:	84 30       	cpi	r24, 0x04	; 4
    25b2:	98 f1       	brcs	.+102    	; 0x261a <KEYPAD_getNumber+0xfe>
    25b4:	85 30       	cpi	r24, 0x05	; 5
    25b6:	09 f4       	brne	.+2      	; 0x25ba <KEYPAD_getNumber+0x9e>
    25b8:	46 c0       	rjmp	.+140    	; 0x2646 <KEYPAD_getNumber+0x12a>
    25ba:	86 30       	cpi	r24, 0x06	; 6
    25bc:	a0 f5       	brcc	.+104    	; 0x2626 <KEYPAD_getNumber+0x10a>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    25be:	84 e3       	ldi	r24, 0x34	; 52
#endif

}
uint8 KEYPAD_getNumber(void){
	uint8 num = KEYPAD_getCharacter();
	if((num>='0')&&(num<='9')){
    25c0:	80 53       	subi	r24, 0x30	; 48
    25c2:	8a 30       	cpi	r24, 0x0A	; 10
    25c4:	00 f0       	brcs	.+0      	; 0x25c6 <KEYPAD_getNumber+0xaa>
		return num-48;
	}
}
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	ff 90       	pop	r15
    25d0:	df 90       	pop	r13
    25d2:	cf 90       	pop	r12
    25d4:	08 95       	ret
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    25d6:	8b 30       	cpi	r24, 0x0B	; 11
    25d8:	91 f1       	breq	.+100    	; 0x263e <KEYPAD_getNumber+0x122>
    25da:	8c 30       	cpi	r24, 0x0C	; 12
    25dc:	c0 f0       	brcs	.+48     	; 0x260e <KEYPAD_getNumber+0xf2>
    25de:	8d 30       	cpi	r24, 0x0D	; 13
    25e0:	51 f1       	breq	.+84     	; 0x2636 <KEYPAD_getNumber+0x11a>
    25e2:	8d 30       	cpi	r24, 0x0D	; 13
    25e4:	30 f1       	brcs	.+76     	; 0x2632 <KEYPAD_getNumber+0x116>
    25e6:	8e 30       	cpi	r24, 0x0E	; 14
    25e8:	91 f1       	breq	.+100    	; 0x264e <KEYPAD_getNumber+0x132>
    25ea:	8f 30       	cpi	r24, 0x0F	; 15
    25ec:	49 f7       	brne	.-46     	; 0x25c0 <KEYPAD_getNumber+0xa4>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    25ee:	8b e2       	ldi	r24, 0x2B	; 43
    25f0:	e7 cf       	rjmp	.-50     	; 0x25c0 <KEYPAD_getNumber+0xa4>
			DIO_PORTDirection(&keypad , (1<<row));
			DIO_writePort(&keypad , (~(1<<row)));
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    25f2:	81 e0       	ldi	r24, 0x01	; 1
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    25f4:	cc 0f       	add	r28, r28
    25f6:	dd 1f       	adc	r29, r29
    25f8:	cc 0f       	add	r28, r28
    25fa:	dd 1f       	adc	r29, r29
    25fc:	8c 0f       	add	r24, r28
    25fe:	87 30       	cpi	r24, 0x07	; 7
    2600:	91 f6       	brne	.-92     	; 0x25a6 <KEYPAD_getNumber+0x8a>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    2602:	8a e2       	ldi	r24, 0x2A	; 42
    2604:	dd cf       	rjmp	.-70     	; 0x25c0 <KEYPAD_getNumber+0xa4>
			DIO_PORTDirection(&keypad , (1<<row));
			DIO_writePort(&keypad , (~(1<<row)));
			for(col=0 ; col<KEYPAD_COL ; col++){
				if(!(DIO_readPort(&keypad) & (1<<(col+KEYPAD_ROW)))){
    2606:	82 e0       	ldi	r24, 0x02	; 2
    2608:	c7 cf       	rjmp	.-114    	; 0x2598 <KEYPAD_getNumber+0x7c>
    260a:	83 e0       	ldi	r24, 0x03	; 3
    260c:	c5 cf       	rjmp	.-118    	; 0x2598 <KEYPAD_getNumber+0x7c>
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    260e:	89 30       	cpi	r24, 0x09	; 9
    2610:	c1 f0       	breq	.+48     	; 0x2642 <KEYPAD_getNumber+0x126>
    2612:	8a 30       	cpi	r24, 0x0A	; 10
    2614:	60 f0       	brcs	.+24     	; 0x262e <KEYPAD_getNumber+0x112>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    2616:	83 e3       	ldi	r24, 0x33	; 51
    2618:	d3 cf       	rjmp	.-90     	; 0x25c0 <KEYPAD_getNumber+0xa4>
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    261a:	81 30       	cpi	r24, 0x01	; 1
    261c:	b1 f0       	breq	.+44     	; 0x264a <KEYPAD_getNumber+0x12e>
    261e:	82 30       	cpi	r24, 0x02	; 2
    2620:	20 f0       	brcs	.+8      	; 0x262a <KEYPAD_getNumber+0x10e>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    2622:	89 e3       	ldi	r24, 0x39	; 57
    2624:	cd cf       	rjmp	.-102    	; 0x25c0 <KEYPAD_getNumber+0xa4>
    2626:	86 e3       	ldi	r24, 0x36	; 54
    2628:	cb cf       	rjmp	.-106    	; 0x25c0 <KEYPAD_getNumber+0xa4>
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    262a:	87 e3       	ldi	r24, 0x37	; 55
    262c:	c9 cf       	rjmp	.-110    	; 0x25c0 <KEYPAD_getNumber+0xa4>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    262e:	81 e3       	ldi	r24, 0x31	; 49
    2630:	c7 cf       	rjmp	.-114    	; 0x25c0 <KEYPAD_getNumber+0xa4>
    2632:	8d e0       	ldi	r24, 0x0D	; 13
    2634:	c5 cf       	rjmp	.-118    	; 0x25c0 <KEYPAD_getNumber+0xa4>
    2636:	80 e3       	ldi	r24, 0x30	; 48
    2638:	c3 cf       	rjmp	.-122    	; 0x25c0 <KEYPAD_getNumber+0xa4>
    263a:	8f e2       	ldi	r24, 0x2F	; 47
    263c:	c1 cf       	rjmp	.-126    	; 0x25c0 <KEYPAD_getNumber+0xa4>
    263e:	8d e2       	ldi	r24, 0x2D	; 45
    2640:	bf cf       	rjmp	.-130    	; 0x25c0 <KEYPAD_getNumber+0xa4>
    2642:	82 e3       	ldi	r24, 0x32	; 50
    2644:	bd cf       	rjmp	.-134    	; 0x25c0 <KEYPAD_getNumber+0xa4>
    2646:	85 e3       	ldi	r24, 0x35	; 53
    2648:	bb cf       	rjmp	.-138    	; 0x25c0 <KEYPAD_getNumber+0xa4>
}


uint8 KEYPAD_getCharacter(void){
	uint8 character = KEYPAD_pressPosition();
	switch (character){
    264a:	88 e3       	ldi	r24, 0x38	; 56
    264c:	b9 cf       	rjmp	.-142    	; 0x25c0 <KEYPAD_getNumber+0xa4>

uint8 KEYPAD_pressPosition(void){
	uint8 col;	/*to loop through the rows and columns*/
	uint8 row;
	while(1){
		for(row=0 ; row<KEYPAD_ROW ; row++){
    264e:	8d e3       	ldi	r24, 0x3D	; 61
    2650:	b7 cf       	rjmp	.-146    	; 0x25c0 <KEYPAD_getNumber+0xa4>

00002652 <EEPROM_readData>:
		TWI_write(data[i]);
	}
	TWI_stop();

}
uint8 EEPROM_readData(uint16 addr , uint8* recieved_data , uint8 size){
    2652:	cf 92       	push	r12
    2654:	df 92       	push	r13
    2656:	ef 92       	push	r14
    2658:	ff 92       	push	r15
    265a:	0f 93       	push	r16
    265c:	1f 93       	push	r17
    265e:	cf 93       	push	r28
    2660:	df 93       	push	r29
    2662:	8c 01       	movw	r16, r24
    2664:	6b 01       	movw	r12, r22
    2666:	f4 2e       	mov	r15, r20
	uint8 i = 0;

	TWI_start();
    2668:	0e 94 8b 09 	call	0x1316	; 0x1316 <TWI_start>
	TWI_write((0b10100000 & 0xF0) | (uint8)((addr & 0x700) >> 7));
    266c:	c8 01       	movw	r24, r16
    266e:	88 0f       	add	r24, r24
    2670:	89 2f       	mov	r24, r25
    2672:	88 1f       	adc	r24, r24
    2674:	99 0b       	sbc	r25, r25
    2676:	91 95       	neg	r25
    2678:	18 2f       	mov	r17, r24
    267a:	1e 70       	andi	r17, 0x0E	; 14
    267c:	81 2f       	mov	r24, r17
    267e:	80 6a       	ori	r24, 0xA0	; 160
    2680:	0e 94 94 09 	call	0x1328	; 0x1328 <TWI_write>
	TWI_write((uint8)addr);
    2684:	80 2f       	mov	r24, r16
    2686:	0e 94 94 09 	call	0x1328	; 0x1328 <TWI_write>

	TWI_start();
    268a:	0e 94 8b 09 	call	0x1316	; 0x1316 <TWI_start>
	TWI_write((0b10100001 & 0xF1) | (uint8)((addr & 0x700) >> 7));
    268e:	81 2f       	mov	r24, r17
    2690:	81 6a       	ori	r24, 0xA1	; 161
    2692:	0e 94 94 09 	call	0x1328	; 0x1328 <TWI_write>
	for(i=0 ; i<size-1 ; i++){
    2696:	ef 2c       	mov	r14, r15
    2698:	ff 24       	eor	r15, r15
    269a:	08 94       	sec
    269c:	e1 08       	sbc	r14, r1
    269e:	f1 08       	sbc	r15, r1
    26a0:	1e 14       	cp	r1, r14
    26a2:	1f 04       	cpc	r1, r15
    26a4:	74 f4       	brge	.+28     	; 0x26c2 <EEPROM_readData+0x70>
    26a6:	00 e0       	ldi	r16, 0x00	; 0
    26a8:	c0 e0       	ldi	r28, 0x00	; 0
    26aa:	d0 e0       	ldi	r29, 0x00	; 0
		recieved_data[i] = TWI_readWithACK();
    26ac:	0e 94 9b 09 	call	0x1336	; 0x1336 <TWI_readWithACK>
    26b0:	cc 0d       	add	r28, r12
    26b2:	dd 1d       	adc	r29, r13
    26b4:	88 83       	st	Y, r24
	TWI_write((0b10100000 & 0xF0) | (uint8)((addr & 0x700) >> 7));
	TWI_write((uint8)addr);

	TWI_start();
	TWI_write((0b10100001 & 0xF1) | (uint8)((addr & 0x700) >> 7));
	for(i=0 ; i<size-1 ; i++){
    26b6:	0f 5f       	subi	r16, 0xFF	; 255
    26b8:	c0 2f       	mov	r28, r16
    26ba:	d0 e0       	ldi	r29, 0x00	; 0
    26bc:	ce 15       	cp	r28, r14
    26be:	df 05       	cpc	r29, r15
    26c0:	ac f3       	brlt	.-22     	; 0x26ac <EEPROM_readData+0x5a>
		recieved_data[i] = TWI_readWithACK();
	}
	recieved_data[0] = TWI_readWithNACK();
    26c2:	0e 94 a2 09 	call	0x1344	; 0x1344 <TWI_readWithNACK>
    26c6:	f6 01       	movw	r30, r12
    26c8:	80 83       	st	Z, r24
	TWI_stop();
    26ca:	0e 94 91 09 	call	0x1322	; 0x1322 <TWI_stop>

}
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	1f 91       	pop	r17
    26d4:	0f 91       	pop	r16
    26d6:	ff 90       	pop	r15
    26d8:	ef 90       	pop	r14
    26da:	df 90       	pop	r13
    26dc:	cf 90       	pop	r12
    26de:	08 95       	ret

000026e0 <EEPROM_writeData>:

void EEPROM_init(void){
	TWIconfig_t I2C_EEPROM_config= {2 , PRE_1 , 0xAA};
	TWI_init(&I2C_EEPROM_config);
}
uint8 EEPROM_writeData(uint16 addr , uint8* data , uint16 size){
    26e0:	ef 92       	push	r14
    26e2:	ff 92       	push	r15
    26e4:	0f 93       	push	r16
    26e6:	1f 93       	push	r17
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	8c 01       	movw	r16, r24
    26ee:	7b 01       	movw	r14, r22
    26f0:	ea 01       	movw	r28, r20

	uint16 devAddress = (0b10100000 & 0xF1) | (uint8)((addr & 0x700) >> 7);
	uint8 i = 0;
	TWI_start();
    26f2:	0e 94 8b 09 	call	0x1316	; 0x1316 <TWI_start>
	TWI_write(devAddress);
    26f6:	c8 01       	movw	r24, r16
    26f8:	80 70       	andi	r24, 0x00	; 0
    26fa:	97 70       	andi	r25, 0x07	; 7
    26fc:	88 0f       	add	r24, r24
    26fe:	89 2f       	mov	r24, r25
    2700:	88 1f       	adc	r24, r24
    2702:	99 0b       	sbc	r25, r25
    2704:	91 95       	neg	r25
    2706:	80 6a       	ori	r24, 0xA0	; 160
    2708:	0e 94 94 09 	call	0x1328	; 0x1328 <TWI_write>
	TWI_write((addr & 0xFF));
    270c:	80 2f       	mov	r24, r16
    270e:	0e 94 94 09 	call	0x1328	; 0x1328 <TWI_write>
	for(i=0 ; i<size ; i++){
    2712:	20 97       	sbiw	r28, 0x00	; 0
    2714:	71 f0       	breq	.+28     	; 0x2732 <EEPROM_writeData+0x52>
    2716:	00 e0       	ldi	r16, 0x00	; 0
    2718:	e0 e0       	ldi	r30, 0x00	; 0
    271a:	f0 e0       	ldi	r31, 0x00	; 0
		TWI_write(data[i]);
    271c:	ee 0d       	add	r30, r14
    271e:	ff 1d       	adc	r31, r15
    2720:	80 81       	ld	r24, Z
    2722:	0e 94 94 09 	call	0x1328	; 0x1328 <TWI_write>
	uint16 devAddress = (0b10100000 & 0xF1) | (uint8)((addr & 0x700) >> 7);
	uint8 i = 0;
	TWI_start();
	TWI_write(devAddress);
	TWI_write((addr & 0xFF));
	for(i=0 ; i<size ; i++){
    2726:	0f 5f       	subi	r16, 0xFF	; 255
    2728:	e0 2f       	mov	r30, r16
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	ec 17       	cp	r30, r28
    272e:	fd 07       	cpc	r31, r29
    2730:	a8 f3       	brcs	.-22     	; 0x271c <EEPROM_writeData+0x3c>
		TWI_write(data[i]);
	}
	TWI_stop();
    2732:	0e 94 91 09 	call	0x1322	; 0x1322 <TWI_stop>

}
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	1f 91       	pop	r17
    273c:	0f 91       	pop	r16
    273e:	ff 90       	pop	r15
    2740:	ef 90       	pop	r14
    2742:	08 95       	ret

00002744 <EEPROM_init>:

#include "../../MCAL/i2c/i2c.h"
#include "eeprom.h"


void EEPROM_init(void){
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	00 d0       	rcall	.+0      	; 0x274a <EEPROM_init+0x6>
    274a:	0f 92       	push	r0
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
	TWIconfig_t I2C_EEPROM_config= {2 , PRE_1 , 0xAA};
    2750:	ce 01       	movw	r24, r28
    2752:	01 96       	adiw	r24, 0x01	; 1
    2754:	dc 01       	movw	r26, r24
    2756:	ea ea       	ldi	r30, 0xAA	; 170
    2758:	f1 e0       	ldi	r31, 0x01	; 1
    275a:	23 e0       	ldi	r18, 0x03	; 3
    275c:	01 90       	ld	r0, Z+
    275e:	0d 92       	st	X+, r0
    2760:	21 50       	subi	r18, 0x01	; 1
    2762:	e1 f7       	brne	.-8      	; 0x275c <EEPROM_init+0x18>
	TWI_init(&I2C_EEPROM_config);
    2764:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <TWI_init>
}
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <main>:

#include "controller_utility_functions.h"


int main(void){
	UART_init(&uart);
    2774:	8f e9       	ldi	r24, 0x9F	; 159
    2776:	91 e0       	ldi	r25, 0x01	; 1
    2778:	0e 94 b7 06 	call	0xd6e	; 0xd6e <UART_init>
	MOTOR_init(&motor1);
    277c:	80 e8       	ldi	r24, 0x80	; 128
    277e:	91 e0       	ldi	r25, 0x01	; 1
    2780:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <MOTOR_init>
	DIO_initChannel(&alarm);
    2784:	86 ea       	ldi	r24, 0xA6	; 166
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DIO_initChannel>

	SREG |= (1<<7);
    278c:	8f b7       	in	r24, 0x3f	; 63
    278e:	80 68       	ori	r24, 0x80	; 128
    2790:	8f bf       	out	0x3f, r24	; 63

	if(CONT_firstRunCheck()){
    2792:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <CONT_firstRunCheck>
    2796:	88 23       	and	r24, r24
    2798:	91 f5       	brne	.+100    	; 0x27fe <main+0x8a>
		CONT_setPassword();
	}
	CONT_sendMSG(MAIN_MENU_MSG);
    279a:	8d e4       	ldi	r24, 0x4D	; 77
    279c:	0e 94 02 14 	call	0x2804	; 0x2804 <CONT_sendMSG>
	while(1){
		switch(recieved_data){
    27a0:	80 91 cc 01 	lds	r24, 0x01CC
    27a4:	84 37       	cpi	r24, 0x74	; 116
    27a6:	79 f0       	breq	.+30     	; 0x27c6 <main+0x52>
    27a8:	85 37       	cpi	r24, 0x75	; 117
    27aa:	c1 f0       	breq	.+48     	; 0x27dc <main+0x68>
    27ac:	83 36       	cpi	r24, 0x63	; 99
    27ae:	c1 f7       	brne	.-16     	; 0x27a0 <main+0x2c>

			}
			recieved_data = 0x00;
			break;
		case LOCK_REQ:
			CONT_closedoor();
    27b0:	0e 94 33 14 	call	0x2866	; 0x2866 <CONT_closedoor>
			CONT_sendMSG(MAIN_MENU_MSG);
    27b4:	8d e4       	ldi	r24, 0x4D	; 77
    27b6:	0e 94 02 14 	call	0x2804	; 0x2804 <CONT_sendMSG>
			recieved_data = 0x00;
    27ba:	10 92 cc 01 	sts	0x01CC, r1
	if(CONT_firstRunCheck()){
		CONT_setPassword();
	}
	CONT_sendMSG(MAIN_MENU_MSG);
	while(1){
		switch(recieved_data){
    27be:	80 91 cc 01 	lds	r24, 0x01CC
    27c2:	84 37       	cpi	r24, 0x74	; 116
    27c4:	89 f7       	brne	.-30     	; 0x27a8 <main+0x34>
				CONT_sendMSG(ALARM_MSG);
			}
			recieved_data = 0x00;
			break;
		case UPDATE_PASSWORD_REQ:
			if(CONT_getAndCompPassword(OLD_PASS_MSG)){
    27c6:	8f e6       	ldi	r24, 0x6F	; 111
    27c8:	0e 94 03 15 	call	0x2a06	; 0x2a06 <CONT_getAndCompPassword>
    27cc:	88 23       	and	r24, r24
    27ce:	89 f0       	breq	.+34     	; 0x27f2 <main+0x7e>
				CONT_setPassword();
    27d0:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <CONT_setPassword>
				CONT_sendMSG(MAIN_MENU_MSG);
    27d4:	8d e4       	ldi	r24, 0x4D	; 77
    27d6:	0e 94 02 14 	call	0x2804	; 0x2804 <CONT_sendMSG>
    27da:	ef cf       	rjmp	.-34     	; 0x27ba <main+0x46>
	while(1){
		switch(recieved_data){
		case ACK_MSG:
			break;
		case UNLOCK_REQ:
			if(CONT_getAndCompPassword(ENTER_PASS_MSG)){
    27dc:	87 e6       	ldi	r24, 0x67	; 103
    27de:	0e 94 03 15 	call	0x2a06	; 0x2a06 <CONT_getAndCompPassword>
    27e2:	88 23       	and	r24, r24
    27e4:	31 f0       	breq	.+12     	; 0x27f2 <main+0x7e>
				CONT_sendMSG(MAIN_MENU_MSG);
    27e6:	8d e4       	ldi	r24, 0x4D	; 77
    27e8:	0e 94 02 14 	call	0x2804	; 0x2804 <CONT_sendMSG>
				CONT_opendoor();
    27ec:	0e 94 49 14 	call	0x2892	; 0x2892 <CONT_opendoor>
    27f0:	e4 cf       	rjmp	.-56     	; 0x27ba <main+0x46>
			if(CONT_getAndCompPassword(OLD_PASS_MSG)){
				CONT_setPassword();
				CONT_sendMSG(MAIN_MENU_MSG);
			}
			else{
				CONT_startAlarm();
    27f2:	0e 94 24 14 	call	0x2848	; 0x2848 <CONT_startAlarm>
				CONT_sendMSG(ALARM_MSG);
    27f6:	88 e7       	ldi	r24, 0x78	; 120
    27f8:	0e 94 02 14 	call	0x2804	; 0x2804 <CONT_sendMSG>
    27fc:	de cf       	rjmp	.-68     	; 0x27ba <main+0x46>
	DIO_initChannel(&alarm);

	SREG |= (1<<7);

	if(CONT_firstRunCheck()){
		CONT_setPassword();
    27fe:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <CONT_setPassword>
    2802:	cb cf       	rjmp	.-106    	; 0x279a <main+0x26>

00002804 <CONT_sendMSG>:
	CONT_updatePassword(password);
	CONT_sendMSG(MAIN_MENU_MSG);
}


void CONT_sendMSG(uint8 msg){
    2804:	1f 93       	push	r17
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29
    280a:	18 2f       	mov	r17, r24
	recieved_data = 0x00;
    280c:	10 92 cc 01 	sts	0x01CC, r1
    2810:	c8 ec       	ldi	r28, 0xC8	; 200
    2812:	d0 e0       	ldi	r29, 0x00	; 0
	while(recieved_data != ACK_MSG){
    2814:	80 91 cc 01 	lds	r24, 0x01CC
    2818:	81 36       	cpi	r24, 0x61	; 97
    281a:	91 f0       	breq	.+36     	; 0x2840 <CONT_sendMSG+0x3c>
		UART_transmit(msg);
    281c:	81 2f       	mov	r24, r17
    281e:	0e 94 27 07 	call	0xe4e	; 0xe4e <UART_transmit>
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	ce 01       	movw	r24, r28
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <CONT_sendMSG+0x24>
    282c:	2f 5f       	subi	r18, 0xFF	; 255
    282e:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2830:	87 e2       	ldi	r24, 0x27	; 39
    2832:	20 31       	cpi	r18, 0x10	; 16
    2834:	38 07       	cpc	r19, r24
    2836:	b9 f7       	brne	.-18     	; 0x2826 <CONT_sendMSG+0x22>
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
	while(recieved_data != ACK_MSG){
    2838:	80 91 cc 01 	lds	r24, 0x01CC
    283c:	81 36       	cpi	r24, 0x61	; 97
    283e:	71 f7       	brne	.-36     	; 0x281c <CONT_sendMSG+0x18>
		UART_transmit(msg);
		_delay_ms(1000);
	}
}
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	1f 91       	pop	r17
    2846:	08 95       	ret

00002848 <CONT_startAlarm>:
void CONT_keepOpen(void){
	TIMER_start(&keepOpenTimer);
}

void CONT_startAlarm(){
	DIO_writeChannel(&alarm , 1);
    2848:	86 ea       	ldi	r24, 0xA6	; 166
    284a:	91 e0       	ldi	r25, 0x01	; 1
    284c:	61 e0       	ldi	r22, 0x01	; 1
    284e:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
	TIMER_start(&alarmTimer);
    2852:	88 e9       	ldi	r24, 0x98	; 152
    2854:	91 e0       	ldi	r25, 0x01	; 1
    2856:	0e 94 7d 07 	call	0xefa	; 0xefa <TIMER_start>
}
    285a:	08 95       	ret

0000285c <CONT_keepOpen>:
	MOTOR_start(&motor1 , 250);
	door_state = 0;
}

void CONT_keepOpen(void){
	TIMER_start(&keepOpenTimer);
    285c:	81 e9       	ldi	r24, 0x91	; 145
    285e:	91 e0       	ldi	r25, 0x01	; 1
    2860:	0e 94 7d 07 	call	0xefa	; 0xefa <TIMER_start>
}
    2864:	08 95       	ret

00002866 <CONT_closedoor>:
	MOTOR_start(&motor1 , 250);
	door_state = 1;
}

void CONT_closedoor(void){
	if(door_state == 0)
    2866:	80 91 c8 01 	lds	r24, 0x01C8
    286a:	88 23       	and	r24, r24
    286c:	09 f4       	brne	.+2      	; 0x2870 <CONT_closedoor+0xa>
    286e:	08 95       	ret
		return;
	MOTOR_changeDirection(&motor1 , CCW);
    2870:	80 e8       	ldi	r24, 0x80	; 128
    2872:	91 e0       	ldi	r25, 0x01	; 1
    2874:	61 e0       	ldi	r22, 0x01	; 1
    2876:	0e 94 75 0d 	call	0x1aea	; 0x1aea <MOTOR_changeDirection>
	TIMER_start(&motortimer);
    287a:	8a e8       	ldi	r24, 0x8A	; 138
    287c:	91 e0       	ldi	r25, 0x01	; 1
    287e:	0e 94 7d 07 	call	0xefa	; 0xefa <TIMER_start>
	MOTOR_start(&motor1 , 250);
    2882:	80 e8       	ldi	r24, 0x80	; 128
    2884:	91 e0       	ldi	r25, 0x01	; 1
    2886:	6a ef       	ldi	r22, 0xFA	; 250
    2888:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <MOTOR_start>
	door_state = 0;
    288c:	10 92 c8 01 	sts	0x01C8, r1
    2890:	08 95       	ret

00002892 <CONT_opendoor>:
		DIO_writeChannel(&alarm , 0);
	}
}

void CONT_opendoor(void){
	if(door_state == 1)
    2892:	80 91 c8 01 	lds	r24, 0x01C8
    2896:	81 30       	cpi	r24, 0x01	; 1
    2898:	89 f0       	breq	.+34     	; 0x28bc <CONT_opendoor+0x2a>
		return;
	MOTOR_changeDirection(&motor1 , CW);
    289a:	80 e8       	ldi	r24, 0x80	; 128
    289c:	91 e0       	ldi	r25, 0x01	; 1
    289e:	60 e0       	ldi	r22, 0x00	; 0
    28a0:	0e 94 75 0d 	call	0x1aea	; 0x1aea <MOTOR_changeDirection>
	TIMER_start(&motortimer);
    28a4:	8a e8       	ldi	r24, 0x8A	; 138
    28a6:	91 e0       	ldi	r25, 0x01	; 1
    28a8:	0e 94 7d 07 	call	0xefa	; 0xefa <TIMER_start>
	MOTOR_start(&motor1 , 250);
    28ac:	80 e8       	ldi	r24, 0x80	; 128
    28ae:	91 e0       	ldi	r25, 0x01	; 1
    28b0:	6a ef       	ldi	r22, 0xFA	; 250
    28b2:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <MOTOR_start>
	door_state = 1;
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	80 93 c8 01 	sts	0x01C8, r24
    28bc:	08 95       	ret

000028be <alarminterruptHandler>:
	}
}

void alarminterruptHandler(void){
	static uint8 counter = 0;
	counter++;
    28be:	20 91 c9 01 	lds	r18, 0x01C9
    28c2:	2f 5f       	subi	r18, 0xFF	; 255
    28c4:	20 93 c9 01 	sts	0x01C9, r18
	DDRA = 0xFF;
    28c8:	8f ef       	ldi	r24, 0xFF	; 255
    28ca:	8a bb       	out	0x1a, r24	; 26
	PORTA ^= (1<<0);
    28cc:	8b b3       	in	r24, 0x1b	; 27
    28ce:	91 e0       	ldi	r25, 0x01	; 1
    28d0:	89 27       	eor	r24, r25
    28d2:	8b bb       	out	0x1b, r24	; 27
	if(counter > ALARM_TIME){
    28d4:	2d 33       	cpi	r18, 0x3D	; 61
    28d6:	08 f4       	brcc	.+2      	; 0x28da <alarminterruptHandler+0x1c>
    28d8:	08 95       	ret
		TIMER_stop(&alarmTimer);
    28da:	88 e9       	ldi	r24, 0x98	; 152
    28dc:	91 e0       	ldi	r25, 0x01	; 1
    28de:	0e 94 61 08 	call	0x10c2	; 0x10c2 <TIMER_stop>
		UART_transmit(MAIN_MENU_MSG);
    28e2:	8d e4       	ldi	r24, 0x4D	; 77
    28e4:	0e 94 27 07 	call	0xe4e	; 0xe4e <UART_transmit>
		counter = 0;
    28e8:	10 92 c9 01 	sts	0x01C9, r1
		DIO_writeChannel(&alarm , 0);
    28ec:	86 ea       	ldi	r24, 0xA6	; 166
    28ee:	91 e0       	ldi	r25, 0x01	; 1
    28f0:	60 e0       	ldi	r22, 0x00	; 0
    28f2:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO_writeChannel>
    28f6:	08 95       	ret

000028f8 <motorTimerInterruptHandler>:

static uint8 door_state = 0;

void motorTimerInterruptHandler(void){
	static uint8 counter = 0;
	counter++;
    28f8:	20 91 cb 01 	lds	r18, 0x01CB
    28fc:	2f 5f       	subi	r18, 0xFF	; 255
    28fe:	20 93 cb 01 	sts	0x01CB, r18
	DDRA = 0xFF;
    2902:	8f ef       	ldi	r24, 0xFF	; 255
    2904:	8a bb       	out	0x1a, r24	; 26
	PORTA ^= (2<<0);
    2906:	8b b3       	in	r24, 0x1b	; 27
    2908:	92 e0       	ldi	r25, 0x02	; 2
    290a:	89 27       	eor	r24, r25
    290c:	8b bb       	out	0x1b, r24	; 27
	if(counter > MOTOR_ON_TIME){
    290e:	23 30       	cpi	r18, 0x03	; 3
    2910:	08 f4       	brcc	.+2      	; 0x2914 <motorTimerInterruptHandler+0x1c>
    2912:	08 95       	ret
		MOTOR_stop(&motor1);
    2914:	80 e8       	ldi	r24, 0x80	; 128
    2916:	91 e0       	ldi	r25, 0x01	; 1
    2918:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <MOTOR_stop>
		TIMER_stop(&motortimer);
    291c:	8a e8       	ldi	r24, 0x8A	; 138
    291e:	91 e0       	ldi	r25, 0x01	; 1
    2920:	0e 94 61 08 	call	0x10c2	; 0x10c2 <TIMER_stop>
		counter = 0;
    2924:	10 92 cb 01 	sts	0x01CB, r1
		if(door_state == 1){
    2928:	80 91 c8 01 	lds	r24, 0x01C8
    292c:	81 30       	cpi	r24, 0x01	; 1
    292e:	89 f7       	brne	.-30     	; 0x2912 <motorTimerInterruptHandler+0x1a>
	MOTOR_start(&motor1 , 250);
	door_state = 0;
}

void CONT_keepOpen(void){
	TIMER_start(&keepOpenTimer);
    2930:	81 e9       	ldi	r24, 0x91	; 145
    2932:	91 e0       	ldi	r25, 0x01	; 1
    2934:	0e 94 7d 07 	call	0xefa	; 0xefa <TIMER_start>
    2938:	08 95       	ret

0000293a <CONT_updatePassword>:
	//	UART_transmit(PASSWORD_MATCH);
	//	_delay_ms(1000);
	return 1;
}

void CONT_updatePassword(uint8 * pass){
    293a:	cf 93       	push	r28
    293c:	df 93       	push	r29
    293e:	bc 01       	movw	r22, r24
	EEPROM_writeData(0x00 , pass , 5);
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	45 e0       	ldi	r20, 0x05	; 5
    2946:	50 e0       	ldi	r21, 0x00	; 0
    2948:	0e 94 70 13 	call	0x26e0	; 0x26e0 <EEPROM_writeData>
	CONT_sendMSG(MAIN_MENU_MSG);
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
    294c:	10 92 cc 01 	sts	0x01CC, r1
    2950:	c8 ec       	ldi	r28, 0xC8	; 200
    2952:	d0 e0       	ldi	r29, 0x00	; 0
	while(recieved_data != ACK_MSG){
    2954:	80 91 cc 01 	lds	r24, 0x01CC
    2958:	81 36       	cpi	r24, 0x61	; 97
    295a:	91 f0       	breq	.+36     	; 0x2980 <CONT_updatePassword+0x46>
		UART_transmit(msg);
    295c:	80 e7       	ldi	r24, 0x70	; 112
    295e:	0e 94 27 07 	call	0xe4e	; 0xe4e <UART_transmit>
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	ce 01       	movw	r24, r28
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <CONT_updatePassword+0x2e>
    296c:	2f 5f       	subi	r18, 0xFF	; 255
    296e:	3f 4f       	sbci	r19, 0xFF	; 255
    2970:	87 e2       	ldi	r24, 0x27	; 39
    2972:	20 31       	cpi	r18, 0x10	; 16
    2974:	38 07       	cpc	r19, r24
    2976:	b9 f7       	brne	.-18     	; 0x2966 <CONT_updatePassword+0x2c>
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
	while(recieved_data != ACK_MSG){
    2978:	80 91 cc 01 	lds	r24, 0x01CC
    297c:	81 36       	cpi	r24, 0x61	; 97
    297e:	71 f7       	brne	.-36     	; 0x295c <CONT_updatePassword+0x22>
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	48 ec       	ldi	r20, 0xC8	; 200
    2986:	50 e0       	ldi	r21, 0x00	; 0
    2988:	ca 01       	movw	r24, r20
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <CONT_updatePassword+0x50>
    298e:	2f 5f       	subi	r18, 0xFF	; 255
    2990:	3f 4f       	sbci	r19, 0xFF	; 255
    2992:	87 e2       	ldi	r24, 0x27	; 39
    2994:	20 31       	cpi	r18, 0x10	; 16
    2996:	38 07       	cpc	r19, r24
    2998:	b9 f7       	brne	.-18     	; 0x2988 <CONT_updatePassword+0x4e>

void CONT_updatePassword(uint8 * pass){
	EEPROM_writeData(0x00 , pass , 5);
	CONT_sendMSG(PASS_UPDATED_MSG);
	_delay_ms(1000);
	recieved_data = 0x00;
    299a:	10 92 cc 01 	sts	0x01CC, r1
}
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	08 95       	ret

000029a4 <CONT_getPassword>:
		return 1; /*this is first time run*/
	}
	return 0;	/*this is not the first time run*/
}

void CONT_getPassword(uint8 * pass , uint8 msg){
    29a4:	ef 92       	push	r14
    29a6:	ff 92       	push	r15
    29a8:	1f 93       	push	r17
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	7c 01       	movw	r14, r24
    29b0:	16 2f       	mov	r17, r22
	CONT_sendMSG(MAIN_MENU_MSG);
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
    29b2:	10 92 cc 01 	sts	0x01CC, r1
    29b6:	c8 ec       	ldi	r28, 0xC8	; 200
    29b8:	d0 e0       	ldi	r29, 0x00	; 0
	while(recieved_data != ACK_MSG){
    29ba:	80 91 cc 01 	lds	r24, 0x01CC
    29be:	81 36       	cpi	r24, 0x61	; 97
    29c0:	91 f0       	breq	.+36     	; 0x29e6 <CONT_getPassword+0x42>
		UART_transmit(msg);
    29c2:	81 2f       	mov	r24, r17
    29c4:	0e 94 27 07 	call	0xe4e	; 0xe4e <UART_transmit>
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	ce 01       	movw	r24, r28
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <CONT_getPassword+0x2a>
    29d2:	2f 5f       	subi	r18, 0xFF	; 255
    29d4:	3f 4f       	sbci	r19, 0xFF	; 255
    29d6:	87 e2       	ldi	r24, 0x27	; 39
    29d8:	20 31       	cpi	r18, 0x10	; 16
    29da:	38 07       	cpc	r19, r24
    29dc:	b9 f7       	brne	.-18     	; 0x29cc <CONT_getPassword+0x28>
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
	while(recieved_data != ACK_MSG){
    29de:	80 91 cc 01 	lds	r24, 0x01CC
    29e2:	81 36       	cpi	r24, 0x61	; 97
    29e4:	71 f7       	brne	.-36     	; 0x29c2 <CONT_getPassword+0x1e>
	return 0;	/*this is not the first time run*/
}

void CONT_getPassword(uint8 * pass , uint8 msg){
	CONT_sendMSG(msg);
	SREG &= ~(1<<7);
    29e6:	8f b7       	in	r24, 0x3f	; 63
    29e8:	8f 77       	andi	r24, 0x7F	; 127
    29ea:	8f bf       	out	0x3f, r24	; 63
	UART_receiveString(pass , 5);
    29ec:	c7 01       	movw	r24, r14
    29ee:	65 e0       	ldi	r22, 0x05	; 5
    29f0:	0e 94 3e 07 	call	0xe7c	; 0xe7c <UART_receiveString>
	SREG |= (1<<7);
    29f4:	8f b7       	in	r24, 0x3f	; 63
    29f6:	80 68       	ori	r24, 0x80	; 128
    29f8:	8f bf       	out	0x3f, r24	; 63
}
    29fa:	df 91       	pop	r29
    29fc:	cf 91       	pop	r28
    29fe:	1f 91       	pop	r17
    2a00:	ff 90       	pop	r15
    2a02:	ef 90       	pop	r14
    2a04:	08 95       	ret

00002a06 <CONT_getAndCompPassword>:
void CONT_startAlarm(){
	DIO_writeChannel(&alarm , 1);
	TIMER_start(&alarmTimer);
}

uint8 CONT_getAndCompPassword(char msg){
    2a06:	cf 92       	push	r12
    2a08:	df 92       	push	r13
    2a0a:	ef 92       	push	r14
    2a0c:	ff 92       	push	r15
    2a0e:	0f 93       	push	r16
    2a10:	1f 93       	push	r17
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	2a 97       	sbiw	r28, 0x0a	; 10
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
    2a26:	e8 2e       	mov	r14, r24

	uint8 password[5]= {0};
    2a28:	85 e0       	ldi	r24, 0x05	; 5
    2a2a:	6e 01       	movw	r12, r28
    2a2c:	08 94       	sec
    2a2e:	c1 1c       	adc	r12, r1
    2a30:	d1 1c       	adc	r13, r1
    2a32:	d6 01       	movw	r26, r12
    2a34:	e8 2f       	mov	r30, r24
    2a36:	1d 92       	st	X+, r1
    2a38:	ea 95       	dec	r30
    2a3a:	e9 f7       	brne	.-6      	; 0x2a36 <CONT_getAndCompPassword+0x30>
	uint8 storedpassword[5] = {0};
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	36 96       	adiw	r30, 0x06	; 6
    2a40:	df 01       	movw	r26, r30
    2a42:	1d 92       	st	X+, r1
    2a44:	8a 95       	dec	r24
    2a46:	e9 f7       	brne	.-6      	; 0x2a42 <CONT_getAndCompPassword+0x3c>
	uint8 counter = 0;

	EEPROM_readData(0x00 , &storedpassword[0] , 1);
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	bf 01       	movw	r22, r30
    2a4e:	41 e0       	ldi	r20, 0x01	; 1
    2a50:	0e 94 29 13 	call	0x2652	; 0x2652 <EEPROM_readData>
	EEPROM_readData(0x01 , &storedpassword[1] , 1);
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	be 01       	movw	r22, r28
    2a5a:	69 5f       	subi	r22, 0xF9	; 249
    2a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a5e:	41 e0       	ldi	r20, 0x01	; 1
    2a60:	0e 94 29 13 	call	0x2652	; 0x2652 <EEPROM_readData>
	EEPROM_readData(0x02 , &storedpassword[2] , 1);
    2a64:	82 e0       	ldi	r24, 0x02	; 2
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	be 01       	movw	r22, r28
    2a6a:	68 5f       	subi	r22, 0xF8	; 248
    2a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6e:	41 e0       	ldi	r20, 0x01	; 1
    2a70:	0e 94 29 13 	call	0x2652	; 0x2652 <EEPROM_readData>
	EEPROM_readData(0x03 , &storedpassword[3] , 1);
    2a74:	83 e0       	ldi	r24, 0x03	; 3
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	be 01       	movw	r22, r28
    2a7a:	67 5f       	subi	r22, 0xF7	; 247
    2a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a7e:	41 e0       	ldi	r20, 0x01	; 1
    2a80:	0e 94 29 13 	call	0x2652	; 0x2652 <EEPROM_readData>
	EEPROM_readData(0x04 , &storedpassword[4] , 1);
    2a84:	84 e0       	ldi	r24, 0x04	; 4
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	be 01       	movw	r22, r28
    2a8a:	66 5f       	subi	r22, 0xF6	; 246
    2a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a8e:	41 e0       	ldi	r20, 0x01	; 1
    2a90:	0e 94 29 13 	call	0x2652	; 0x2652 <EEPROM_readData>
    2a94:	82 e0       	ldi	r24, 0x02	; 2
    2a96:	f8 2e       	mov	r15, r24
    2a98:	08 ec       	ldi	r16, 0xC8	; 200
    2a9a:	10 e0       	ldi	r17, 0x00	; 0
	CONT_sendMSG(MAIN_MENU_MSG);
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
    2a9c:	10 92 cc 01 	sts	0x01CC, r1
	while(recieved_data != ACK_MSG){
    2aa0:	80 91 cc 01 	lds	r24, 0x01CC
    2aa4:	81 36       	cpi	r24, 0x61	; 97
    2aa6:	91 f0       	breq	.+36     	; 0x2acc <CONT_getAndCompPassword+0xc6>
		UART_transmit(msg);
    2aa8:	8e 2d       	mov	r24, r14
    2aaa:	0e 94 27 07 	call	0xe4e	; 0xe4e <UART_transmit>
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	c8 01       	movw	r24, r16
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <CONT_getAndCompPassword+0xae>
    2ab8:	2f 5f       	subi	r18, 0xFF	; 255
    2aba:	3f 4f       	sbci	r19, 0xFF	; 255
    2abc:	b7 e2       	ldi	r27, 0x27	; 39
    2abe:	20 31       	cpi	r18, 0x10	; 16
    2ac0:	3b 07       	cpc	r19, r27
    2ac2:	b9 f7       	brne	.-18     	; 0x2ab2 <CONT_getAndCompPassword+0xac>
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
	while(recieved_data != ACK_MSG){
    2ac4:	80 91 cc 01 	lds	r24, 0x01CC
    2ac8:	81 36       	cpi	r24, 0x61	; 97
    2aca:	71 f7       	brne	.-36     	; 0x2aa8 <CONT_getAndCompPassword+0xa2>
	return 0;	/*this is not the first time run*/
}

void CONT_getPassword(uint8 * pass , uint8 msg){
	CONT_sendMSG(msg);
	SREG &= ~(1<<7);
    2acc:	8f b7       	in	r24, 0x3f	; 63
    2ace:	8f 77       	andi	r24, 0x7F	; 127
    2ad0:	8f bf       	out	0x3f, r24	; 63
	UART_receiveString(pass , 5);
    2ad2:	c6 01       	movw	r24, r12
    2ad4:	65 e0       	ldi	r22, 0x05	; 5
    2ad6:	0e 94 3e 07 	call	0xe7c	; 0xe7c <UART_receiveString>
	SREG |= (1<<7);
    2ada:	8f b7       	in	r24, 0x3f	; 63
    2adc:	80 68       	ori	r24, 0x80	; 128
    2ade:	8f bf       	out	0x3f, r24	; 63

uint8 CONT_password_match(uint8 * pass1 , uint8 * pass2){
	uint8 i=0;
	uint8 check[5];
	for(i=0 ; i<5 ; i++){
		if(pass1[i] != pass2[i]){
    2ae0:	99 81       	ldd	r25, Y+1	; 0x01
    2ae2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ae4:	98 17       	cp	r25, r24
    2ae6:	01 f5       	brne	.+64     	; 0x2b28 <CONT_getAndCompPassword+0x122>
    2ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aea:	8f 81       	ldd	r24, Y+7	; 0x07
    2aec:	98 17       	cp	r25, r24
    2aee:	e1 f4       	brne	.+56     	; 0x2b28 <CONT_getAndCompPassword+0x122>
    2af0:	9b 81       	ldd	r25, Y+3	; 0x03
    2af2:	88 85       	ldd	r24, Y+8	; 0x08
    2af4:	98 17       	cp	r25, r24
    2af6:	c1 f4       	brne	.+48     	; 0x2b28 <CONT_getAndCompPassword+0x122>
    2af8:	9c 81       	ldd	r25, Y+4	; 0x04
    2afa:	89 85       	ldd	r24, Y+9	; 0x09
    2afc:	98 17       	cp	r25, r24
    2afe:	a1 f4       	brne	.+40     	; 0x2b28 <CONT_getAndCompPassword+0x122>
    2b00:	9d 81       	ldd	r25, Y+5	; 0x05
    2b02:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b04:	98 17       	cp	r25, r24
    2b06:	81 f4       	brne	.+32     	; 0x2b28 <CONT_getAndCompPassword+0x122>
    2b08:	81 e0       	ldi	r24, 0x01	; 1
		if (CONT_password_match(password , storedpassword)){
			return 1;	/*password match*/
		}
	}
	return 0;	/*no matching*/
}
    2b0a:	2a 96       	adiw	r28, 0x0a	; 10
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	cf 91       	pop	r28
    2b18:	df 91       	pop	r29
    2b1a:	1f 91       	pop	r17
    2b1c:	0f 91       	pop	r16
    2b1e:	ff 90       	pop	r15
    2b20:	ef 90       	pop	r14
    2b22:	df 90       	pop	r13
    2b24:	cf 90       	pop	r12
    2b26:	08 95       	ret
	CONT_sendMSG(MAIN_MENU_MSG);
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
    2b28:	10 92 cc 01 	sts	0x01CC, r1
	while(recieved_data != ACK_MSG){
    2b2c:	80 91 cc 01 	lds	r24, 0x01CC
    2b30:	81 36       	cpi	r24, 0x61	; 97
    2b32:	91 f0       	breq	.+36     	; 0x2b58 <CONT_getAndCompPassword+0x152>
		UART_transmit(msg);
    2b34:	8e e6       	ldi	r24, 0x6E	; 110
    2b36:	0e 94 27 07 	call	0xe4e	; 0xe4e <UART_transmit>
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	c8 01       	movw	r24, r16
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	f1 f7       	brne	.-4      	; 0x2b40 <CONT_getAndCompPassword+0x13a>
    2b44:	2f 5f       	subi	r18, 0xFF	; 255
    2b46:	3f 4f       	sbci	r19, 0xFF	; 255
    2b48:	e7 e2       	ldi	r30, 0x27	; 39
    2b4a:	20 31       	cpi	r18, 0x10	; 16
    2b4c:	3e 07       	cpc	r19, r30
    2b4e:	b9 f7       	brne	.-18     	; 0x2b3e <CONT_getAndCompPassword+0x138>
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
	while(recieved_data != ACK_MSG){
    2b50:	80 91 cc 01 	lds	r24, 0x01CC
    2b54:	81 36       	cpi	r24, 0x61	; 97
    2b56:	71 f7       	brne	.-36     	; 0x2b34 <CONT_getAndCompPassword+0x12e>
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	c8 01       	movw	r24, r16
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	f1 f7       	brne	.-4      	; 0x2b5e <CONT_getAndCompPassword+0x158>
    2b62:	2f 5f       	subi	r18, 0xFF	; 255
    2b64:	3f 4f       	sbci	r19, 0xFF	; 255
    2b66:	f7 e2       	ldi	r31, 0x27	; 39
    2b68:	20 31       	cpi	r18, 0x10	; 16
    2b6a:	3f 07       	cpc	r19, r31
    2b6c:	b9 f7       	brne	.-18     	; 0x2b5c <CONT_getAndCompPassword+0x156>
    2b6e:	fa 94       	dec	r15
	EEPROM_readData(0x01 , &storedpassword[1] , 1);
	EEPROM_readData(0x02 , &storedpassword[2] , 1);
	EEPROM_readData(0x03 , &storedpassword[3] , 1);
	EEPROM_readData(0x04 , &storedpassword[4] , 1);

	for(counter=0 ; counter<3 ; counter++){
    2b70:	8f ef       	ldi	r24, 0xFF	; 255
    2b72:	f8 16       	cp	r15, r24
    2b74:	09 f0       	breq	.+2      	; 0x2b78 <CONT_getAndCompPassword+0x172>
    2b76:	92 cf       	rjmp	.-220    	; 0x2a9c <CONT_getAndCompPassword+0x96>
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	c7 cf       	rjmp	.-114    	; 0x2b0a <CONT_getAndCompPassword+0x104>

00002b7c <CONT_setPassword>:
		}
	}
	return 0;	/*no matching*/
}

void CONT_setPassword(void){
    2b7c:	cf 92       	push	r12
    2b7e:	df 92       	push	r13
    2b80:	ef 92       	push	r14
    2b82:	ff 92       	push	r15
    2b84:	0f 93       	push	r16
    2b86:	1f 93       	push	r17
    2b88:	df 93       	push	r29
    2b8a:	cf 93       	push	r28
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	2a 97       	sbiw	r28, 0x0a	; 10
    2b92:	0f b6       	in	r0, 0x3f	; 63
    2b94:	f8 94       	cli
    2b96:	de bf       	out	0x3e, r29	; 62
    2b98:	0f be       	out	0x3f, r0	; 63
    2b9a:	cd bf       	out	0x3d, r28	; 61
	uint8 password[5] = {0};
    2b9c:	85 e0       	ldi	r24, 0x05	; 5
    2b9e:	7e 01       	movw	r14, r28
    2ba0:	08 94       	sec
    2ba2:	e1 1c       	adc	r14, r1
    2ba4:	f1 1c       	adc	r15, r1
    2ba6:	f7 01       	movw	r30, r14
    2ba8:	98 2f       	mov	r25, r24
    2baa:	11 92       	st	Z+, r1
    2bac:	9a 95       	dec	r25
    2bae:	e9 f7       	brne	.-6      	; 0x2baa <CONT_setPassword+0x2e>
	uint8 repeated[5] = {0};
    2bb0:	96 e0       	ldi	r25, 0x06	; 6
    2bb2:	c9 2e       	mov	r12, r25
    2bb4:	d1 2c       	mov	r13, r1
    2bb6:	cc 0e       	add	r12, r28
    2bb8:	dd 1e       	adc	r13, r29
    2bba:	f6 01       	movw	r30, r12
    2bbc:	11 92       	st	Z+, r1
    2bbe:	8a 95       	dec	r24
    2bc0:	e9 f7       	brne	.-6      	; 0x2bbc <CONT_setPassword+0x40>
    2bc2:	08 ec       	ldi	r16, 0xC8	; 200
    2bc4:	10 e0       	ldi	r17, 0x00	; 0
	CONT_sendMSG(MAIN_MENU_MSG);
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
    2bc6:	10 92 cc 01 	sts	0x01CC, r1
	while(recieved_data != ACK_MSG){
    2bca:	80 91 cc 01 	lds	r24, 0x01CC
    2bce:	81 36       	cpi	r24, 0x61	; 97
    2bd0:	91 f0       	breq	.+36     	; 0x2bf6 <CONT_setPassword+0x7a>
		UART_transmit(msg);
    2bd2:	83 e7       	ldi	r24, 0x73	; 115
    2bd4:	0e 94 27 07 	call	0xe4e	; 0xe4e <UART_transmit>
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	c8 01       	movw	r24, r16
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <CONT_setPassword+0x62>
    2be2:	2f 5f       	subi	r18, 0xFF	; 255
    2be4:	3f 4f       	sbci	r19, 0xFF	; 255
    2be6:	f7 e2       	ldi	r31, 0x27	; 39
    2be8:	20 31       	cpi	r18, 0x10	; 16
    2bea:	3f 07       	cpc	r19, r31
    2bec:	b9 f7       	brne	.-18     	; 0x2bdc <CONT_setPassword+0x60>
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
	while(recieved_data != ACK_MSG){
    2bee:	80 91 cc 01 	lds	r24, 0x01CC
    2bf2:	81 36       	cpi	r24, 0x61	; 97
    2bf4:	71 f7       	brne	.-36     	; 0x2bd2 <CONT_setPassword+0x56>
	return 0;	/*this is not the first time run*/
}

void CONT_getPassword(uint8 * pass , uint8 msg){
	CONT_sendMSG(msg);
	SREG &= ~(1<<7);
    2bf6:	8f b7       	in	r24, 0x3f	; 63
    2bf8:	8f 77       	andi	r24, 0x7F	; 127
    2bfa:	8f bf       	out	0x3f, r24	; 63
	UART_receiveString(pass , 5);
    2bfc:	c7 01       	movw	r24, r14
    2bfe:	65 e0       	ldi	r22, 0x05	; 5
    2c00:	0e 94 3e 07 	call	0xe7c	; 0xe7c <UART_receiveString>
	SREG |= (1<<7);
    2c04:	8f b7       	in	r24, 0x3f	; 63
    2c06:	80 68       	ori	r24, 0x80	; 128
    2c08:	8f bf       	out	0x3f, r24	; 63
	CONT_sendMSG(MAIN_MENU_MSG);
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
    2c0a:	10 92 cc 01 	sts	0x01CC, r1
	while(recieved_data != ACK_MSG){
    2c0e:	80 91 cc 01 	lds	r24, 0x01CC
    2c12:	81 36       	cpi	r24, 0x61	; 97
    2c14:	91 f0       	breq	.+36     	; 0x2c3a <CONT_setPassword+0xbe>
		UART_transmit(msg);
    2c16:	82 e7       	ldi	r24, 0x72	; 114
    2c18:	0e 94 27 07 	call	0xe4e	; 0xe4e <UART_transmit>
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	c8 01       	movw	r24, r16
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <CONT_setPassword+0xa6>
    2c26:	2f 5f       	subi	r18, 0xFF	; 255
    2c28:	3f 4f       	sbci	r19, 0xFF	; 255
    2c2a:	87 e2       	ldi	r24, 0x27	; 39
    2c2c:	20 31       	cpi	r18, 0x10	; 16
    2c2e:	38 07       	cpc	r19, r24
    2c30:	b9 f7       	brne	.-18     	; 0x2c20 <CONT_setPassword+0xa4>
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
	while(recieved_data != ACK_MSG){
    2c32:	80 91 cc 01 	lds	r24, 0x01CC
    2c36:	81 36       	cpi	r24, 0x61	; 97
    2c38:	71 f7       	brne	.-36     	; 0x2c16 <CONT_setPassword+0x9a>
	return 0;	/*this is not the first time run*/
}

void CONT_getPassword(uint8 * pass , uint8 msg){
	CONT_sendMSG(msg);
	SREG &= ~(1<<7);
    2c3a:	8f b7       	in	r24, 0x3f	; 63
    2c3c:	8f 77       	andi	r24, 0x7F	; 127
    2c3e:	8f bf       	out	0x3f, r24	; 63
	UART_receiveString(pass , 5);
    2c40:	c6 01       	movw	r24, r12
    2c42:	65 e0       	ldi	r22, 0x05	; 5
    2c44:	0e 94 3e 07 	call	0xe7c	; 0xe7c <UART_receiveString>
	SREG |= (1<<7);
    2c48:	8f b7       	in	r24, 0x3f	; 63
    2c4a:	80 68       	ori	r24, 0x80	; 128
    2c4c:	8f bf       	out	0x3f, r24	; 63

uint8 CONT_password_match(uint8 * pass1 , uint8 * pass2){
	uint8 i=0;
	uint8 check[5];
	for(i=0 ; i<5 ; i++){
		if(pass1[i] != pass2[i]){
    2c4e:	99 81       	ldd	r25, Y+1	; 0x01
    2c50:	8e 81       	ldd	r24, Y+6	; 0x06
    2c52:	98 17       	cp	r25, r24
    2c54:	09 f0       	breq	.+2      	; 0x2c58 <CONT_setPassword+0xdc>
    2c56:	6d c0       	rjmp	.+218    	; 0x2d32 <CONT_setPassword+0x1b6>
    2c58:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c5c:	98 17       	cp	r25, r24
    2c5e:	09 f0       	breq	.+2      	; 0x2c62 <CONT_setPassword+0xe6>
    2c60:	68 c0       	rjmp	.+208    	; 0x2d32 <CONT_setPassword+0x1b6>
    2c62:	9b 81       	ldd	r25, Y+3	; 0x03
    2c64:	88 85       	ldd	r24, Y+8	; 0x08
    2c66:	98 17       	cp	r25, r24
    2c68:	09 f0       	breq	.+2      	; 0x2c6c <CONT_setPassword+0xf0>
    2c6a:	63 c0       	rjmp	.+198    	; 0x2d32 <CONT_setPassword+0x1b6>
    2c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6e:	89 85       	ldd	r24, Y+9	; 0x09
    2c70:	98 17       	cp	r25, r24
    2c72:	09 f0       	breq	.+2      	; 0x2c76 <CONT_setPassword+0xfa>
    2c74:	5e c0       	rjmp	.+188    	; 0x2d32 <CONT_setPassword+0x1b6>
    2c76:	9d 81       	ldd	r25, Y+5	; 0x05
    2c78:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c7a:	98 17       	cp	r25, r24
    2c7c:	09 f0       	breq	.+2      	; 0x2c80 <CONT_setPassword+0x104>
    2c7e:	59 c0       	rjmp	.+178    	; 0x2d32 <CONT_setPassword+0x1b6>
	//	_delay_ms(1000);
	return 1;
}

void CONT_updatePassword(uint8 * pass){
	EEPROM_writeData(0x00 , pass , 5);
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	b7 01       	movw	r22, r14
    2c86:	45 e0       	ldi	r20, 0x05	; 5
    2c88:	50 e0       	ldi	r21, 0x00	; 0
    2c8a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <EEPROM_writeData>
	CONT_sendMSG(MAIN_MENU_MSG);
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
    2c8e:	10 92 cc 01 	sts	0x01CC, r1
    2c92:	08 ec       	ldi	r16, 0xC8	; 200
    2c94:	10 e0       	ldi	r17, 0x00	; 0
	while(recieved_data != ACK_MSG){
    2c96:	80 91 cc 01 	lds	r24, 0x01CC
    2c9a:	81 36       	cpi	r24, 0x61	; 97
    2c9c:	91 f0       	breq	.+36     	; 0x2cc2 <CONT_setPassword+0x146>
		UART_transmit(msg);
    2c9e:	80 e7       	ldi	r24, 0x70	; 112
    2ca0:	0e 94 27 07 	call	0xe4e	; 0xe4e <UART_transmit>
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	c8 01       	movw	r24, r16
    2caa:	01 97       	sbiw	r24, 0x01	; 1
    2cac:	f1 f7       	brne	.-4      	; 0x2caa <CONT_setPassword+0x12e>
    2cae:	2f 5f       	subi	r18, 0xFF	; 255
    2cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb2:	f7 e2       	ldi	r31, 0x27	; 39
    2cb4:	20 31       	cpi	r18, 0x10	; 16
    2cb6:	3f 07       	cpc	r19, r31
    2cb8:	b9 f7       	brne	.-18     	; 0x2ca8 <CONT_setPassword+0x12c>
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
	while(recieved_data != ACK_MSG){
    2cba:	80 91 cc 01 	lds	r24, 0x01CC
    2cbe:	81 36       	cpi	r24, 0x61	; 97
    2cc0:	71 f7       	brne	.-36     	; 0x2c9e <CONT_setPassword+0x122>
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	48 ec       	ldi	r20, 0xC8	; 200
    2cc8:	50 e0       	ldi	r21, 0x00	; 0
    2cca:	ca 01       	movw	r24, r20
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <CONT_setPassword+0x150>
    2cd0:	2f 5f       	subi	r18, 0xFF	; 255
    2cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd4:	87 e2       	ldi	r24, 0x27	; 39
    2cd6:	20 31       	cpi	r18, 0x10	; 16
    2cd8:	38 07       	cpc	r19, r24
    2cda:	b9 f7       	brne	.-18     	; 0x2cca <CONT_setPassword+0x14e>

void CONT_updatePassword(uint8 * pass){
	EEPROM_writeData(0x00 , pass , 5);
	CONT_sendMSG(PASS_UPDATED_MSG);
	_delay_ms(1000);
	recieved_data = 0x00;
    2cdc:	10 92 cc 01 	sts	0x01CC, r1
	CONT_sendMSG(MAIN_MENU_MSG);
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
    2ce0:	10 92 cc 01 	sts	0x01CC, r1
    2ce4:	08 ec       	ldi	r16, 0xC8	; 200
    2ce6:	10 e0       	ldi	r17, 0x00	; 0
	while(recieved_data != ACK_MSG){
    2ce8:	80 91 cc 01 	lds	r24, 0x01CC
    2cec:	81 36       	cpi	r24, 0x61	; 97
    2cee:	91 f0       	breq	.+36     	; 0x2d14 <CONT_setPassword+0x198>
		UART_transmit(msg);
    2cf0:	8d e4       	ldi	r24, 0x4D	; 77
    2cf2:	0e 94 27 07 	call	0xe4e	; 0xe4e <UART_transmit>
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	c8 01       	movw	r24, r16
    2cfc:	01 97       	sbiw	r24, 0x01	; 1
    2cfe:	f1 f7       	brne	.-4      	; 0x2cfc <CONT_setPassword+0x180>
    2d00:	2f 5f       	subi	r18, 0xFF	; 255
    2d02:	3f 4f       	sbci	r19, 0xFF	; 255
    2d04:	97 e2       	ldi	r25, 0x27	; 39
    2d06:	20 31       	cpi	r18, 0x10	; 16
    2d08:	39 07       	cpc	r19, r25
    2d0a:	b9 f7       	brne	.-18     	; 0x2cfa <CONT_setPassword+0x17e>
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
	while(recieved_data != ACK_MSG){
    2d0c:	80 91 cc 01 	lds	r24, 0x01CC
    2d10:	81 36       	cpi	r24, 0x61	; 97
    2d12:	71 f7       	brne	.-36     	; 0x2cf0 <CONT_setPassword+0x174>
		CONT_getPassword(password , NEW_PASS_MGS);
		CONT_getPassword(repeated , REPEATE_PASS_MSG);
	}while(!CONT_password_match(password , repeated));
	CONT_updatePassword(password);
	CONT_sendMSG(MAIN_MENU_MSG);
}
    2d14:	2a 96       	adiw	r28, 0x0a	; 10
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	1f 91       	pop	r17
    2d26:	0f 91       	pop	r16
    2d28:	ff 90       	pop	r15
    2d2a:	ef 90       	pop	r14
    2d2c:	df 90       	pop	r13
    2d2e:	cf 90       	pop	r12
    2d30:	08 95       	ret


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
    2d32:	10 92 cc 01 	sts	0x01CC, r1
	while(recieved_data != ACK_MSG){
    2d36:	80 91 cc 01 	lds	r24, 0x01CC
    2d3a:	81 36       	cpi	r24, 0x61	; 97
    2d3c:	91 f0       	breq	.+36     	; 0x2d62 <CONT_setPassword+0x1e6>
		UART_transmit(msg);
    2d3e:	8e e6       	ldi	r24, 0x6E	; 110
    2d40:	0e 94 27 07 	call	0xe4e	; 0xe4e <UART_transmit>
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	c8 01       	movw	r24, r16
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <CONT_setPassword+0x1ce>
    2d4e:	2f 5f       	subi	r18, 0xFF	; 255
    2d50:	3f 4f       	sbci	r19, 0xFF	; 255
    2d52:	97 e2       	ldi	r25, 0x27	; 39
    2d54:	20 31       	cpi	r18, 0x10	; 16
    2d56:	39 07       	cpc	r19, r25
    2d58:	b9 f7       	brne	.-18     	; 0x2d48 <CONT_setPassword+0x1cc>
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
	while(recieved_data != ACK_MSG){
    2d5a:	80 91 cc 01 	lds	r24, 0x01CC
    2d5e:	81 36       	cpi	r24, 0x61	; 97
    2d60:	71 f7       	brne	.-36     	; 0x2d3e <CONT_setPassword+0x1c2>
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	c8 01       	movw	r24, r16
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	f1 f7       	brne	.-4      	; 0x2d68 <CONT_setPassword+0x1ec>
    2d6c:	2f 5f       	subi	r18, 0xFF	; 255
    2d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d70:	e7 e2       	ldi	r30, 0x27	; 39
    2d72:	20 31       	cpi	r18, 0x10	; 16
    2d74:	3e 07       	cpc	r19, r30
    2d76:	b9 f7       	brne	.-18     	; 0x2d66 <CONT_setPassword+0x1ea>
    2d78:	26 cf       	rjmp	.-436    	; 0x2bc6 <CONT_setPassword+0x4a>

00002d7a <keepOpeninterruptHandler>:
}


void keepOpeninterruptHandler(void){
	static uint8 counter = 0;
	counter++;
    2d7a:	20 91 ca 01 	lds	r18, 0x01CA
    2d7e:	2f 5f       	subi	r18, 0xFF	; 255
    2d80:	20 93 ca 01 	sts	0x01CA, r18
	DDRA = 0xFF;
    2d84:	8f ef       	ldi	r24, 0xFF	; 255
    2d86:	8a bb       	out	0x1a, r24	; 26
	PORTA ^= (1<<0);
    2d88:	8b b3       	in	r24, 0x1b	; 27
    2d8a:	91 e0       	ldi	r25, 0x01	; 1
    2d8c:	89 27       	eor	r24, r25
    2d8e:	8b bb       	out	0x1b, r24	; 27
	if(counter > KEEP_OPEN_TIME){
    2d90:	26 30       	cpi	r18, 0x06	; 6
    2d92:	08 f4       	brcc	.+2      	; 0x2d96 <keepOpeninterruptHandler+0x1c>
    2d94:	08 95       	ret
		TIMER_stop(&keepOpenTimer);
    2d96:	81 e9       	ldi	r24, 0x91	; 145
    2d98:	91 e0       	ldi	r25, 0x01	; 1
    2d9a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <TIMER_stop>
		counter = 0;
    2d9e:	10 92 ca 01 	sts	0x01CA, r1
	MOTOR_start(&motor1 , 250);
	door_state = 1;
}

void CONT_closedoor(void){
	if(door_state == 0)
    2da2:	80 91 c8 01 	lds	r24, 0x01C8
    2da6:	88 23       	and	r24, r24
    2da8:	a9 f3       	breq	.-22     	; 0x2d94 <keepOpeninterruptHandler+0x1a>
		return;
	MOTOR_changeDirection(&motor1 , CCW);
    2daa:	80 e8       	ldi	r24, 0x80	; 128
    2dac:	91 e0       	ldi	r25, 0x01	; 1
    2dae:	61 e0       	ldi	r22, 0x01	; 1
    2db0:	0e 94 75 0d 	call	0x1aea	; 0x1aea <MOTOR_changeDirection>
	TIMER_start(&motortimer);
    2db4:	8a e8       	ldi	r24, 0x8A	; 138
    2db6:	91 e0       	ldi	r25, 0x01	; 1
    2db8:	0e 94 7d 07 	call	0xefa	; 0xefa <TIMER_start>
	MOTOR_start(&motor1 , 250);
    2dbc:	80 e8       	ldi	r24, 0x80	; 128
    2dbe:	91 e0       	ldi	r25, 0x01	; 1
    2dc0:	6a ef       	ldi	r22, 0xFA	; 250
    2dc2:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <MOTOR_start>
	door_state = 0;
    2dc6:	10 92 c8 01 	sts	0x01C8, r1
    2dca:	08 95       	ret

00002dcc <CONT_firstRunCheck>:
		_delay_ms(1000);
	}
}


uint8 CONT_firstRunCheck(void){
    2dcc:	0f 93       	push	r16
    2dce:	1f 93       	push	r17
    2dd0:	df 93       	push	r29
    2dd2:	cf 93       	push	r28
    2dd4:	0f 92       	push	r0
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
	uint8 first_EEPROM_Byte = 0;
    2dda:	19 82       	std	Y+1, r1	; 0x01
	EEPROM_readData(0x00 , &first_EEPROM_Byte , 1);
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	be 01       	movw	r22, r28
    2de2:	6f 5f       	subi	r22, 0xFF	; 255
    2de4:	7f 4f       	sbci	r23, 0xFF	; 255
    2de6:	41 e0       	ldi	r20, 0x01	; 1
    2de8:	0e 94 29 13 	call	0x2652	; 0x2652 <EEPROM_readData>
	if(first_EEPROM_Byte == 0xFF){
    2dec:	89 81       	ldd	r24, Y+1	; 0x01
    2dee:	8f 3f       	cpi	r24, 0xFF	; 255
    2df0:	39 f0       	breq	.+14     	; 0x2e00 <CONT_firstRunCheck+0x34>
    2df2:	80 e0       	ldi	r24, 0x00	; 0
		CONT_sendMSG(FIRST_RUN);
		_delay_ms(1000);
		return 1; /*this is first time run*/
	}
	return 0;	/*this is not the first time run*/
}
    2df4:	0f 90       	pop	r0
    2df6:	cf 91       	pop	r28
    2df8:	df 91       	pop	r29
    2dfa:	1f 91       	pop	r17
    2dfc:	0f 91       	pop	r16
    2dfe:	08 95       	ret
	CONT_sendMSG(MAIN_MENU_MSG);
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
    2e00:	10 92 cc 01 	sts	0x01CC, r1
    2e04:	08 ec       	ldi	r16, 0xC8	; 200
    2e06:	10 e0       	ldi	r17, 0x00	; 0
	while(recieved_data != ACK_MSG){
    2e08:	80 91 cc 01 	lds	r24, 0x01CC
    2e0c:	81 36       	cpi	r24, 0x61	; 97
    2e0e:	91 f0       	breq	.+36     	; 0x2e34 <CONT_firstRunCheck+0x68>
		UART_transmit(msg);
    2e10:	86 e6       	ldi	r24, 0x66	; 102
    2e12:	0e 94 27 07 	call	0xe4e	; 0xe4e <UART_transmit>
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	c8 01       	movw	r24, r16
    2e1c:	01 97       	sbiw	r24, 0x01	; 1
    2e1e:	f1 f7       	brne	.-4      	; 0x2e1c <CONT_firstRunCheck+0x50>
    2e20:	2f 5f       	subi	r18, 0xFF	; 255
    2e22:	3f 4f       	sbci	r19, 0xFF	; 255
    2e24:	87 e2       	ldi	r24, 0x27	; 39
    2e26:	20 31       	cpi	r18, 0x10	; 16
    2e28:	38 07       	cpc	r19, r24
    2e2a:	b9 f7       	brne	.-18     	; 0x2e1a <CONT_firstRunCheck+0x4e>
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
	while(recieved_data != ACK_MSG){
    2e2c:	80 91 cc 01 	lds	r24, 0x01CC
    2e30:	81 36       	cpi	r24, 0x61	; 97
    2e32:	71 f7       	brne	.-36     	; 0x2e10 <CONT_firstRunCheck+0x44>
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	48 ec       	ldi	r20, 0xC8	; 200
    2e3a:	50 e0       	ldi	r21, 0x00	; 0
    2e3c:	ca 01       	movw	r24, r20
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	f1 f7       	brne	.-4      	; 0x2e3e <CONT_firstRunCheck+0x72>
    2e42:	2f 5f       	subi	r18, 0xFF	; 255
    2e44:	3f 4f       	sbci	r19, 0xFF	; 255
    2e46:	87 e2       	ldi	r24, 0x27	; 39
    2e48:	20 31       	cpi	r18, 0x10	; 16
    2e4a:	38 07       	cpc	r19, r24
    2e4c:	b9 f7       	brne	.-18     	; 0x2e3c <CONT_firstRunCheck+0x70>
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
		CONT_sendMSG(FIRST_RUN);
		_delay_ms(1000);
		return 1; /*this is first time run*/
	}
	return 0;	/*this is not the first time run*/
}
    2e50:	0f 90       	pop	r0
    2e52:	cf 91       	pop	r28
    2e54:	df 91       	pop	r29
    2e56:	1f 91       	pop	r17
    2e58:	0f 91       	pop	r16
    2e5a:	08 95       	ret

00002e5c <CONT_password_match>:
	UART_receiveString(pass , 5);
	SREG |= (1<<7);
}


uint8 CONT_password_match(uint8 * pass1 , uint8 * pass2){
    2e5c:	cf 93       	push	r28
    2e5e:	df 93       	push	r29
    2e60:	fc 01       	movw	r30, r24
    2e62:	db 01       	movw	r26, r22
	uint8 i=0;
	uint8 check[5];
	for(i=0 ; i<5 ; i++){
		if(pass1[i] != pass2[i]){
    2e64:	90 81       	ld	r25, Z
    2e66:	8c 91       	ld	r24, X
    2e68:	98 17       	cp	r25, r24
    2e6a:	d9 f4       	brne	.+54     	; 0x2ea2 <CONT_password_match+0x46>
    2e6c:	91 81       	ldd	r25, Z+1	; 0x01
    2e6e:	11 96       	adiw	r26, 0x01	; 1
    2e70:	8c 91       	ld	r24, X
    2e72:	11 97       	sbiw	r26, 0x01	; 1
    2e74:	98 17       	cp	r25, r24
    2e76:	a9 f4       	brne	.+42     	; 0x2ea2 <CONT_password_match+0x46>
    2e78:	92 81       	ldd	r25, Z+2	; 0x02
    2e7a:	12 96       	adiw	r26, 0x02	; 2
    2e7c:	8c 91       	ld	r24, X
    2e7e:	12 97       	sbiw	r26, 0x02	; 2
    2e80:	98 17       	cp	r25, r24
    2e82:	79 f4       	brne	.+30     	; 0x2ea2 <CONT_password_match+0x46>
    2e84:	93 81       	ldd	r25, Z+3	; 0x03
    2e86:	13 96       	adiw	r26, 0x03	; 3
    2e88:	8c 91       	ld	r24, X
    2e8a:	13 97       	sbiw	r26, 0x03	; 3
    2e8c:	98 17       	cp	r25, r24
    2e8e:	49 f4       	brne	.+18     	; 0x2ea2 <CONT_password_match+0x46>
    2e90:	94 81       	ldd	r25, Z+4	; 0x04
    2e92:	14 96       	adiw	r26, 0x04	; 4
    2e94:	8c 91       	ld	r24, X
    2e96:	98 17       	cp	r25, r24
    2e98:	21 f4       	brne	.+8      	; 0x2ea2 <CONT_password_match+0x46>
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	//	UART_transmit(PASSWORD_MATCH);
	//	_delay_ms(1000);
	return 1;
}
    2e9c:	df 91       	pop	r29
    2e9e:	cf 91       	pop	r28
    2ea0:	08 95       	ret
	CONT_sendMSG(MAIN_MENU_MSG);
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
    2ea2:	10 92 cc 01 	sts	0x01CC, r1
    2ea6:	c8 ec       	ldi	r28, 0xC8	; 200
    2ea8:	d0 e0       	ldi	r29, 0x00	; 0
	while(recieved_data != ACK_MSG){
    2eaa:	80 91 cc 01 	lds	r24, 0x01CC
    2eae:	81 36       	cpi	r24, 0x61	; 97
    2eb0:	91 f0       	breq	.+36     	; 0x2ed6 <CONT_password_match+0x7a>
		UART_transmit(msg);
    2eb2:	8e e6       	ldi	r24, 0x6E	; 110
    2eb4:	0e 94 27 07 	call	0xe4e	; 0xe4e <UART_transmit>
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	ce 01       	movw	r24, r28
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	f1 f7       	brne	.-4      	; 0x2ebe <CONT_password_match+0x62>
    2ec2:	2f 5f       	subi	r18, 0xFF	; 255
    2ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec6:	87 e2       	ldi	r24, 0x27	; 39
    2ec8:	20 31       	cpi	r18, 0x10	; 16
    2eca:	38 07       	cpc	r19, r24
    2ecc:	b9 f7       	brne	.-18     	; 0x2ebc <CONT_password_match+0x60>
}


void CONT_sendMSG(uint8 msg){
	recieved_data = 0x00;
	while(recieved_data != ACK_MSG){
    2ece:	80 91 cc 01 	lds	r24, 0x01CC
    2ed2:	81 36       	cpi	r24, 0x61	; 97
    2ed4:	71 f7       	brne	.-36     	; 0x2eb2 <CONT_password_match+0x56>
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	48 ec       	ldi	r20, 0xC8	; 200
    2edc:	50 e0       	ldi	r21, 0x00	; 0
    2ede:	ca 01       	movw	r24, r20
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	f1 f7       	brne	.-4      	; 0x2ee0 <CONT_password_match+0x84>
    2ee4:	2f 5f       	subi	r18, 0xFF	; 255
    2ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee8:	87 e2       	ldi	r24, 0x27	; 39
    2eea:	20 31       	cpi	r18, 0x10	; 16
    2eec:	38 07       	cpc	r19, r24
    2eee:	b9 f7       	brne	.-18     	; 0x2ede <CONT_password_match+0x82>
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	//	UART_transmit(PASSWORD_MATCH);
	//	_delay_ms(1000);
	return 1;
}
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	08 95       	ret

00002ef8 <__udivmodhi4>:
    2ef8:	aa 1b       	sub	r26, r26
    2efa:	bb 1b       	sub	r27, r27
    2efc:	51 e1       	ldi	r21, 0x11	; 17
    2efe:	07 c0       	rjmp	.+14     	; 0x2f0e <__udivmodhi4_ep>

00002f00 <__udivmodhi4_loop>:
    2f00:	aa 1f       	adc	r26, r26
    2f02:	bb 1f       	adc	r27, r27
    2f04:	a6 17       	cp	r26, r22
    2f06:	b7 07       	cpc	r27, r23
    2f08:	10 f0       	brcs	.+4      	; 0x2f0e <__udivmodhi4_ep>
    2f0a:	a6 1b       	sub	r26, r22
    2f0c:	b7 0b       	sbc	r27, r23

00002f0e <__udivmodhi4_ep>:
    2f0e:	88 1f       	adc	r24, r24
    2f10:	99 1f       	adc	r25, r25
    2f12:	5a 95       	dec	r21
    2f14:	a9 f7       	brne	.-22     	; 0x2f00 <__udivmodhi4_loop>
    2f16:	80 95       	com	r24
    2f18:	90 95       	com	r25
    2f1a:	bc 01       	movw	r22, r24
    2f1c:	cd 01       	movw	r24, r26
    2f1e:	08 95       	ret

00002f20 <__prologue_saves__>:
    2f20:	2f 92       	push	r2
    2f22:	3f 92       	push	r3
    2f24:	4f 92       	push	r4
    2f26:	5f 92       	push	r5
    2f28:	6f 92       	push	r6
    2f2a:	7f 92       	push	r7
    2f2c:	8f 92       	push	r8
    2f2e:	9f 92       	push	r9
    2f30:	af 92       	push	r10
    2f32:	bf 92       	push	r11
    2f34:	cf 92       	push	r12
    2f36:	df 92       	push	r13
    2f38:	ef 92       	push	r14
    2f3a:	ff 92       	push	r15
    2f3c:	0f 93       	push	r16
    2f3e:	1f 93       	push	r17
    2f40:	cf 93       	push	r28
    2f42:	df 93       	push	r29
    2f44:	cd b7       	in	r28, 0x3d	; 61
    2f46:	de b7       	in	r29, 0x3e	; 62
    2f48:	ca 1b       	sub	r28, r26
    2f4a:	db 0b       	sbc	r29, r27
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	f8 94       	cli
    2f50:	de bf       	out	0x3e, r29	; 62
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	cd bf       	out	0x3d, r28	; 61
    2f56:	09 94       	ijmp

00002f58 <__epilogue_restores__>:
    2f58:	2a 88       	ldd	r2, Y+18	; 0x12
    2f5a:	39 88       	ldd	r3, Y+17	; 0x11
    2f5c:	48 88       	ldd	r4, Y+16	; 0x10
    2f5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f60:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f62:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f64:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f66:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f68:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f6a:	b9 84       	ldd	r11, Y+9	; 0x09
    2f6c:	c8 84       	ldd	r12, Y+8	; 0x08
    2f6e:	df 80       	ldd	r13, Y+7	; 0x07
    2f70:	ee 80       	ldd	r14, Y+6	; 0x06
    2f72:	fd 80       	ldd	r15, Y+5	; 0x05
    2f74:	0c 81       	ldd	r16, Y+4	; 0x04
    2f76:	1b 81       	ldd	r17, Y+3	; 0x03
    2f78:	aa 81       	ldd	r26, Y+2	; 0x02
    2f7a:	b9 81       	ldd	r27, Y+1	; 0x01
    2f7c:	ce 0f       	add	r28, r30
    2f7e:	d1 1d       	adc	r29, r1
    2f80:	0f b6       	in	r0, 0x3f	; 63
    2f82:	f8 94       	cli
    2f84:	de bf       	out	0x3e, r29	; 62
    2f86:	0f be       	out	0x3f, r0	; 63
    2f88:	cd bf       	out	0x3d, r28	; 61
    2f8a:	ed 01       	movw	r28, r26
    2f8c:	08 95       	ret

00002f8e <_exit>:
    2f8e:	f8 94       	cli

00002f90 <__stop_program>:
    2f90:	ff cf       	rjmp	.-2      	; 0x2f90 <__stop_program>
